{"documentCount":31,"nextId":31,"documentIds":{"0":"site/pages/blog/helloworld.mdx#hello-world","1":"site/pages/blog/#blog","2":"site/pages/docs/blank.mdx#blank-page","3":"site/pages/docs/#cellscript","4":"site/pages/docs/install.mdx#installations","5":"site/pages/docs/install.mdx#build-from-source","6":"site/pages/docs/install.mdx#how-to-build-macos-and-install","7":"site/pages/docs/install.mdx#how-to-build-ubuntu","8":"site/pages/docs/install.mdx#install-golang-122","9":"site/pages/docs/install.mdx#install-llvm","10":"site/pages/docs/install.mdx#install-riscv-tools","11":"site/pages/docs/install.mdx#build--install-cellscript-compiler-in-the-root-folder","12":"site/pages/docs/install.mdx#compile-a-cellscript-program","13":"site/pages/docs/install.mdx#compile-cell-file","14":"site/pages/docs/install.mdx#compile-elf-target","15":"site/pages/docs/install.mdx#to-run-elf-file","16":"site/pages/docs/install.mdx#usage-of-cell-script-compiler","17":"site/pages/docs/stdlib.mdx#package-blockchain","18":"site/pages/docs/stdlib.mdx#package-ckb","19":"site/pages/docs/stdlib.mdx#loadscript","20":"site/pages/docs/tour.mdx#a-tour-of-cellscript","21":"site/pages/docs/tour.mdx#installations","22":"site/pages/docs/tour.mdx#cellscript-by-example","23":"site/pages/docs/tour.mdx#hello-world","24":"site/pages/docs/tour.mdx#value","25":"site/pages/docs/tour.mdx#variables","26":"site/pages/docs/tour.mdx#constants","27":"site/pages/docs/tour.mdx#for-loop","28":"site/pages/docs/tour.mdx#ifelse-branch","29":"site/pages/docs/tour.mdx#array","30":"site/pages/docs/tour.mdx#interface"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[3,1,12],"1":[1,1,1],"2":[2,1,6],"3":[1,1,40],"4":[1,1,1],"5":[3,1,13],"6":[6,4,24],"7":[5,4,1],"8":[4,9,11],"9":[2,9,14],"10":[3,9,21],"11":[9,9,6],"12":[4,1,16],"13":[3,10,20],"14":[3,10,17],"15":[4,10,38],"16":[5,1,45],"17":[2,1,17],"18":[2,1,1],"19":[1,3,26],"20":[4,1,1],"21":[1,4,2],"22":[3,4,1],"23":[2,6,18],"24":[1,6,25],"25":[1,6,34],"26":[1,6,29],"27":[2,6,35],"28":[3,6,37],"29":[1,6,34],"30":[1,6,45]},"averageFieldLength":[2.7096774193548385,4.645161290322583,19.06451612903226],"storedFields":{"0":{"href":"/blog/helloworld#hello-world","html":"<div data-authors=\"true\"></div></header>\n<div></div>\n<p>Right now, we announce the first runnable Cell Script is published now!</p>","isPage":true,"text":"\n\nRight now, we announce the first runnable Cell Script is published now!","title":"Hello World!","titles":[]},"1":{"href":"/blog#blog","html":"</header>\n<div data-blog-posts=\"true\"></div>","isPage":true,"text":"\n","title":"Blog","titles":[]},"2":{"href":"/docs/blank#blank-page","html":"</header>\n<p>This is a blank page.</p>","isPage":true,"text":"\nThis is a blank page.","title":"Blank page","titles":[]},"3":{"href":"/docs#cellscript","html":"\n<p>Cell Script is a new designed statically-typed programming language for smart contracts running on UTXO-based chain CKB.</p>\n<p>By using Cell Script, any developer can start the jounery of CKB smart contracts in minutes.</p>\n<p>The Cell Script specification can be found <a href=\"https://github.com/cell-labs/cell-script/blob/main/SPEC.md\">here</a></p>\n<p>More details about CKB, can be find <a href=\"https://www.nervos.org/ckbpage\">here</a></p>","isPage":true,"text":"\nCell Script is a new designed statically-typed programming language for smart contracts running on UTXO-based chain CKB.\nBy using Cell Script, any developer can start the jounery of CKB smart contracts in minutes.\nThe Cell Script specification can be found here\nMore details about CKB, can be find here","title":"CellScript","titles":[null]},"4":{"href":"/docs/install#installations","html":"</header>\n","isPage":true,"text":"\n","title":"Installations","titles":[]},"5":{"href":"/docs/install#build-from-source","html":"\n<p>You can build the Cell Script Compiler from source code right now!</p>\n","isPage":false,"text":"\nYou can build the Cell Script Compiler from source code right now!\n","title":"Build from source","titles":["Installations"]},"6":{"href":"/docs/install#how-to-build-macos-and-install","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>brew install go@1.22</span></span>\n<span class=\"line\"><span>brew install llvm@18</span></span>\n<span class=\"line\"><span>brew tap riscv-software-src/riscv</span></span>\n<span class=\"line\"><span>brew install riscv-tools</span></span>\n<span class=\"line\"><span>export PATH=&quot;/opt/homebrew/bin:$PATH&quot;</span></span>\n<span class=\"line\"><span>export PATH=&quot;/opt/homebrew/opt/llvm@18/bin:$PATH&quot;</span></span>\n<span class=\"line\"><span>make build</span></span>\n<span class=\"line\"><span>source install.sh</span></span></code></pre>\n","isPage":false,"text":"\nbrew install go@1.22\nbrew install llvm@18\nbrew tap riscv-software-src/riscv\nbrew install riscv-tools\nexport PATH=&quot;/opt/homebrew/bin:$PATH&quot;\nexport PATH=&quot;/opt/homebrew/opt/llvm@18/bin:$PATH&quot;\nmake build\nsource install.sh\n","title":"How to build (MacOS) and Install","titles":["Installations","Build from source"]},"7":{"href":"/docs/install#how-to-build-ubuntu","html":"\n<div data-vocs-steps=\"true\"><div data-depth=\"4\">","isPage":false,"text":"\n","title":"How to build (Ubuntu)","titles":["Installations","Build from source"]},"8":{"href":"/docs/install#install-golang-122","html":"<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>sudo add-apt-repository ppa:longsleep/golang-backports</span></span>\n<span class=\"line\"><span>sudo apt update</span></span>\n<span class=\"line\"><span>sudo apt install golang-go</span></span></code></pre></div><div data-depth=\"4\">","isPage":false,"text":"sudo add-apt-repository ppa:longsleep/golang-backports\nsudo apt update\nsudo apt install golang-go","title":"Install golang 1.22","titles":["Installations","Build from source","How to build (Ubuntu)"]},"9":{"href":"/docs/install#install-llvm","html":"<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>sudo bash -c &quot;$(wget -O - https://apt.llvm.org/llvm.sh)&quot;</span></span></code></pre><p>or</p><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>sudo apt install llvm</span></span></code></pre></div><div data-depth=\"4\">","isPage":false,"text":"sudo bash -c &quot;$(wget -O - https://apt.llvm.org/llvm.sh)&quot;orsudo apt install llvm","title":"Install llvm","titles":["Installations","Build from source","How to build (Ubuntu)"]},"10":{"href":"/docs/install#install-riscv-tools","html":"<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>sudo apt install gcc-riscv64-unknown-elf</span></span></code></pre><p><a href=\"https://github.com/riscv-software-src/homebrew-riscv\">You can use homebrew</a></p><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>brew tap riscv-software-src/riscv</span></span>\n<span class=\"line\"><span>brew install riscv-tools</span></span></code></pre><p>or <a href=\"https://github.com/riscv-collab/riscv-gnu-toolchain\">you can build from source.</a></p></div><div data-depth=\"4\">","isPage":false,"text":"sudo apt install gcc-riscv64-unknown-elfYou can use homebrewbrew tap riscv-software-src/riscv\nbrew install riscv-toolsor you can build from source.","title":"Install riscv-tools","titles":["Installations","Build from source","How to build (Ubuntu)"]},"11":{"href":"/docs/install#build--install-cellscript-compiler-in-the-root-folder","html":"<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>make build</span></span>\n<span class=\"line\"><span>source install.sh</span></span></code></pre></div></div>\n","isPage":false,"text":"make build\nsource install.sh\n","title":"Build &amp; Install CellScript compiler in the root folder","titles":["Installations","Build from source","How to build (Ubuntu)"]},"12":{"href":"/docs/install#compile-a-cellscript-program","html":"\n<p>You can write your program in file with <code>.cell</code>. Here for example, we say <code>hello.cell</code></p>\n<div data-vocs-steps=\"true\"><div data-depth=\"4\">","isPage":false,"text":"\nYou can write your program in file with .cell. Here for example, we say hello.cell\n","title":"Compile a cellscript program","titles":["Installations"]},"13":{"href":"/docs/install#compile-cell-file","html":"<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>cell hello.cell</span></span></code></pre><p>You will get the output file also known as elf file named <code>hello</code> in the root folder. Just run it <code>./hello</code>!</p></div><div data-depth=\"4\">","isPage":false,"text":"cell hello.cellYou will get the output file also known as elf file named hello in the root folder. Just run it ./hello!","title":"Compile .cell file","titles":["Installations","Compile a cellscript program","How to build (Ubuntu)"]},"14":{"href":"/docs/install#compile-elf-target","html":"<p>To compile <code>elf</code></p><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>cell -t riscv hello.cell</span></span></code></pre><p>You will get the elf executable named <code>hello</code> in the root folder.</p></div><div data-depth=\"4\">","isPage":false,"text":"To compile elfcell -t riscv hello.cellYou will get the elf executable named hello in the root folder.","title":"Compile elf target","titles":["Installations","Compile a cellscript program","How to build (Ubuntu)"]},"15":{"href":"/docs/install#to-run-elf-file","html":"<p>To run the elf file, we need <code>ckb-debugger</code> the default debugger for ckb programs.</p><p>Run the following command to install <code>ckb-debugger</code>, suppose you already know what is cargo.</p><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>cargo install --git https://github.com/nervosnetwork/ckb-standalone-debugger ckb-debugger</span></span></code></pre><p>Run below command to debug &amp; run the <code>hello</code> program.</p><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>ckb-debugger --bin hello</span></span></code></pre></div></div>\n","isPage":false,"text":"To run the elf file, we need ckb-debugger the default debugger for ckb programs.Run the following command to install ckb-debugger, suppose you already know what is cargo.cargo install --git https://github.com/nervosnetwork/ckb-standalone-debugger ckb-debuggerRun below command to debug &amp; run the hello program.ckb-debugger --bin hello\n","title":"To run elf file","titles":["Installations","Compile a cellscript program","How to build (Ubuntu)"]},"16":{"href":"/docs/install#usage-of-cell-script-compiler","html":"\n<p>Use <code>cell --help</code> to view the usage instructions.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Usage: cell [options] &lt;filename&gt;</span></span>\n<span class=\"line\"><span>  -d, --debug           Emit debug information during compile time</span></span>\n<span class=\"line\"><span>  -h, --help            Show help message</span></span>\n<span class=\"line\"><span>  -O, --optimize        Enable clang optimization</span></span>\n<span class=\"line\"><span>  -o, --output string   Output binary filename</span></span>\n<span class=\"line\"><span>  -t, --target string   Compile to this target (default &quot;native&quot;)</span></span>\n<span class=\"line\"><span>  -v, --verbose         Emit verbose command during compiling</span></span></code></pre>","isPage":false,"text":"\nUse cell --help to view the usage instructions.\nUsage: cell [options] &lt;filename&gt;\n  -d, --debug           Emit debug information during compile time\n  -h, --help            Show help message\n  -O, --optimize        Enable clang optimization\n  -o, --output string   Output binary filename\n  -t, --target string   Compile to this target (default &quot;native&quot;)\n  -v, --verbose         Emit verbose command during compiling","title":"Usage of Cell Script Compiler","titles":["Installations"]},"17":{"href":"/docs/stdlib#package-blockchain","html":"\n<p>Structures of a <a href=\"https://docs.nervos.org/docs/tech-explanation/cell\">CKB Cell</a>.</p>\n<p>Since everything is a collection of bytes, these structures just a wrapper of byte slice.</p>\n","isPage":true,"text":"\nStructures of a CKB Cell.\nSince everything is a collection of bytes, these structures just a wrapper of byte slice.\n","title":"package blockchain","titles":[null]},"18":{"href":"/docs/stdlib#package-ckb","html":"\n","isPage":false,"text":"\n","title":"package ckb","titles":[null]},"19":{"href":"/docs/stdlib#loadscript","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>func loadScript() blockchain.Script</span></span></code></pre>\n<p>Load current running script, which could be a Lock Script or a Type Script. You can check it based on the <a href=\"#hash_type\">hash_type</a> field.</p>\n","isPage":false,"text":"\nfunc loadScript() blockchain.Script\nLoad current running script, which could be a Lock Script or a Type Script. You can check it based on the hash_type field.\n","title":"loadScript","titles":[null,"package ckb"]},"20":{"href":"/docs/tour#a-tour-of-cellscript","html":"</header>\n","isPage":true,"text":"\n","title":"A Tour of CellScript","titles":[]},"21":{"href":"/docs/tour#installations","html":"\n<p><a href=\"/docs/install\">installation</a></p>\n","isPage":false,"text":"\ninstallation\n","title":"Installations","titles":["A Tour of CellScript"]},"22":{"href":"/docs/tour#cellscript-by-example","html":"\n","isPage":false,"text":"\n","title":"CellScript by example","titles":["A Tour of CellScript"]},"23":{"href":"/docs/tour#hello-world","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>package main</span></span>\n<span class=\"line\"><span>import &quot;debug&quot;</span></span>\n<span class=\"line\"><span>function main() {</span></span>\n<span class=\"line\"><span>    debug.Println(&quot;hello world&quot;)</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>$ cell -r riscv hello-world.cell</span></span>\n<span class=\"line\"><span>$ ls</span></span>\n<span class=\"line\"><span>hello-world.cell hello-world</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>$ ckb-debugger --bin hello-world</span></span>\n<span class=\"line\"><span>hello world</span></span></code></pre>\n","isPage":false,"text":"\npackage main\nimport &quot;debug&quot;\nfunction main() {\n    debug.Println(&quot;hello world&quot;)\n}\n$ cell -r riscv hello-world.cell\n$ ls\nhello-world.cell hello-world\n\n$ ckb-debugger --bin hello-world\nhello world\n","title":"Hello World","titles":["A Tour of CellScript","CellScript by example"]},"24":{"href":"/docs/tour#value","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>package main</span></span>\n<span class=\"line\"><span>import &quot;debug&quot;</span></span>\n<span class=\"line\"><span>function main() {</span></span>\n<span class=\"line\"><span>    debug.Printf(&quot;cellscript&quot;)</span></span>\n<span class=\"line\"><span>    debug.Printf(&quot;1+1 = %d&quot;, 1+1)</span></span>\n<span class=\"line\"><span>    debug.Printf(&quot;true = %d&quot;, true)</span></span>\n<span class=\"line\"><span>\treturn 0</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>$ cell -r riscv value.cell</span></span>\n<span class=\"line\"><span>$ ckb-debugger --bin value</span></span>\n<span class=\"line\"><span>cellscript</span></span>\n<span class=\"line\"><span>1+1 = 2</span></span>\n<span class=\"line\"><span>true = 1</span></span></code></pre>\n","isPage":false,"text":"\npackage main\nimport &quot;debug&quot;\nfunction main() {\n    debug.Printf(&quot;cellscript&quot;)\n    debug.Printf(&quot;1+1 = %d&quot;, 1+1)\n    debug.Printf(&quot;true = %d&quot;, true)\n\treturn 0\n}\n$ cell -r riscv value.cell\n$ ckb-debugger --bin value\ncellscript\n1+1 = 2\ntrue = 1\n","title":"Value","titles":["A Tour of CellScript","CellScript by example"]},"25":{"href":"/docs/tour#variables","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>package main</span></span>\n<span class=\"line\"><span>import &quot;debug&quot;</span></span>\n<span class=\"line\"><span>function main() {</span></span>\n<span class=\"line\"><span>    var a = &quot;initial&quot;</span></span>\n<span class=\"line\"><span>    debug.Printf(&quot;%s&quot;, a)</span></span>\n<span class=\"line\"><span>    var b, c int64 = 1, 2</span></span>\n<span class=\"line\"><span>    debug.Printf(&quot;%d %d&quot;, b, c)</span></span>\n<span class=\"line\"><span>    var d = true</span></span>\n<span class=\"line\"><span>    debug.Printf(&quot;%d&quot;, d)</span></span>\n<span class=\"line\"><span>    var e int32</span></span>\n<span class=\"line\"><span>    debug.Printf(&quot;%d&quot;, e)</span></span>\n<span class=\"line\"><span>    f := &quot;short&quot;</span></span>\n<span class=\"line\"><span>    debug.Printf(&quot;%s&quot;, f)</span></span>\n<span class=\"line\"><span>\treturn 0</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>$ cell -r riscv value.cell</span></span>\n<span class=\"line\"><span>$ ckb-debugger --bin value</span></span>\n<span class=\"line\"><span>initial</span></span>\n<span class=\"line\"><span>1 2</span></span>\n<span class=\"line\"><span>1</span></span>\n<span class=\"line\"><span>0</span></span>\n<span class=\"line\"><span>short</span></span></code></pre>\n","isPage":false,"text":"\npackage main\nimport &quot;debug&quot;\nfunction main() {\n    var a = &quot;initial&quot;\n    debug.Printf(&quot;%s&quot;, a)\n    var b, c int64 = 1, 2\n    debug.Printf(&quot;%d %d&quot;, b, c)\n    var d = true\n    debug.Printf(&quot;%d&quot;, d)\n    var e int32\n    debug.Printf(&quot;%d&quot;, e)\n    f := &quot;short&quot;\n    debug.Printf(&quot;%s&quot;, f)\n\treturn 0\n}\n$ cell -r riscv value.cell\n$ ckb-debugger --bin value\ninitial\n1 2\n1\n0\nshort\n","title":"Variables","titles":["A Tour of CellScript","CellScript by example"]},"26":{"href":"/docs/tour#constants","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>package main</span></span>\n<span class=\"line\"><span>import (</span></span>\n<span class=\"line\"><span>    &quot;debug&quot;</span></span>\n<span class=\"line\"><span>)</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>const (</span></span>\n<span class=\"line\"><span>\ts string = &quot;constant&quot;</span></span>\n<span class=\"line\"><span>\ts2 = &quot;string: s2&quot;</span></span>\n<span class=\"line\"><span>)</span></span>\n<span class=\"line\"><span>function main() {</span></span>\n<span class=\"line\"><span>    debug.Printf(&quot;%s&quot;, s)</span></span>\n<span class=\"line\"><span>    debug.Printf(&quot;%s&quot;, s2)</span></span>\n<span class=\"line\"><span>    const n = 500000000</span></span>\n<span class=\"line\"><span>    debug.Printf(&quot;%d&quot;, n)</span></span>\n<span class=\"line\"><span>\treturn 0</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>$ cell -r riscv const.cell</span></span>\n<span class=\"line\"><span>$ ckb-debugger --bin const</span></span>\n<span class=\"line\"><span>constant</span></span>\n<span class=\"line\"><span>another constant</span></span>\n<span class=\"line\"><span>500000000</span></span></code></pre>\n","isPage":false,"text":"\npackage main\nimport (\n    &quot;debug&quot;\n)\n\nconst (\n\ts string = &quot;constant&quot;\n\ts2 = &quot;string: s2&quot;\n)\nfunction main() {\n    debug.Printf(&quot;%s&quot;, s)\n    debug.Printf(&quot;%s&quot;, s2)\n    const n = 500000000\n    debug.Printf(&quot;%d&quot;, n)\n\treturn 0\n}\n$ cell -r riscv const.cell\n$ ckb-debugger --bin const\nconstant\nanother constant\n500000000\n","title":"Constants","titles":["A Tour of CellScript","CellScript by example"]},"27":{"href":"/docs/tour#for-loop","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>package main</span></span>\n<span class=\"line\"><span>import &quot;debug&quot;</span></span>\n<span class=\"line\"><span>function main() {</span></span>\n<span class=\"line\"><span>    for j := 7; j &lt;= 9; j++ {</span></span>\n<span class=\"line\"><span>        debug.Printf(&quot;%d&quot;, j)</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>    for n := 0; n &lt;= 5; n++ {</span></span>\n<span class=\"line\"><span>        if (n&amp;1) == 0 {</span></span>\n<span class=\"line\"><span>            continue</span></span>\n<span class=\"line\"><span>        }</span></span>\n<span class=\"line\"><span>        debug.Printf(&quot;%d&quot;, n)</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>    return 0</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>$ cell -r riscv for.cell</span></span>\n<span class=\"line\"><span>$ ckb-debugger --bin for</span></span>\n<span class=\"line\"><span>7</span></span>\n<span class=\"line\"><span>8</span></span>\n<span class=\"line\"><span>9</span></span>\n<span class=\"line\"><span>1</span></span>\n<span class=\"line\"><span>3</span></span>\n<span class=\"line\"><span>5</span></span></code></pre>\n","isPage":false,"text":"\npackage main\nimport &quot;debug&quot;\nfunction main() {\n    for j := 7; j &lt;= 9; j++ {\n        debug.Printf(&quot;%d&quot;, j)\n    }\n\n    for n := 0; n &lt;= 5; n++ {\n        if (n&amp;1) == 0 {\n            continue\n        }\n        debug.Printf(&quot;%d&quot;, n)\n    }\n    return 0\n}\n$ cell -r riscv for.cell\n$ ckb-debugger --bin for\n7\n8\n9\n1\n3\n5\n","title":"For Loop","titles":["A Tour of CellScript","CellScript by example"]},"28":{"href":"/docs/tour#ifelse-branch","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>package main</span></span>\n<span class=\"line\"><span>import &quot;debug&quot;</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>function main() {</span></span>\n<span class=\"line\"><span>    if (7&amp;1) == 0 {</span></span>\n<span class=\"line\"><span>        debug.Printf(&quot;7 is even&quot;)</span></span>\n<span class=\"line\"><span>    } else {</span></span>\n<span class=\"line\"><span>        debug.Printf(&quot;7 is odd&quot;)</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>    num := 9</span></span>\n<span class=\"line\"><span>    if num &lt; 0 {</span></span>\n<span class=\"line\"><span>        debug.Printf(&quot;9 is negative&quot;)</span></span>\n<span class=\"line\"><span>    } else if num &lt; 10 {</span></span>\n<span class=\"line\"><span>        debug.Printf(&quot;9 has 1 digit&quot;)</span></span>\n<span class=\"line\"><span>    } else {</span></span>\n<span class=\"line\"><span>        debug.Printf(&quot;9 has multiple digits&quot;)</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>    return 0</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>$ cell -r riscv for.cell</span></span>\n<span class=\"line\"><span>$ ckb-debugger --bin for</span></span>\n<span class=\"line\"><span>7 is odd</span></span>\n<span class=\"line\"><span>9 has 1 digit</span></span></code></pre>\n","isPage":false,"text":"\npackage main\nimport &quot;debug&quot;\n\nfunction main() {\n    if (7&amp;1) == 0 {\n        debug.Printf(&quot;7 is even&quot;)\n    } else {\n        debug.Printf(&quot;7 is odd&quot;)\n    }\n\n    num := 9\n    if num &lt; 0 {\n        debug.Printf(&quot;9 is negative&quot;)\n    } else if num &lt; 10 {\n        debug.Printf(&quot;9 has 1 digit&quot;)\n    } else {\n        debug.Printf(&quot;9 has multiple digits&quot;)\n    }\n    return 0\n}\n$ cell -r riscv for.cell\n$ ckb-debugger --bin for\n7 is odd\n9 has 1 digit\n","title":"If/Else Branch","titles":["A Tour of CellScript","CellScript by example"]},"29":{"href":"/docs/tour#array","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>package main</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>import &quot;fmt&quot;</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>func main() {</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>    var a [5]int</span></span>\n<span class=\"line\"><span>    fmt.Println(&quot;emp:&quot;, a)</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>    a[4] = 100</span></span>\n<span class=\"line\"><span>    fmt.Println(&quot;set:&quot;, a)</span></span>\n<span class=\"line\"><span>    fmt.Println(&quot;get:&quot;, a[4])</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>    fmt.Println(&quot;len:&quot;, len(a))</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>    b := [5]int{1, 2, 3, 4, 5}</span></span>\n<span class=\"line\"><span>    fmt.Println(&quot;dcl:&quot;, b)</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>    var twoD [2][3]int</span></span>\n<span class=\"line\"><span>    for i := 0; i &lt; 2; i++ {</span></span>\n<span class=\"line\"><span>        for j := 0; j &lt; 3; j++ {</span></span>\n<span class=\"line\"><span>            twoD[i][j] = i + j</span></span>\n<span class=\"line\"><span>        }</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>    fmt.Println(&quot;2d: &quot;, twoD)</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n","isPage":false,"text":"\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n\n    var a [5]int\n    fmt.Println(&quot;emp:&quot;, a)\n\n    a[4] = 100\n    fmt.Println(&quot;set:&quot;, a)\n    fmt.Println(&quot;get:&quot;, a[4])\n\n    fmt.Println(&quot;len:&quot;, len(a))\n\n    b := [5]int{1, 2, 3, 4, 5}\n    fmt.Println(&quot;dcl:&quot;, b)\n\n    var twoD [2][3]int\n    for i := 0; i &lt; 2; i++ {\n        for j := 0; j &lt; 3; j++ {\n            twoD[i][j] = i + j\n        }\n    }\n    fmt.Println(&quot;2d: &quot;, twoD)\n}\n","title":"Array","titles":["A Tour of CellScript","CellScript by example"]},"30":{"href":"/docs/tour#interface","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span></span></span>\n<span class=\"line\"><span>import (</span></span>\n<span class=\"line\"><span>\t&quot;errors&quot;</span></span>\n<span class=\"line\"><span>\t&quot;debug&quot;</span></span>\n<span class=\"line\"><span>)</span></span>\n<span class=\"line\"><span>type Demo table {</span></span>\n<span class=\"line\"><span>\tstart uint32</span></span>\n<span class=\"line\"><span>\tend   uint32</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span>func (b *Demo) st() (n uint32, err error) {</span></span>\n<span class=\"line\"><span>\treturn b.start, errors.None()</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span>func (b *Demo) ed() uint32 {</span></span>\n<span class=\"line\"><span>\treturn b.end</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span>func (b *Demo) reset() {</span></span>\n<span class=\"line\"><span>\tb.start = uint32(0)</span></span>\n<span class=\"line\"><span>\tb.end = uint32(0)</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span>type Range interface {</span></span>\n<span class=\"line\"><span>\tst() (uint32, error)</span></span>\n<span class=\"line\"><span>\ted() uint32</span></span>\n<span class=\"line\"><span>\treset()</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span>func foo(b Range) {</span></span>\n<span class=\"line\"><span>\tn, err := b.st()</span></span>\n<span class=\"line\"><span>\tdebug.Printf(&quot;%s&quot;, err.Error())</span></span>\n<span class=\"line\"><span>\tend := b.ed()</span></span>\n<span class=\"line\"><span>\tdebug.Printf(&quot;%d&quot;, end)</span></span>\n<span class=\"line\"><span>\tb.reset()</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span>func main() {</span></span>\n<span class=\"line\"><span>\tb := Demo {</span></span>\n<span class=\"line\"><span>\t\tstart: uint32(1),</span></span>\n<span class=\"line\"><span>\t\tend: uint32(3),</span></span>\n<span class=\"line\"><span>\t}</span></span>\n<span class=\"line\"><span>\tfoo(b)</span></span>\n<span class=\"line\"><span>\tdebug.Printf(&quot;reset%d%d&quot;, b.start, b.end)</span></span>\n<span class=\"line\"><span>\treturn 0</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span></code></pre>","isPage":false,"text":"\n\nimport (\n\t&quot;errors&quot;\n\t&quot;debug&quot;\n)\ntype Demo table {\n\tstart uint32\n\tend   uint32\n}\nfunc (b *Demo) st() (n uint32, err error) {\n\treturn b.start, errors.None()\n}\nfunc (b *Demo) ed() uint32 {\n\treturn b.end\n}\nfunc (b *Demo) reset() {\n\tb.start = uint32(0)\n\tb.end = uint32(0)\n}\ntype Range interface {\n\tst() (uint32, error)\n\ted() uint32\n\treset()\n}\nfunc foo(b Range) {\n\tn, err := b.st()\n\tdebug.Printf(&quot;%s&quot;, err.Error())\n\tend := b.ed()\n\tdebug.Printf(&quot;%d&quot;, end)\n\tb.reset()\n}\nfunc main() {\n\tb := Demo {\n\t\tstart: uint32(1),\n\t\tend: uint32(3),\n\t}\n\tfoo(b)\n\tdebug.Printf(&quot;reset%d%d&quot;, b.start, b.end)\n\treturn 0\n}\n","title":"Interface","titles":["A Tour of CellScript","CellScript by example"]}},"dirtCount":0,"index":[["+",{"2":{"29":1}}],["4",{"2":{"29":3}}],["3",{"2":{"27":1,"29":3,"30":1}}],["8",{"2":{"27":1}}],["5",{"2":{"27":2,"29":3}}],["500000000",{"2":{"26":2}}],["9",{"2":{"27":2,"28":5}}],["7",{"2":{"27":2,"28":4}}],["\tfoo",{"2":{"30":1}}],["\t\tend",{"2":{"30":1}}],["\t\tstart",{"2":{"30":1}}],["\tdebug",{"2":{"30":3}}],["\tn",{"2":{"30":1}}],["\treset",{"2":{"30":1}}],["\treturn",{"2":{"24":1,"25":1,"26":1,"30":3}}],["\ted",{"2":{"30":1}}],["\tend",{"2":{"30":2}}],["\tb",{"2":{"30":4}}],["\t",{"2":{"30":3}}],["\tst",{"2":{"30":1}}],["\tstart",{"2":{"30":1}}],["\ts2",{"2":{"26":1}}],["\ts",{"2":{"26":1}}],["2d",{"2":{"29":1}}],["2",{"2":{"24":1,"25":2,"29":3}}],["22",{"0":{"8":1},"2":{"6":1}}],["0",{"2":{"24":1,"25":2,"26":1,"27":3,"28":3,"29":2,"30":3}}],["==",{"2":{"27":1,"28":1}}],["=",{"2":{"24":4,"25":4,"26":3,"27":4,"28":1,"29":5,"30":5}}],["var",{"2":{"25":4,"29":2}}],["variables",{"0":{"25":1}}],["value",{"0":{"24":1},"2":{"24":2,"25":2}}],["verbose",{"2":{"16":2}}],["v",{"2":{"16":1}}],["view",{"2":{"16":1}}],["dcl",{"2":{"29":1}}],["digits",{"2":{"28":1}}],["digit",{"2":{"28":2}}],["during",{"2":{"16":2}}],["d",{"2":{"16":1,"24":2,"25":6,"26":1,"27":2,"30":3}}],["demo",{"2":{"30":5}}],["debug",{"2":{"15":1,"16":2,"23":2,"24":4,"25":6,"26":4,"27":3,"28":6,"30":1}}],["debuggerrun",{"2":{"15":1}}],["debugger",{"2":{"15":5,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1}}],["default",{"2":{"15":1,"16":1}}],["details",{"2":{"3":1}}],["developer",{"2":{"3":1}}],["designed",{"2":{"3":1}}],["know",{"2":{"15":1}}],["known",{"2":{"13":1}}],["j++",{"2":{"27":1,"29":1}}],["j",{"2":{"27":3,"29":4}}],["just",{"2":{"13":1,"17":1}}],["jounery",{"2":{"3":1}}],["end",{"2":{"30":4}}],["enable",{"2":{"16":1}}],["ed",{"2":{"30":2}}],["error",{"2":{"30":3}}],["errors",{"2":{"30":2}}],["err",{"2":{"30":3}}],["emp",{"2":{"29":1}}],["emit",{"2":{"16":2}}],["even",{"2":{"28":1}}],["everything",{"2":{"17":1}}],["else",{"0":{"28":1},"2":{"28":3}}],["elfcell",{"2":{"14":1}}],["elf",{"0":{"14":1,"15":1},"2":{"13":1,"14":1,"15":1}}],["elfyou",{"2":{"10":1}}],["e",{"2":{"25":2}}],["executable",{"2":{"14":1}}],["example",{"0":{"22":1},"1":{"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1},"2":{"12":1}}],["export",{"2":{"6":2}}],["gt",{"2":{"16":1}}],["github",{"2":{"15":1}}],["git",{"2":{"15":1}}],["get",{"2":{"13":1,"14":1,"29":1}}],["gcc",{"2":{"10":1}}],["golang",{"0":{"8":1},"2":{"8":2}}],["go",{"2":{"6":1,"8":1}}],["$",{"2":{"9":1,"23":3,"24":2,"25":2,"26":2,"27":2,"28":2}}],["$path",{"2":{"6":2}}],["quot",{"2":{"6":4,"9":2,"16":2,"23":4,"24":8,"25":16,"26":12,"27":6,"28":12,"29":14,"30":10}}],["len",{"2":{"29":2}}],["ls",{"2":{"23":1}}],["loop",{"0":{"27":1}}],["lock",{"2":{"19":1}}],["load",{"2":{"19":1}}],["loadscript",{"0":{"19":1},"2":{"19":1}}],["longsleep",{"2":{"8":1}}],["lt",{"2":{"16":1,"27":2,"28":2,"29":2}}],["llvm",{"0":{"9":1},"2":{"6":2,"9":3}}],["language",{"2":{"3":1}}],["100",{"2":{"29":1}}],["10",{"2":{"28":1}}],["1+1",{"2":{"24":3}}],["18",{"2":{"6":2}}],["1",{"0":{"8":1},"2":{"6":1,"24":1,"25":3,"27":2,"28":3,"29":1,"30":1}}],["has",{"2":{"28":3}}],["hash",{"2":{"19":1}}],["h",{"2":{"16":1}}],["https",{"2":{"9":1,"15":1}}],["homebrewbrew",{"2":{"10":1}}],["homebrew",{"2":{"6":2}}],["how",{"0":{"6":1,"7":1},"1":{"8":1,"9":1,"10":1,"11":1,"13":1,"14":1,"15":1}}],["help",{"2":{"16":3}}],["hello",{"0":{"0":1,"23":1},"2":{"12":1,"13":3,"14":2,"15":2,"23":6}}],["here",{"2":{"3":2,"12":1}}],["your",{"2":{"12":1}}],["you",{"2":{"5":1,"10":1,"12":1,"15":1,"19":1}}],["multiple",{"2":{"28":1}}],["message",{"2":{"16":1}}],["main",{"2":{"23":2,"24":2,"25":2,"26":2,"27":2,"28":2,"29":2,"30":1}}],["make",{"2":{"6":1,"11":1}}],["macos",{"0":{"6":1}}],["more",{"2":{"3":1}}],["minutes",{"2":{"3":1}}],["i++",{"2":{"29":1}}],["i",{"2":{"29":4}}],["if",{"0":{"28":1},"2":{"27":1,"28":3}}],["import",{"2":{"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1}}],["it",{"2":{"13":1,"19":1}}],["interface",{"0":{"30":1},"2":{"30":1}}],["int",{"2":{"29":3}}],["int32",{"2":{"25":1}}],["int64",{"2":{"25":1}}],["initial",{"2":{"25":2}}],["information",{"2":{"16":1}}],["instructions",{"2":{"16":1}}],["installation",{"2":{"21":1}}],["installations",{"0":{"4":1,"21":1},"1":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1}}],["install",{"0":{"6":1,"8":1,"9":1,"10":1,"11":1},"2":{"6":4,"8":1,"9":1,"10":2,"11":1,"15":2}}],["in",{"0":{"11":1},"2":{"3":1,"12":1,"13":1,"14":1}}],["is",{"2":{"0":1,"2":1,"3":1,"15":1,"17":1,"28":4}}],["odd",{"2":{"28":2}}],["output",{"2":{"13":1,"16":2}}],["or",{"2":{"19":1}}],["orsudo",{"2":{"9":1}}],["org",{"2":{"9":1}}],["o",{"2":{"9":1,"16":2}}],["optimization",{"2":{"16":1}}],["optimize",{"2":{"16":1}}],["options",{"2":{"16":1}}],["opt",{"2":{"6":3}}],["of",{"0":{"16":1,"20":1},"1":{"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1},"2":{"3":1,"17":3}}],["on",{"2":{"3":1,"19":1}}],["uint32",{"2":{"30":10}}],["usage",{"0":{"16":1},"2":{"16":2}}],["use",{"2":{"10":1,"16":1}}],["using",{"2":{"3":1}}],["unknown",{"2":{"10":1}}],["update",{"2":{"8":1}}],["ubuntu",{"0":{"7":1},"1":{"8":1,"9":1,"10":1,"11":1,"13":1,"14":1,"15":1}}],["utxo",{"2":{"3":1}}],["branch",{"0":{"28":1}}],["brew",{"2":{"6":4,"10":1}}],["b",{"2":{"25":2,"29":2,"30":11}}],["bash",{"2":{"9":1}}],["based",{"2":{"3":1,"19":1}}],["backports",{"2":{"8":1}}],["binary",{"2":{"16":1}}],["bin",{"2":{"6":2,"15":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1}}],["build",{"0":{"5":1,"6":1,"7":1,"11":1},"1":{"6":1,"7":1,"8":2,"9":2,"10":2,"11":2,"13":1,"14":1,"15":1},"2":{"5":1,"6":1,"10":1,"11":1}}],["below",{"2":{"15":1}}],["be",{"2":{"3":2,"19":1}}],["byte",{"2":{"17":1}}],["bytes",{"2":{"17":1}}],["by",{"0":{"22":1},"1":{"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1},"2":{"3":1}}],["blockchain",{"0":{"17":1},"2":{"19":1}}],["blog",{"0":{"1":1}}],["blank",{"0":{"2":1},"2":{"2":1}}],["check",{"2":{"19":1}}],["chain",{"2":{"3":1}}],["current",{"2":{"19":1}}],["clang",{"2":{"16":1}}],["cargo",{"2":{"15":2}}],["can",{"2":{"3":3,"5":1,"10":2,"12":1,"19":1}}],["c",{"2":{"9":1,"25":2}}],["continue",{"2":{"27":1}}],["contracts",{"2":{"3":2}}],["constant",{"2":{"26":3}}],["constants",{"0":{"26":1}}],["const",{"2":{"26":4}}],["could",{"2":{"19":1}}],["collection",{"2":{"17":1}}],["compiling",{"2":{"16":1}}],["compile",{"0":{"12":1,"13":1,"14":1},"1":{"13":1,"14":1,"15":1},"2":{"14":1,"16":2}}],["compiler",{"0":{"11":1,"16":1},"2":{"5":1}}],["com",{"2":{"15":1}}],["command",{"2":{"15":2,"16":1}}],["code",{"2":{"5":1}}],["ckb",{"0":{"18":1},"1":{"19":1},"2":{"3":3,"15":6,"17":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1}}],["cellyou",{"2":{"13":1,"14":1}}],["cellscript",{"0":{"3":1,"11":1,"12":1,"20":1,"22":1},"1":{"13":1,"14":1,"15":1,"21":1,"22":1,"23":2,"24":2,"25":2,"26":2,"27":2,"28":2,"29":2,"30":2},"2":{"24":2}}],["cell",{"0":{"13":1,"16":1},"2":{"0":1,"3":3,"5":1,"12":2,"13":1,"16":2,"17":1,"23":3,"24":2,"25":2,"26":2,"27":2,"28":2}}],["fmt",{"2":{"29":7}}],["f",{"2":{"25":2}}],["function",{"2":{"23":1,"24":1,"25":1,"26":1,"27":1,"28":1}}],["func",{"2":{"19":1,"29":1,"30":5}}],["from",{"0":{"5":1},"1":{"6":1,"7":1,"8":1,"9":1,"10":1,"11":1},"2":{"5":1,"10":1}}],["field",{"2":{"19":1}}],["filename",{"2":{"16":2}}],["file",{"0":{"13":1,"15":1},"2":{"12":1,"13":2,"15":1}}],["find",{"2":{"3":1}}],["first",{"2":{"0":1}}],["foo",{"2":{"30":1}}],["following",{"2":{"15":1}}],["folder",{"0":{"11":1},"2":{"13":1,"14":1}}],["found",{"2":{"3":1}}],["for",{"0":{"27":1},"2":{"3":1,"12":1,"15":1,"27":4,"28":2,"29":2}}],["twod",{"2":{"29":3}}],["true",{"2":{"24":3,"25":1}}],["type",{"2":{"19":2,"30":2}}],["typed",{"2":{"3":1}}],["time",{"2":{"16":1}}],["t",{"2":{"14":1,"16":1}}],["table",{"2":{"30":1}}],["target",{"0":{"14":1},"2":{"16":2}}],["tap",{"2":{"6":1,"10":1}}],["tour",{"0":{"20":1},"1":{"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1}}],["toolsor",{"2":{"10":1}}],["tools",{"0":{"10":1},"2":{"6":1}}],["to",{"0":{"6":1,"7":1,"15":1},"1":{"8":1,"9":1,"10":1,"11":1,"13":1,"14":1,"15":1},"2":{"14":1,"15":3,"16":2}}],["this",{"2":{"2":1,"16":1}}],["these",{"2":{"17":1}}],["the",{"0":{"11":1},"2":{"0":1,"3":2,"5":1,"13":2,"14":2,"15":4,"16":1,"19":1}}],["set",{"2":{"29":1}}],["s2",{"2":{"26":2}}],["s",{"2":{"25":2,"26":3,"30":1}}],["slice",{"2":{"17":1}}],["since",{"2":{"17":1}}],["st",{"2":{"30":2}}],["structures",{"2":{"17":2}}],["string",{"2":{"16":2,"26":2}}],["standalone",{"2":{"15":1}}],["start",{"2":{"3":1,"30":3}}],["statically",{"2":{"3":1}}],["suppose",{"2":{"15":1}}],["sudo",{"2":{"8":3,"9":1,"10":1}}],["say",{"2":{"12":1}}],["short",{"2":{"25":2}}],["show",{"2":{"16":1}}],["sh",{"2":{"6":1,"9":1,"11":1}}],["src",{"2":{"6":1,"10":1}}],["software",{"2":{"6":1,"10":1}}],["source",{"0":{"5":1},"1":{"6":1,"7":1,"8":1,"9":1,"10":1,"11":1},"2":{"5":1,"6":1,"10":1,"11":1}}],["specification",{"2":{"3":1}}],["smart",{"2":{"3":2}}],["script",{"0":{"16":1},"2":{"0":1,"3":3,"5":1,"19":4}}],["none",{"2":{"30":1}}],["now",{"2":{"0":2,"5":1}}],["num",{"2":{"28":3}}],["n++",{"2":{"27":1}}],["n",{"2":{"26":2,"27":4,"30":1}}],["native",{"2":{"16":1}}],["named",{"2":{"13":1,"14":1}}],["negative",{"2":{"28":1}}],["nervosnetwork",{"2":{"15":1}}],["need",{"2":{"15":1}}],["new",{"2":{"3":1}}],["array",{"0":{"29":1}}],["already",{"2":{"15":1}}],["also",{"2":{"13":1}}],["as",{"2":{"13":1}}],["amp",{"0":{"11":1},"2":{"15":1,"27":1,"28":1}}],["apt",{"2":{"8":3,"9":2,"10":1}}],["add",{"2":{"8":1}}],["about",{"2":{"3":1}}],["another",{"2":{"26":1}}],["and",{"0":{"6":1}}],["any",{"2":{"3":1}}],["announce",{"2":{"0":1}}],["a",{"0":{"12":1,"20":1},"1":{"13":1,"14":1,"15":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1},"2":{"2":1,"3":1,"17":3,"19":2,"25":2,"29":6}}],["printf",{"2":{"24":3,"25":5,"26":3,"27":2,"28":5,"30":3}}],["println",{"2":{"23":1,"29":6}}],["programs",{"2":{"15":1}}],["program",{"0":{"12":1},"1":{"13":1,"14":1,"15":1},"2":{"12":1,"15":1}}],["programming",{"2":{"3":1}}],["ppa",{"2":{"8":1}}],["package",{"0":{"17":1,"18":1},"1":{"19":1},"2":{"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1}}],["path=",{"2":{"6":2}}],["page",{"0":{"2":1},"2":{"2":1}}],["published",{"2":{"0":1}}],["range",{"2":{"30":2}}],["reset",{"2":{"30":3}}],["return",{"2":{"27":1,"28":1}}],["repository",{"2":{"8":1}}],["r",{"2":{"23":1,"24":1,"25":1,"26":1,"27":1,"28":1}}],["run",{"0":{"15":1},"2":{"13":1,"15":3}}],["running",{"2":{"3":1,"19":1}}],["runnable",{"2":{"0":1}}],["root",{"0":{"11":1},"2":{"13":1,"14":1}}],["riscv64",{"2":{"10":1}}],["riscv",{"0":{"10":1},"2":{"6":3,"10":3,"14":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1}}],["right",{"2":{"0":1,"5":1}}],["which",{"2":{"19":1}}],["what",{"2":{"15":1}}],["wrapper",{"2":{"17":1}}],["write",{"2":{"12":1}}],["will",{"2":{"13":1,"14":1}}],["with",{"2":{"12":1}}],["wget",{"2":{"9":1}}],["we",{"2":{"0":1,"12":1,"15":1}}],["world",{"0":{"0":1,"23":1},"2":{"23":6}}]],"serializationVersion":2}
