{"version":3,"file":"index.js","names":["bytify","hexify","bytes","BECH32_LIMIT","minimalScriptCapacity","script","validate","result","minimalScriptCapacityCompatible","BigInt","toString","validators","ValidateScript","codeHash","length","args","BI","from","mul","minimalCellCapacity","fullCell","minimalCellCapacityCompatible","blockchain","CellOutput","pack","cellOutput","lock","type","data","locateCellDep","config","undefined","getConfig","scriptTemplate","Object","values","SCRIPTS","find","s","CODE_HASH","HASH_TYPE","hashType","depType","DEP_TYPE","outPoint","txHash","TX_HASH","index","INDEX","HAS_WARNED_FOR_DEPRECATED_ADDRESS","generateAddress","console","warn","SHORT_ID","push","hexToByteArray","Error","words","bech32","toWords","encode","PREFIX","scriptToAddress","generatePredefinedAddress","scriptType","template","availableKeys","keys","generateSecp256k1Blake160Address","generateSecp256k1Blake160MultisigAddress","parseAddress","address","parseFullFormatAddress","parseDeprecatedCkb2019Address","addressToScript","encodeToAddress","bech32m","encodeToConfigAddress","options","String","TransactionSkeleton","Record","cellProvider","cellDeps","List","headerDeps","inputs","outputs","witnesses","fixedEntries","signingEntries","inputSinces","ImmutableMap","createTransactionFromSkeleton","txSkeleton","tx","version","get","toArray","map","input","i","since","previousOutput","output","outputsData","ValidateTransaction","sealTransaction","sealingContents","size","forEach","e","witness","witnessArgs","WitnessArgs","unpack","newWitnessArgs","inputType","outputType","transactionSkeletonToObject","txSkelton","toJS","objectToTransactionSkeleton","obj","key","value","entries","set"],"sources":["../src/index.ts"],"sourcesContent":["import { bytes } from \"@ckb-lumos/codec\";\nimport {\n  Address,\n  Cell,\n  CellDep,\n  CellProvider,\n  Hash,\n  HexString,\n  PackedSince,\n  Script,\n  Transaction,\n  WitnessArgs,\n  blockchain,\n} from \"@ckb-lumos/base\";\nimport { bech32, bech32m } from \"bech32\";\nimport { List, Map as ImmutableMap, Record } from \"immutable\";\nimport { Config, getConfig, predefined } from \"@ckb-lumos/config-manager\";\nimport { BI } from \"@ckb-lumos/bi\";\nimport {\n  parseDeprecatedCkb2019Address,\n  parseFullFormatAddress,\n} from \"./address-to-script\";\nimport { hexToByteArray } from \"./utils\";\nimport { validators } from \"@ckb-lumos/toolkit\";\n\nconst { bytify, hexify } = bytes;\nexport interface Options {\n  config?: Config;\n}\n\nconst BECH32_LIMIT = 1023;\n\nexport function minimalScriptCapacity(\n  script: Script,\n  { validate = true }: { validate?: boolean } = {}\n): bigint {\n  const result = minimalScriptCapacityCompatible(script, { validate });\n  return BigInt(result.toString());\n}\n\nexport function minimalScriptCapacityCompatible(\n  script: Script,\n  { validate = true }: { validate?: boolean } = {}\n): BI {\n  if (validate) {\n    validators.ValidateScript(script);\n  }\n\n  let bytes = 0;\n  bytes += bytify(script.codeHash).length;\n  bytes += bytify(script.args).length;\n  // hash_type field\n  bytes += 1;\n\n  return BI.from(bytes).mul(100000000);\n}\n\nexport function minimalCellCapacity(\n  fullCell: Cell,\n  { validate = true }: { validate?: boolean } = {}\n): bigint {\n  const result = minimalCellCapacityCompatible(fullCell, { validate });\n  return BigInt(result.toString());\n}\n\nexport function minimalCellCapacityCompatible(\n  fullCell: Cell,\n  { validate = true }: { validate?: boolean } = {}\n): BI {\n  if (validate) {\n    blockchain.CellOutput.pack(fullCell.cellOutput);\n  }\n  // Capacity field itself\n  let bytes = 8;\n  bytes += bytify(fullCell.cellOutput.lock.codeHash).length;\n  bytes += bytify(fullCell.cellOutput.lock.args).length;\n  // hashType field\n  bytes += 1;\n  if (fullCell.cellOutput.type) {\n    bytes += bytify(fullCell.cellOutput.type.codeHash).length;\n    bytes += bytify(fullCell.cellOutput.type.args).length;\n    bytes += 1;\n  }\n  if (fullCell.data) {\n    bytes += bytify(fullCell.data).length;\n  }\n  return BI.from(bytes).mul(100000000);\n}\n\nexport function locateCellDep(\n  script: Script,\n  { config = undefined }: Options = {}\n): CellDep | null {\n  config = config || getConfig();\n  const scriptTemplate = Object.values(config.SCRIPTS).find(\n    (s) =>\n      s && s.CODE_HASH === script.codeHash && s.HASH_TYPE === script.hashType\n  );\n\n  if (scriptTemplate) {\n    return {\n      depType: scriptTemplate.DEP_TYPE,\n      outPoint: {\n        txHash: scriptTemplate.TX_HASH,\n        index: scriptTemplate.INDEX,\n      },\n    };\n  }\n  return null;\n}\n\nlet HAS_WARNED_FOR_DEPRECATED_ADDRESS = false;\n\n/**\n * @deprecated please migrate to {@link encodeToAddress}, the short format address will be removed in the future\n * @param script\n * @param param1\n * @returns\n */\nexport function generateAddress(\n  script: Script,\n  { config = undefined }: Options = {}\n): Address {\n  config = config || getConfig();\n  if (!HAS_WARNED_FOR_DEPRECATED_ADDRESS) {\n    console.warn(\n      \"The address format generated by generateAddress or scriptToAddress will be deprecated, please migrate to encodeToAddress to generate the new ckb2021 full format address as soon as possible\"\n    );\n    HAS_WARNED_FOR_DEPRECATED_ADDRESS = true;\n  }\n  validators.ValidateScript(script);\n\n  const scriptTemplate = Object.values(config.SCRIPTS).find(\n    (s) =>\n      s && s.CODE_HASH === script.codeHash && s.HASH_TYPE === script.hashType\n  );\n  const data = [];\n  if (scriptTemplate && scriptTemplate.SHORT_ID !== undefined) {\n    data.push(1, scriptTemplate.SHORT_ID);\n    data.push(...hexToByteArray(script.args));\n  } else {\n    if (script.hashType === \"type\") data.push(0x04);\n    else if (script.hashType === \"data\") data.push(0x02);\n    else throw new Error(`Invalid hashType ${script.hashType}`);\n\n    data.push(...hexToByteArray(script.codeHash));\n    data.push(...hexToByteArray(script.args));\n  }\n  const words = bech32.toWords(data);\n  return bech32.encode(config.PREFIX, words, BECH32_LIMIT);\n}\n\n/**\n * @deprecated please migrate to {@link encodeToAddress}, the short format address will be removed in the future */\nexport const scriptToAddress = generateAddress;\n\n/**\n * @deprecated please migrate to {@link encodeToConfigAddress}\n * @param args\n * @param scriptType\n * @param param2\n * @returns\n */\nfunction generatePredefinedAddress(\n  args: HexString,\n  scriptType: string,\n  { config = undefined }: Options = {}\n): Address {\n  config = config || getConfig();\n  const template = config.SCRIPTS[scriptType];\n  if (!template) {\n    const availableKeys = Object.keys(config.SCRIPTS);\n    throw new Error(\n      `Invalid script type: ${scriptType}, only support: ${availableKeys}`\n    );\n  }\n  const script: Script = {\n    codeHash: template.CODE_HASH,\n    hashType: template.HASH_TYPE,\n    args,\n  };\n\n  return generateAddress(script, { config });\n}\n\n/**\n * @deprecated please migrate to {@link encodeToConfigAddress}\n * @param args\n * @param param1\n * @returns\n */\nexport function generateSecp256k1Blake160Address(\n  args: HexString,\n  { config = undefined }: Options = {}\n): Address {\n  return generatePredefinedAddress(args, \"SECP256K1_BLAKE160\", { config });\n}\n\n/**\n * @deprecated please migrate to {@link encodeToConfigAddress}\n * @param args\n * @param config\n */\nexport function generateSecp256k1Blake160MultisigAddress(\n  args: HexString,\n  { config = undefined }: Options = {}\n): Address {\n  return generatePredefinedAddress(args, \"SECP256K1_BLAKE160_MULTISIG\", {\n    config,\n  });\n}\n\nexport function parseAddress(\n  address: Address,\n  { config = undefined }: Options = {}\n): Script {\n  config = config || getConfig();\n\n  try {\n    return parseFullFormatAddress(address, { config });\n  } catch {\n    return parseDeprecatedCkb2019Address(address, { config });\n  }\n}\n\nexport const addressToScript = parseAddress;\n\n/**\n * parse a lock script to an address\n * @param script\n * @param config\n */\nexport function encodeToAddress(\n  script: Script,\n  { config = undefined }: Options = {}\n): Address {\n  validators.ValidateScript(script);\n  config = config || getConfig();\n\n  const data: number[] = [];\n\n  const hashType = (() => {\n    if (script.hashType === \"data\") return 0;\n    if (script.hashType === \"type\") return 1;\n    if (script.hashType === \"data1\") return 2;\n\n    /* c8 ignore next */\n    throw new Error(`Invalid hashType ${script.hashType}`);\n  })();\n\n  data.push(0x00);\n  data.push(...hexToByteArray(script.codeHash));\n  data.push(hashType);\n  data.push(...hexToByteArray(script.args));\n\n  return bech32m.encode(config.PREFIX, bech32m.toWords(data), BECH32_LIMIT);\n}\n\ntype PredefinedScriptName = keyof typeof predefined.LINA.SCRIPTS;\n\nexport function encodeToConfigAddress(\n  args: HexString,\n  scriptType: PredefinedScriptName\n): string;\nexport function encodeToConfigAddress<C extends Config>(\n  args: HexString,\n  scriptType: keyof C[\"SCRIPTS\"],\n  options: { config?: C }\n): string;\n/**\n * encode a script to an address with args and a key of config\n * @example\n * ```ts\n * // parse a predefined lock to an address\n * encodeToConfigAddress('0x12345678123456781234567812345678', 'SECP256K1_BLAKE160');\n * // parse a custom lock to an address\n * encodeToConfigAddress('0x12345678123456781234567812345678', 'MY_CUSTOM_LOCK', {\n *   SCRIPTS: {\n *     MY_CUSTOM_LOCK: {...}\n *   }\n * })\n * ```\n * @param args script args\n * @param scriptType a key of `config.SCRIPTS`\n * @param options\n * @returns\n */\nexport function encodeToConfigAddress<C extends Config>(\n  args: HexString,\n  scriptType: keyof C[\"SCRIPTS\"],\n  options?: { config?: C }\n): string {\n  const config = (options?.config || getConfig()) as C;\n  const template = config.SCRIPTS[scriptType as string];\n\n  if (!template) {\n    const availableKeys = Object.keys(config.SCRIPTS);\n    throw new Error(\n      // prettier-ignore\n      `Invalid script type: ${String(scriptType)}, only support: ${availableKeys}`\n    );\n  }\n\n  const script: Script = {\n    codeHash: template.CODE_HASH,\n    hashType: template.HASH_TYPE,\n    args,\n  };\n\n  return encodeToAddress(script, { config });\n}\n\nexport interface TransactionSkeletonInterface {\n  cellProvider: CellProvider | null;\n  cellDeps: List<CellDep>;\n  headerDeps: List<Hash>;\n  inputs: List<Cell>;\n  outputs: List<Cell>;\n  witnesses: List<HexString>;\n  fixedEntries: List<{ field: string; index: number }>;\n  signingEntries: List<{ type: string; index: number; message: string }>;\n  inputSinces: ImmutableMap<number, PackedSince>;\n}\n\nexport type TransactionSkeletonType = Record<TransactionSkeletonInterface> &\n  Readonly<TransactionSkeletonInterface>;\n\nexport const TransactionSkeleton = Record<TransactionSkeletonInterface>({\n  cellProvider: null,\n  cellDeps: List(),\n  headerDeps: List(),\n  inputs: List(),\n  outputs: List(),\n  witnesses: List(),\n  fixedEntries: List(),\n  signingEntries: List(),\n  inputSinces: ImmutableMap(),\n});\n\nexport function createTransactionFromSkeleton(\n  txSkeleton: TransactionSkeletonType,\n  { validate = true }: { validate?: boolean } = {}\n): Transaction {\n  const tx: Transaction = {\n    version: \"0x0\",\n    cellDeps: txSkeleton.get(\"cellDeps\").toArray(),\n    headerDeps: txSkeleton.get(\"headerDeps\").toArray(),\n    inputs: txSkeleton\n      .get(\"inputs\")\n      .map((input, i) => {\n        if (!input.outPoint) {\n          throw new Error(\n            `cannot find OutPoint in Inputs[${i}] when createTransactionFromSkeleton`\n          );\n        }\n        return {\n          since: txSkeleton.get(\"inputSinces\").get(i, \"0x0\"),\n          previousOutput: input.outPoint,\n        };\n      })\n      .toArray(),\n    outputs: txSkeleton\n      .get(\"outputs\")\n      .map((output) => output.cellOutput)\n      .toArray(),\n    outputsData: txSkeleton\n      .get(\"outputs\")\n      .map((output) => output.data || \"0x0\")\n      .toArray(),\n    witnesses: txSkeleton.get(\"witnesses\").toArray(),\n  };\n  if (validate) {\n    validators.ValidateTransaction(tx);\n  }\n  return tx;\n}\n\nexport function sealTransaction(\n  txSkeleton: TransactionSkeletonType,\n  sealingContents: HexString[]\n): Transaction {\n  const tx = createTransactionFromSkeleton(txSkeleton);\n  if (sealingContents.length !== txSkeleton.get(\"signingEntries\").size) {\n    throw new Error(\n      `Requiring ${\n        txSkeleton.get(\"signingEntries\").size\n      } sealing contents but provided ${sealingContents.length}!`\n    );\n  }\n  txSkeleton.get(\"signingEntries\").forEach((e, i) => {\n    switch (e.type) {\n      case \"witness_args_lock\": {\n        const witness = tx.witnesses[e.index];\n        const witnessArgs = blockchain.WitnessArgs.unpack(bytify(witness));\n        const newWitnessArgs: WitnessArgs = {\n          lock: sealingContents[i],\n        };\n        const inputType = witnessArgs.inputType;\n        if (inputType) {\n          newWitnessArgs.inputType = inputType;\n        }\n        const outputType = witnessArgs.outputType;\n        if (outputType) {\n          newWitnessArgs.outputType = outputType;\n        }\n\n        tx.witnesses[e.index] = hexify(\n          blockchain.WitnessArgs.pack(newWitnessArgs)\n        );\n        break;\n      }\n      default:\n        throw new Error(`Invalid signing entry type: ${e.type}`);\n    }\n  });\n  return tx;\n}\n\nexport interface TransactionSkeletonObject {\n  cellProvider: CellProvider | null;\n  cellDeps: CellDep[];\n  headerDeps: Hash[];\n  inputs: Cell[];\n  outputs: Cell[];\n  witnesses: HexString[];\n  fixedEntries: Array<{ field: string; index: number }>;\n  signingEntries: Array<{ type: string; index: number; message: string }>;\n  inputSinces: Map<number, PackedSince>;\n}\n\n/**\n * Convert TransactionSkeleton to js object\n *\n * @param txSkelton\n */\nexport function transactionSkeletonToObject(\n  txSkelton: TransactionSkeletonType\n): TransactionSkeletonObject {\n  return txSkelton.toJS() as TransactionSkeletonObject;\n}\n\n/**\n * Convert js object to TransactionSkeleton\n *\n * @param obj\n */\nexport function objectToTransactionSkeleton(\n  obj: TransactionSkeletonObject\n): TransactionSkeletonType {\n  let inputSinces = ImmutableMap<number, PackedSince>();\n  for (const [key, value] of Object.entries(obj.inputSinces)) {\n    inputSinces = inputSinces.set(+key, value);\n  }\n  const txSkeleton = TransactionSkeleton({\n    cellProvider: obj.cellProvider,\n    cellDeps: List(obj.cellDeps),\n    headerDeps: List(obj.headerDeps),\n    inputs: List(obj.inputs),\n    outputs: List(obj.outputs),\n    witnesses: List(obj.witnesses),\n    fixedEntries: List(obj.fixedEntries),\n    signingEntries: List(obj.signingEntries),\n    inputSinces,\n  });\n  return txSkeleton;\n}\n"],"mappings":"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"}