{"version":3,"file":"validate.js","names":["createHasher","algorithm","CKBHasher","outLength","Error","validateP2PKHMessage","messagesForSigning","rawTransaction","hashContentExceptRawTx","hashAlgorithm","rawTxHasher","txHash","update","blockchain","RawTransaction","pack","digestHex","hasher","actual","bytes","equal"],"sources":["../src/validate.ts"],"sourcesContent":["import { BytesLike, bytes } from \"@ckb-lumos/codec\";\nimport { blockchain, RawTransaction } from \"@ckb-lumos/base\";\nimport { CKBHasher } from \"@ckb-lumos/base/lib/utils\";\n\ntype HashAlgorithm = \"ckb-blake2b-256\" | \"ckb-blake2b-160\";\n\ninterface Hasher {\n  update(data: BytesLike): Hasher;\n  digestHex(): string;\n}\n\nfunction createHasher(algorithm: HashAlgorithm): Hasher {\n  switch (algorithm) {\n    case \"ckb-blake2b-256\":\n      return new CKBHasher({ outLength: 32 });\n\n    case \"ckb-blake2b-160\":\n      return new CKBHasher({ outLength: 20 });\n    default:\n      throw new Error(`Unsupported hash algorithm: ${algorithm}`);\n  }\n}\n\n/**\n * Validate a P2PKH(Pay to public key hash) message\n * @param messagesForSigning the message digest for signing. means hash(rawTransaction | extraData).\n * @param rawTransaction raw transaction object\n * @param hashContentExceptRawTx content to be hashed other than rawTransaction, is generally processed witness\n * @param hashAlgorithm hash algorithm for signing. Default is `\"ckb-blake2b-256\"`\n * @returns the validate result. unless all messages equals, it will return false.\n */\nexport function validateP2PKHMessage(\n  messagesForSigning: BytesLike,\n  rawTransaction: RawTransaction,\n  hashContentExceptRawTx: BytesLike,\n  hashAlgorithm: HashAlgorithm = \"ckb-blake2b-256\"\n): boolean {\n  const rawTxHasher = createHasher(hashAlgorithm);\n  const txHash = rawTxHasher\n    .update(blockchain.RawTransaction.pack(rawTransaction))\n    .digestHex();\n\n  const hasher = createHasher(hashAlgorithm);\n  hasher.update(txHash);\n  hasher.update(hashContentExceptRawTx);\n  const actual = hasher.digestHex();\n  return bytes.equal(messagesForSigning, actual);\n}\n"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AASA,SAASA,YAAT,CAAsBC,SAAtB,EAAwD;EACtD,QAAQA,SAAR;IACE,KAAK,iBAAL;MACE,OAAO,IAAIC,gBAAJ,CAAc;QAAEC,SAAS,EAAE;MAAb,CAAd,CAAP;;IAEF,KAAK,iBAAL;MACE,OAAO,IAAID,gBAAJ,CAAc;QAAEC,SAAS,EAAE;MAAb,CAAd,CAAP;;IACF;MACE,MAAM,IAAIC,KAAJ,CAAW,+BAA8BH,SAAU,EAAnD,CAAN;EAPJ;AASD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASI,oBAAT,CACLC,kBADK,EAELC,cAFK,EAGLC,sBAHK,EAILC,aAA4B,GAAG,iBAJ1B,EAKI;EACT,MAAMC,WAAW,GAAGV,YAAY,CAACS,aAAD,CAAhC;EACA,MAAME,MAAM,GAAGD,WAAW,CACvBE,MADY,CACLC,gBAAA,CAAWC,cAAX,CAA0BC,IAA1B,CAA+BR,cAA/B,CADK,EAEZS,SAFY,EAAf;EAIA,MAAMC,MAAM,GAAGjB,YAAY,CAACS,aAAD,CAA3B;EACAQ,MAAM,CAACL,MAAP,CAAcD,MAAd;EACAM,MAAM,CAACL,MAAP,CAAcJ,sBAAd;EACA,MAAMU,MAAM,GAAGD,MAAM,CAACD,SAAP,EAAf;EACA,OAAOG,YAAA,CAAMC,KAAN,CAAYd,kBAAZ,EAAgCY,MAAhC,CAAP;AACD"}