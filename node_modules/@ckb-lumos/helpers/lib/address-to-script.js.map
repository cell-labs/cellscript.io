{"version":3,"file":"address-to-script.js","names":["BECH32_LIMIT","ADDRESS_FORMAT_FULL","ADDRESS_FORMAT_SHORT","ADDRESS_FORMAT_FULLDATA","ADDRESS_FORMAT_FULLTYPE","parseFullFormatAddress","address","config","getConfig","words","prefix","bech32m","decode","PREFIX","Error","formatType","body","fromWords","length","codeHash","byteArrayToHex","slice","hashType","serializedHashType","args","parseDeprecatedCkb2019Address","bech32","shortId","argsBytes","scriptTemplate","Object","values","SCRIPTS","find","s","SHORT_ID","CODE_HASH","HASH_TYPE"],"sources":["../src/address-to-script.ts"],"sourcesContent":["// https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0021-ckb-address-format/0021-ckb-address-format.md\n// | format type |                   description                                |\n// |:-----------:|--------------------------------------------------------------|\n// |  0x00       | full version identifies the hashType                        |\n// |  0x01       | short version for locks with popular codeHash, deprecated   |\n// |  0x02       | full version with hashType = \"Data\", deprecated             |\n// |  0x04       | full version with hashType = \"Type\", deprecated             |\n\nimport { Address, Script } from \"@ckb-lumos/base\";\nimport { getConfig } from \"@ckb-lumos/config-manager\";\nimport { bech32, bech32m } from \"bech32\";\nimport { Options } from \"./\";\nimport { byteArrayToHex } from \"./utils\";\n\nconst BECH32_LIMIT = 1023;\n\n/**\n * full version identifies the hashType\n */\nexport const ADDRESS_FORMAT_FULL = 0x00;\n/**\n * @deprecated\n * short version for locks with popular codeHash, deprecated\n */\nexport const ADDRESS_FORMAT_SHORT = 0x01;\n\n/**\n * @deprecated\n * full version with hashType = \"Data\", deprecated\n */\nexport const ADDRESS_FORMAT_FULLDATA = 0x02;\n\n/**\n * @deprecated\n * full version with hashType = \"Type\", deprecated\n */\nexport const ADDRESS_FORMAT_FULLTYPE = 0x04;\n\nexport function parseFullFormatAddress(\n  address: Address,\n  { config }: Options\n): Script {\n  config = config || getConfig();\n\n  // throw error here if polymod not 0x2bc830a3(BECH32M_CONST)\n  // https://github.com/bitcoin/bips/blob/master/bip-0350.mediawiki#bech32m\n  const { words, prefix } = bech32m.decode(address, BECH32_LIMIT);\n\n  if (prefix !== config.PREFIX) {\n    throw Error(\n      `Invalid prefix! Expected: ${config.PREFIX}, actual: ${prefix}`\n    );\n  }\n\n  const [formatType, ...body] = bech32m.fromWords(words);\n\n  if (formatType !== ADDRESS_FORMAT_FULL) {\n    throw new Error(\"Invalid address format type\");\n  }\n\n  if (body.length < 32 + 1) {\n    throw new Error(\"Invalid payload length, too short!\");\n  }\n\n  const codeHash = byteArrayToHex(body.slice(0, 32));\n  const hashType = (() => {\n    const serializedHashType = body[32];\n\n    if (serializedHashType === 0) return \"data\";\n    if (serializedHashType === 1) return \"type\";\n    if (serializedHashType === 2) return \"data1\";\n\n    throw new Error(`Invalid hashType ${serializedHashType}`);\n  })();\n  const args = byteArrayToHex(body.slice(33));\n\n  return { codeHash, hashType, args };\n}\n\nexport function parseDeprecatedCkb2019Address(\n  address: string,\n  { config }: Options\n): Script {\n  config = config || getConfig();\n\n  // throw error here if polymod not 1\n  // https://github.com/bitcoin/bips/blob/master/bip-0350.mediawiki#bech32m\n  const { prefix, words } = bech32.decode(address, BECH32_LIMIT);\n\n  if (prefix !== config.PREFIX) {\n    throw Error(\n      `Invalid prefix! Expected: ${config.PREFIX}, actual: ${prefix}`\n    );\n  }\n  const [formatType, ...body] = bech32.fromWords(words);\n\n  switch (formatType) {\n    // payload = 0x01 | code_hash_index | args\n    case ADDRESS_FORMAT_SHORT: {\n      const [shortId, ...argsBytes] = body;\n\n      /* secp256k1 / multisig / ACP */\n      if (argsBytes.length !== 20) {\n        throw Error(`Invalid payload length!`);\n      }\n      const scriptTemplate = Object.values(config.SCRIPTS).find(\n        (s) => s && s.SHORT_ID === shortId\n      );\n      if (!scriptTemplate) {\n        throw Error(`Invalid code hash index: ${shortId}!`);\n      }\n      return {\n        codeHash: scriptTemplate.CODE_HASH,\n        hashType: scriptTemplate.HASH_TYPE,\n        args: byteArrayToHex(argsBytes),\n      };\n    }\n    // payload = 0x02 | codeHash | args\n    case ADDRESS_FORMAT_FULLDATA: {\n      if (body.length < 32) {\n        throw Error(`Invalid payload length!`);\n      }\n      return {\n        codeHash: byteArrayToHex(body.slice(0, 32)),\n        hashType: \"data\",\n        args: byteArrayToHex(body.slice(32)),\n      };\n    }\n    // payload = 0x04 | codeHash | args\n    case ADDRESS_FORMAT_FULLTYPE: {\n      if (body.length < 32) {\n        throw Error(`Invalid payload length!`);\n      }\n      return {\n        codeHash: byteArrayToHex(body.slice(0, 32)),\n        hashType: \"type\",\n        args: byteArrayToHex(body.slice(32)),\n      };\n    }\n  }\n  throw Error(`Invalid payload format type: ${formatType}`);\n}\n"],"mappings":";;;;;;;;;AASA;;AACA;;AAEA;;AAZA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA,MAAMA,YAAY,GAAG,IAArB;AAEA;AACA;AACA;;AACO,MAAMC,mBAAmB,GAAG,IAA5B;AACP;AACA;AACA;AACA;;;AACO,MAAMC,oBAAoB,GAAG,IAA7B;AAEP;AACA;AACA;AACA;;;AACO,MAAMC,uBAAuB,GAAG,IAAhC;AAEP;AACA;AACA;AACA;;;AACO,MAAMC,uBAAuB,GAAG,IAAhC;;;AAEA,SAASC,sBAAT,CACLC,OADK,EAEL;EAAEC;AAAF,CAFK,EAGG;EACRA,MAAM,GAAGA,MAAM,IAAI,IAAAC,wBAAA,GAAnB,CADQ,CAGR;EACA;;EACA,MAAM;IAAEC,KAAF;IAASC;EAAT,IAAoBC,aAAA,CAAQC,MAAR,CAAeN,OAAf,EAAwBN,YAAxB,CAA1B;;EAEA,IAAIU,MAAM,KAAKH,MAAM,CAACM,MAAtB,EAA8B;IAC5B,MAAMC,KAAK,CACR,6BAA4BP,MAAM,CAACM,MAAO,aAAYH,MAAO,EADrD,CAAX;EAGD;;EAED,MAAM,CAACK,UAAD,EAAa,GAAGC,IAAhB,IAAwBL,aAAA,CAAQM,SAAR,CAAkBR,KAAlB,CAA9B;;EAEA,IAAIM,UAAU,KAAKd,mBAAnB,EAAwC;IACtC,MAAM,IAAIa,KAAJ,CAAU,6BAAV,CAAN;EACD;;EAED,IAAIE,IAAI,CAACE,MAAL,GAAc,KAAK,CAAvB,EAA0B;IACxB,MAAM,IAAIJ,KAAJ,CAAU,oCAAV,CAAN;EACD;;EAED,MAAMK,QAAQ,GAAG,IAAAC,qBAAA,EAAeJ,IAAI,CAACK,KAAL,CAAW,CAAX,EAAc,EAAd,CAAf,CAAjB;;EACA,MAAMC,QAAQ,GAAG,CAAC,MAAM;IACtB,MAAMC,kBAAkB,GAAGP,IAAI,CAAC,EAAD,CAA/B;IAEA,IAAIO,kBAAkB,KAAK,CAA3B,EAA8B,OAAO,MAAP;IAC9B,IAAIA,kBAAkB,KAAK,CAA3B,EAA8B,OAAO,MAAP;IAC9B,IAAIA,kBAAkB,KAAK,CAA3B,EAA8B,OAAO,OAAP;IAE9B,MAAM,IAAIT,KAAJ,CAAW,oBAAmBS,kBAAmB,EAAjD,CAAN;EACD,CARgB,GAAjB;;EASA,MAAMC,IAAI,GAAG,IAAAJ,qBAAA,EAAeJ,IAAI,CAACK,KAAL,CAAW,EAAX,CAAf,CAAb;EAEA,OAAO;IAAEF,QAAF;IAAYG,QAAZ;IAAsBE;EAAtB,CAAP;AACD;;AAEM,SAASC,6BAAT,CACLnB,OADK,EAEL;EAAEC;AAAF,CAFK,EAGG;EACRA,MAAM,GAAGA,MAAM,IAAI,IAAAC,wBAAA,GAAnB,CADQ,CAGR;EACA;;EACA,MAAM;IAAEE,MAAF;IAAUD;EAAV,IAAoBiB,YAAA,CAAOd,MAAP,CAAcN,OAAd,EAAuBN,YAAvB,CAA1B;;EAEA,IAAIU,MAAM,KAAKH,MAAM,CAACM,MAAtB,EAA8B;IAC5B,MAAMC,KAAK,CACR,6BAA4BP,MAAM,CAACM,MAAO,aAAYH,MAAO,EADrD,CAAX;EAGD;;EACD,MAAM,CAACK,UAAD,EAAa,GAAGC,IAAhB,IAAwBU,YAAA,CAAOT,SAAP,CAAiBR,KAAjB,CAA9B;;EAEA,QAAQM,UAAR;IACE;IACA,KAAKb,oBAAL;MAA2B;QACzB,MAAM,CAACyB,OAAD,EAAU,GAAGC,SAAb,IAA0BZ,IAAhC;QAEA;;QACA,IAAIY,SAAS,CAACV,MAAV,KAAqB,EAAzB,EAA6B;UAC3B,MAAMJ,KAAK,CAAE,yBAAF,CAAX;QACD;;QACD,MAAMe,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAcxB,MAAM,CAACyB,OAArB,EAA8BC,IAA9B,CACpBC,CAAD,IAAOA,CAAC,IAAIA,CAAC,CAACC,QAAF,KAAeR,OADN,CAAvB;;QAGA,IAAI,CAACE,cAAL,EAAqB;UACnB,MAAMf,KAAK,CAAE,4BAA2Ba,OAAQ,GAArC,CAAX;QACD;;QACD,OAAO;UACLR,QAAQ,EAAEU,cAAc,CAACO,SADpB;UAELd,QAAQ,EAAEO,cAAc,CAACQ,SAFpB;UAGLb,IAAI,EAAE,IAAAJ,qBAAA,EAAeQ,SAAf;QAHD,CAAP;MAKD;IACD;;IACA,KAAKzB,uBAAL;MAA8B;QAC5B,IAAIa,IAAI,CAACE,MAAL,GAAc,EAAlB,EAAsB;UACpB,MAAMJ,KAAK,CAAE,yBAAF,CAAX;QACD;;QACD,OAAO;UACLK,QAAQ,EAAE,IAAAC,qBAAA,EAAeJ,IAAI,CAACK,KAAL,CAAW,CAAX,EAAc,EAAd,CAAf,CADL;UAELC,QAAQ,EAAE,MAFL;UAGLE,IAAI,EAAE,IAAAJ,qBAAA,EAAeJ,IAAI,CAACK,KAAL,CAAW,EAAX,CAAf;QAHD,CAAP;MAKD;IACD;;IACA,KAAKjB,uBAAL;MAA8B;QAC5B,IAAIY,IAAI,CAACE,MAAL,GAAc,EAAlB,EAAsB;UACpB,MAAMJ,KAAK,CAAE,yBAAF,CAAX;QACD;;QACD,OAAO;UACLK,QAAQ,EAAE,IAAAC,qBAAA,EAAeJ,IAAI,CAACK,KAAL,CAAW,CAAX,EAAc,EAAd,CAAf,CADL;UAELC,QAAQ,EAAE,MAFL;UAGLE,IAAI,EAAE,IAAAJ,qBAAA,EAAeJ,IAAI,CAACK,KAAL,CAAW,EAAX,CAAf;QAHD,CAAP;MAKD;EA1CH;;EA4CA,MAAMP,KAAK,CAAE,gCAA+BC,UAAW,EAA5C,CAAX;AACD"}