{"version":3,"file":"utils.js","names":["HEX_DECIMAL_REGEX","HEX_DECIMAL_WITH_BYTELENGTH_REGEX_MAP","Map","assertHexDecimal","str","byteLength","regex","get","newRegex","RegExp","String","raw","set","test","Error","HEX_STRING_REGEX","HEX_STRING_WITH_BYTELENGTH_REGEX_MAP","assertHexString","assertUtf8String","i","length","c","charCodeAt","assertBufferLength","buf","assertMinBufferLength","isObjectLike","x","trackCodeExecuteError","path","fn","e","readableError","isCodecExecuteError","CodecExecuteError","updateKey"],"sources":["../src/utils.ts"],"sourcesContent":["import {\n  CodecBaseParseError,\n  CodecExecuteError,\n  isCodecExecuteError,\n} from \"./error\";\n\nconst HEX_DECIMAL_REGEX = /^0x([0-9a-fA-F])+$/;\nconst HEX_DECIMAL_WITH_BYTELENGTH_REGEX_MAP = new Map<number, RegExp>();\n\nexport function assertHexDecimal(str: string, byteLength?: number): void {\n  if (byteLength) {\n    let regex = HEX_DECIMAL_WITH_BYTELENGTH_REGEX_MAP.get(byteLength);\n    if (!regex) {\n      const newRegex = RegExp(\n        String.raw`^0x([0-9a-fA-F]){1,${byteLength * 2}}$`\n      );\n      HEX_DECIMAL_WITH_BYTELENGTH_REGEX_MAP.set(byteLength, newRegex);\n      regex = newRegex;\n    }\n    if (!regex.test(str)) {\n      throw new Error(\"Invalid hex decimal!\");\n    }\n  } else {\n    if (!HEX_DECIMAL_REGEX.test(str)) {\n      throw new Error(\"Invalid hex decimal!\");\n    }\n  }\n}\n\nconst HEX_STRING_REGEX = /^0x([0-9a-fA-F][0-9a-fA-F])*$/;\nconst HEX_STRING_WITH_BYTELENGTH_REGEX_MAP = new Map<number, RegExp>();\n\nexport function assertHexString(str: string, byteLength?: number): void {\n  if (byteLength) {\n    let regex = HEX_STRING_WITH_BYTELENGTH_REGEX_MAP.get(byteLength);\n    if (!regex) {\n      const newRegex = RegExp(\n        String.raw`^0x([0-9a-fA-F][0-9a-fA-F]){${byteLength}}$`\n      );\n      HEX_STRING_WITH_BYTELENGTH_REGEX_MAP.set(byteLength, newRegex);\n      regex = newRegex;\n    }\n    if (!regex.test(str)) {\n      throw new Error(\"Invalid hex string!\");\n    }\n  } else {\n    if (!HEX_STRING_REGEX.test(str)) {\n      throw new Error(\"Invalid hex string!\");\n    }\n  }\n}\n\nexport function assertUtf8String(str: string): void {\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c > 0xff) {\n      throw new Error(\"Invalid UTF-8 raw string!\");\n    }\n  }\n}\n\nexport function assertBufferLength(\n  buf: { byteLength: number },\n  length: number\n): void {\n  if (buf.byteLength !== length) {\n    throw new Error(\n      `Invalid buffer length: ${buf.byteLength}, should be ${length}`\n    );\n  }\n}\n\nexport function assertMinBufferLength(\n  buf: { byteLength: number },\n  length: number\n): void {\n  if (buf.byteLength < length) {\n    throw new Error(\n      `Invalid buffer length: ${buf.byteLength}, should be at least ${length}`\n    );\n  }\n}\n\nexport function isObjectLike(x: unknown): x is Record<string, unknown> {\n  if (!x) return false;\n  return typeof x === \"object\";\n}\n\nexport function trackCodeExecuteError<T>(\n  path: string | number | symbol,\n  fn: () => T\n): T {\n  try {\n    return fn();\n  } catch (e) {\n    const readableError = isCodecExecuteError(e)\n      ? e\n      : new CodecExecuteError(e as CodecBaseParseError);\n    readableError.updateKey(path);\n    throw readableError;\n  }\n}\n"],"mappings":"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"}