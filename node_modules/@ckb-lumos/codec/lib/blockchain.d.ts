import { AnyCodec, BytesCodec, BytesLike, FixedBytesCodec, PackParam, UnpackResult } from "./base";
export declare function createFixedHexBytesCodec(byteLength: number): FixedBytesCodec<string, BytesLike>;
/**
 * placeholder codec, generally used as a placeholder
 * ```
 * // for example, when some BytesOpt is not used, it will be filled with this codec
 * // option BytesOpt (Bytes);
 * const UnusedBytesOpt = UnknownOpt
 * ```
 */
export declare const Bytes: BytesCodec<string, BytesLike>;
export declare const BytesOpt: import("./molecule/layout").OptionCodec<BytesCodec<string, BytesLike>>;
export declare const BytesVec: BytesCodec<string[], BytesLike[]>;
export declare const Byte32: FixedBytesCodec<string, BytesLike>;
export declare const Byte32Vec: BytesCodec<string[], BytesLike[]>;
export declare function WitnessArgsOf<LockCodec extends AnyCodec, InputTypeCodec extends AnyCodec, OutputTypeCodec extends AnyCodec>(payload: {
    lock: LockCodec;
    input_type: InputTypeCodec;
    output_type: OutputTypeCodec;
}): BytesCodec<{
    lock?: UnpackResult<LockCodec>;
    input_type?: UnpackResult<InputTypeCodec>;
    output_type?: UnpackResult<OutputTypeCodec>;
}, {
    lock?: PackParam<LockCodec>;
    input_type?: PackParam<InputTypeCodec>;
    output_type?: PackParam<OutputTypeCodec>;
}>;
/**
 *
 * @example
 * ```ts
 * // secp256k1 lock witness
 * WitnessArgs.pack({ lock: '0x' + '00'.repeat(65) })
 * ```
 */
export declare const WitnessArgs: BytesCodec<{
    lock?: string | undefined;
    input_type?: string | undefined;
    output_type?: string | undefined;
}, {
    lock?: string | ArrayBuffer | ArrayLike<number> | undefined;
    input_type?: string | ArrayBuffer | ArrayLike<number> | undefined;
    output_type?: string | ArrayBuffer | ArrayLike<number> | undefined;
}>;
//# sourceMappingURL=blockchain.d.ts.map