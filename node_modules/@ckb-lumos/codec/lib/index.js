"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  createBytesCodec: true,
  createFixedBytesCodec: true,
  isFixedCodec: true,
  bytes: true,
  number: true,
  molecule: true
};
exports.bytes = void 0;
Object.defineProperty(exports, "createBytesCodec", {
  enumerable: true,
  get: function () {
    return _base.createBytesCodec;
  }
});
Object.defineProperty(exports, "createFixedBytesCodec", {
  enumerable: true,
  get: function () {
    return _base.createFixedBytesCodec;
  }
});
Object.defineProperty(exports, "isFixedCodec", {
  enumerable: true,
  get: function () {
    return _base.isFixedCodec;
  }
});
exports.number = exports.molecule = void 0;

var _base = require("./base");

var _highOrder = require("./high-order");

Object.keys(_highOrder).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _highOrder[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _highOrder[key];
    }
  });
});

var _bytes = _interopRequireWildcard(require("./bytes"));

exports.bytes = _bytes;

var _number = _interopRequireWildcard(require("./number"));

exports.number = _number;

var _molecule = _interopRequireWildcard(require("./molecule"));

exports.molecule = _molecule;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
//# sourceMappingURL=index.js.map