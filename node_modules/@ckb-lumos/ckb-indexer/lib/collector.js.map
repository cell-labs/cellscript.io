{"version":3,"file":"collector.js","names":["CKBCellCollector","constructor","terminableCellFetcher","queries","otherQueryOptions","defaultQuery","lock","undefined","type","argsLen","data","fromBlock","toBlock","order","skip","outputDataLenRange","outputCapacityRange","bufferSize","validateQueryOption","convertQueryOptionToSearchKey","Error","instanceOfScriptWrapper","validators","ValidateScript","script","utils","assertHexadecimal","scriptLenRange","dataLen","getHexStringBytes","Number","queryLock","dataLenRange","toString","getLiveCell","lastCursor","searchKeyFilter","sizeLimit","result","getCells","generateSearchKey","shouldSkipped","cell","skippedCount","cellOutput","args","count","getCellWithCursor","objects","counter","cells","length","buffer","index","request","rpcUrl","res","fetch","method","body","JSON","stringify","headers","status","json","error","getLiveCellWithBlockHash","requestData","map","id","jsonrpc","params","blockNumber","blockHashList","ckbRpcUrl","item","rpcResponse","find","responseItem","blockHash","collect","withBlockHash"],"sources":["../src/collector.ts"],"sourcesContent":["import { utils, Cell, BaseCellCollector } from \"@ckb-lumos/base\";\nimport { validators } from \"@ckb-lumos/toolkit\";\nimport {\n  SearchKeyFilter,\n  CKBIndexerQueryOptions,\n  GetCellsResults,\n  Order,\n  OtherQueryOptions,\n  TerminableCellFetcher,\n} from \"./type\";\nimport {\n  generateSearchKey,\n  getHexStringBytes,\n  instanceOfScriptWrapper,\n} from \"./services\";\nimport fetch from \"cross-fetch\";\n\ninterface GetBlockHashRPCResult {\n  jsonrpc: string;\n  id: number;\n  result: string;\n}\n\n/** CellCollector will not get cell with blockHash by default, please use OtherQueryOptions.withBlockHash and OtherQueryOptions.CKBRpcUrl to get blockHash if you need. */\nexport class CKBCellCollector implements BaseCellCollector {\n  constructor(\n    public terminableCellFetcher: TerminableCellFetcher,\n    public queries: CKBIndexerQueryOptions,\n    public otherQueryOptions?: OtherQueryOptions\n  ) {\n    const defaultQuery: CKBIndexerQueryOptions = {\n      lock: undefined,\n      type: undefined,\n      argsLen: -1,\n      data: \"any\",\n      fromBlock: undefined,\n      toBlock: undefined,\n      order: \"asc\",\n      skip: undefined,\n      outputDataLenRange: undefined,\n      outputCapacityRange: undefined,\n      bufferSize: undefined,\n    };\n    this.queries = { ...defaultQuery, ...this.queries };\n    this.validateQueryOption(this.queries);\n    this.convertQueryOptionToSearchKey();\n  }\n\n  public validateQueryOption(queries: CKBIndexerQueryOptions): void {\n    if (!queries.lock && (!queries.type || queries.type === \"empty\")) {\n      throw new Error(\"Either lock or type script must be provided!\");\n    }\n\n    if (queries.lock) {\n      if (!instanceOfScriptWrapper(queries.lock)) {\n        validators.ValidateScript(queries.lock);\n      } else if (instanceOfScriptWrapper(queries.lock)) {\n        validators.ValidateScript(queries.lock.script);\n      }\n    }\n\n    if (queries.type && queries.type !== \"empty\") {\n      if (\n        typeof queries.type === \"object\" &&\n        !instanceOfScriptWrapper(queries.type)\n      ) {\n        validators.ValidateScript(queries.type);\n      } else if (\n        typeof queries.type === \"object\" &&\n        instanceOfScriptWrapper(queries.type)\n      ) {\n        validators.ValidateScript(queries.type.script);\n      }\n    }\n\n    if (queries.fromBlock) {\n      utils.assertHexadecimal(\"fromBlock\", queries.fromBlock);\n    }\n    if (queries.toBlock) {\n      utils.assertHexadecimal(\"toBlock\", queries.toBlock);\n    }\n    if (queries.order !== \"asc\" && queries.order !== \"desc\") {\n      throw new Error(\"Order must be either asc or desc!\");\n    }\n    if (queries.outputCapacityRange) {\n      utils.assertHexadecimal(\n        \"outputCapacityRange[0]\",\n        queries.outputCapacityRange[0]\n      );\n      utils.assertHexadecimal(\n        \"outputCapacityRange[1]\",\n        queries.outputCapacityRange[1]\n      );\n    }\n\n    if (queries.outputDataLenRange) {\n      utils.assertHexadecimal(\n        \"outputDataLenRange[0]\",\n        queries.outputDataLenRange[0]\n      );\n      utils.assertHexadecimal(\n        \"outputDataLenRange[1]\",\n        queries.outputDataLenRange[1]\n      );\n    }\n    if (queries.scriptLenRange) {\n      utils.assertHexadecimal(\"scriptLenRange[0]\", queries.scriptLenRange[0]);\n      utils.assertHexadecimal(\"scriptLenRange[1]\", queries.scriptLenRange[1]);\n    }\n\n    if (queries.outputDataLenRange && queries.data && queries.data !== \"any\") {\n      const dataLen = getHexStringBytes(queries.data);\n      if (\n        dataLen < Number(queries.outputDataLenRange[0]) ||\n        dataLen >= Number(queries.outputDataLenRange[1])\n      ) {\n        throw new Error(\"data length not match outputDataLenRange\");\n      }\n    }\n\n    if (queries.skip && typeof queries.skip !== \"number\") {\n      throw new Error(\"skip must be a number!\");\n    }\n\n    if (queries.bufferSize && typeof queries.bufferSize !== \"number\") {\n      throw new Error(\"bufferSize must be a number!\");\n    }\n  }\n\n  public convertQueryOptionToSearchKey(): void {\n    const queryLock = this.queries.lock;\n    // unWrap `ScriptWrapper` into `Script`.\n    if (queryLock) {\n      if (instanceOfScriptWrapper(queryLock)) {\n        validators.ValidateScript(queryLock.script);\n        this.queries.lock = queryLock.script;\n      }\n    }\n\n    // unWrap `ScriptWrapper` into `Script`.\n    if (this.queries.type && this.queries.type !== \"empty\") {\n      if (\n        typeof this.queries.type === \"object\" &&\n        instanceOfScriptWrapper(this.queries.type)\n      ) {\n        validators.ValidateScript(this.queries.type.script);\n        this.queries.type = this.queries.type.script;\n      }\n    }\n\n    if (!this.queries.outputDataLenRange) {\n      if (this.queries.data && this.queries.data !== \"any\") {\n        const dataLenRange = getHexStringBytes(this.queries.data);\n        this.queries.outputDataLenRange = [\n          \"0x\" + dataLenRange.toString(16),\n          \"0x\" + (dataLenRange + 1).toString(16),\n        ];\n      }\n    }\n\n    if (!this.queries.scriptLenRange && this.queries.type === \"empty\") {\n      this.queries.scriptLenRange = [\"0x0\", \"0x1\"];\n    }\n  }\n\n  private async getLiveCell(lastCursor?: string): Promise<GetCellsResults> {\n    const searchKeyFilter: SearchKeyFilter = {\n      sizeLimit: this.queries.bufferSize,\n      order: this.queries.order as Order,\n    };\n    if (lastCursor) {\n      searchKeyFilter.lastCursor = lastCursor;\n    }\n    const result = await this.terminableCellFetcher.getCells(\n      generateSearchKey(this.queries),\n      undefined,\n      searchKeyFilter\n    );\n    return result;\n  }\n\n  private shouldSkipped(cell: Cell, skippedCount = 0) {\n    if (this.queries.skip && skippedCount < this.queries.skip) {\n      return true;\n    }\n    if (cell && this.queries.type === \"empty\" && cell.cellOutput.type) {\n      return true;\n    }\n    if (this.queries.data !== \"any\" && cell.data !== this.queries.data) {\n      return true;\n    }\n    if (\n      this.queries.argsLen !== -1 &&\n      this.queries.argsLen !== \"any\" &&\n      getHexStringBytes(cell.cellOutput.lock.args) !== this.queries.argsLen\n    ) {\n      return true;\n    }\n  }\n\n  async count(): Promise<number> {\n    let lastCursor: undefined | string = undefined;\n    const getCellWithCursor = async (): Promise<Cell[]> => {\n      const result: GetCellsResults = await this.getLiveCell(lastCursor);\n      lastCursor = result.lastCursor;\n      return result.objects;\n    };\n    let counter = 0;\n    let cells: Cell[] = await getCellWithCursor();\n    if (cells.length === 0) {\n      return 0;\n    }\n    let buffer: Promise<Cell[]> = getCellWithCursor();\n    let index = 0;\n    let skippedCount = 0;\n    while (true) {\n      if (!this.shouldSkipped(cells[index], skippedCount)) {\n        counter += 1;\n      } else {\n        skippedCount++;\n      }\n      index++;\n      //reset index and exchange `cells` and `buffer` after count last cell\n      if (index === cells.length) {\n        index = 0;\n        cells = await buffer;\n        // break if can not get more cells\n        if (cells.length === 0) {\n          break;\n        }\n        buffer = getCellWithCursor();\n      }\n    }\n    return counter;\n  }\n\n  // eslint-disable-next-line\n  private async request(rpcUrl: string, data: unknown): Promise<any> {\n    const res: Response = await fetch(rpcUrl, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    if (res.status !== 200) {\n      throw new Error(`indexer request failed with HTTP code ${res.status}`);\n    }\n    const result = await res.json();\n    if (result.error !== undefined) {\n      throw new Error(\n        `indexer request rpc failed with error: ${JSON.stringify(result.error)}`\n      );\n    }\n    return result;\n  }\n\n  private async getLiveCellWithBlockHash(lastCursor?: string) {\n    if (!this.otherQueryOptions) {\n      throw new Error(\"CKB Rpc URL must provide\");\n    }\n    const result: GetCellsResults = await this.getLiveCell(lastCursor);\n    if (result.objects.length === 0) {\n      return result;\n    }\n    const requestData = result.objects.map((cell, index) => {\n      return {\n        id: index,\n        jsonrpc: \"2.0\",\n        method: \"get_block_hash\",\n        params: [cell.blockNumber],\n      };\n    });\n    const blockHashList: GetBlockHashRPCResult[] = await this.request(\n      this.otherQueryOptions.ckbRpcUrl,\n      requestData\n    );\n    result.objects = result.objects.map((item, index) => {\n      const rpcResponse = blockHashList.find(\n        (responseItem: GetBlockHashRPCResult) => responseItem.id === index\n      );\n      const blockHash = rpcResponse && rpcResponse.result;\n      return { ...item, blockHash };\n    });\n    return result;\n  }\n\n  /** collect cells without blockHash by default.if you need blockHash, please add OtherQueryOptions.withBlockHash and OtherQueryOptions.ckbRpcUrl when constructor CellCollect.\n   * don't use OtherQueryOption if you don't need blockHash,cause it will slowly your collect.\n   */\n  async *collect(): AsyncGenerator<Cell, void, unknown> {\n    //TODO: fix return type\n    const withBlockHash =\n      this.otherQueryOptions &&\n      \"withBlockHash\" in this.otherQueryOptions &&\n      this.otherQueryOptions.withBlockHash;\n    let lastCursor: undefined | string = undefined;\n    const getCellWithCursor = async (): Promise<Cell[]> => {\n      const result: GetCellsResults = await (withBlockHash\n        ? this.getLiveCellWithBlockHash(lastCursor)\n        : this.getLiveCell(lastCursor));\n      lastCursor = result.lastCursor;\n      return result.objects;\n    };\n    let cells: Cell[] = await getCellWithCursor();\n    if (cells.length === 0) {\n      return;\n    }\n    let buffer: Promise<Cell[]> = getCellWithCursor();\n    let index = 0;\n    let skippedCount = 0;\n    while (true) {\n      if (!this.shouldSkipped(cells[index], skippedCount)) {\n        yield cells[index];\n      } else {\n        skippedCount++;\n      }\n      index++;\n      //reset index and exchange `cells` and `buffer` after yield last cell\n      if (index === cells.length) {\n        index = 0;\n        cells = await buffer;\n        // break if can not get more cells\n        if (cells.length === 0) {\n          break;\n        }\n        buffer = getCellWithCursor();\n      }\n    }\n  }\n}\n"],"mappings":"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"}