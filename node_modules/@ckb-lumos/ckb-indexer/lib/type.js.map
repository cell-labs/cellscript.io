{"version":3,"file":"type.js","names":["IndexerEmitter","EventEmitter"],"sources":["../src/type.ts"],"sourcesContent":["import {\n  Cell,\n  Hexadecimal,\n  HexString,\n  QueryOptions,\n  OutPoint,\n  HexNumber,\n  Output,\n  TransactionWithStatus,\n  Script,\n  Tip,\n} from \"@ckb-lumos/base\";\nimport { EventEmitter } from \"events\";\nimport { BIish } from \"@ckb-lumos/bi\";\n\nexport type ScriptType = \"type\" | \"lock\";\nexport type Order = \"asc\" | \"desc\";\n\nexport interface CKBIndexerQueryOptions extends QueryOptions {\n  outputDataLenRange?: HexadecimalRange;\n  outputCapacityRange?: HexadecimalRange;\n  scriptLenRange?: HexadecimalRange;\n  bufferSize?: number;\n  withData?: boolean;\n  groupByTransaction?: boolean;\n}\n\nexport type HexadecimalRange = [Hexadecimal, Hexadecimal];\nexport interface SearchFilter {\n  script?: Script;\n  scriptLenRange?: HexadecimalRange;\n  outputDataLenRange?: HexadecimalRange; //empty\n  outputCapacityRange?: HexadecimalRange; //empty\n  blockRange?: HexadecimalRange; //fromBlock-toBlock\n}\nexport interface SearchKey {\n  script: Script;\n  scriptType: ScriptType;\n  filter?: SearchFilter;\n}\nexport interface GetLiveCellsResult<WithData extends boolean = true> {\n  lastCursor: string;\n  objects: WithData extends true ? IndexerCell[] : IndexerCellWithoutData[];\n}\n\nexport interface GetCellsSearchKey<WithData extends boolean = boolean>\n  extends SearchKey {\n  withData?: WithData;\n}\n\nexport interface GetTransactionsSearchKey<Group extends boolean = boolean>\n  extends SearchKey {\n  groupByTransaction?: Group;\n}\n\nexport interface rpcResponse {\n  status: number;\n  data: rpcResponseData;\n}\n\nexport interface rpcResponseData {\n  result: string;\n  error: string;\n}\n\nexport interface IndexerCell {\n  blockNumber: Hexadecimal;\n  outPoint: OutPoint;\n  output: {\n    capacity: HexNumber;\n    lock: Script;\n    type?: Script;\n  };\n  outputData: HexString;\n  txIndex: Hexadecimal;\n}\n\nexport interface IndexerCellWithoutData\n  extends Omit<IndexerCell, \"outputData\"> {\n  outputData: null;\n}\n\nexport interface TerminatorResult {\n  stop: boolean;\n  push: boolean;\n}\n\nexport declare type Terminator = (\n  index: number,\n  cell: Cell\n) => TerminatorResult;\n\nexport declare type GetCellWithTerminator = (\n  searchKey: SearchKey,\n  terminator?: Terminator,\n  searchKeyFilter?: SearchKeyFilter\n) => Promise<GetCellsResults>;\n\nexport interface TerminableCellFetcher {\n  getCells: GetCellWithTerminator;\n}\n\nexport type HexNum = string;\nexport type IOType = \"input\" | \"output\" | \"both\";\nexport type Bytes32 = string;\nexport type IndexerTransaction<Goruped extends boolean = false> =\n  Goruped extends true\n    ? GroupedIndexerTransaction\n    : UngroupedIndexerTransaction;\n\nexport type UngroupedIndexerTransaction = {\n  blockNumber: HexNum;\n  ioIndex: HexNum;\n  ioType: IOType;\n  txHash: Bytes32;\n  txIndex: HexNum;\n};\n\nexport type GroupedIndexerTransaction = {\n  txHash: Bytes32;\n  blockNumber: HexNum;\n  txIndex: HexNum;\n  cells: Array<[IOType, HexNum]>;\n};\n\nexport interface IndexerTransactionList<Grouped extends boolean = false> {\n  lastCursor: string | undefined;\n  objects: IndexerTransaction<Grouped>[];\n}\n\nexport interface GetCellsResults {\n  lastCursor: string;\n  objects: Cell[];\n}\n\nexport interface SearchKeyFilter {\n  sizeLimit?: number;\n  order?: Order;\n  lastCursor?: string | undefined;\n}\n\nexport interface OutputToVerify {\n  output: Output;\n  outputData: string;\n}\n\nexport class IndexerEmitter extends EventEmitter {\n  lock?: Script;\n  type?: Script;\n  outputData?: HexString | \"any\";\n  argsLen?: number | \"any\";\n  fromBlock?: BIish;\n}\n\nexport interface OtherQueryOptions {\n  withBlockHash: true;\n  ckbRpcUrl: string;\n}\n\nexport interface GetTransactionRPCResult {\n  jsonrpc: string;\n  id: number;\n  result: TransactionWithStatus;\n}\n\nexport interface JsonRprRequestBody {\n  id: string | number;\n  jsonrpc: string;\n  method: string;\n  params: string[];\n}\n\nexport declare type GetTipRpc = () => Promise<Tip>;\nexport declare type GetCellsRpc = <WithData extends boolean = true>(\n  searchKey: GetCellsSearchKey<WithData>,\n  order: Order,\n  limit: HexString,\n  cursor?: string\n) => Promise<GetLiveCellsResult<WithData>>;\nexport declare type GetTransactionsRpc = <Grouped extends boolean = false>(\n  searchKey: GetTransactionsSearchKey<Grouped>,\n  order: Order,\n  limit: HexString,\n  cursor?: string\n) => Promise<IndexerTransactionList<Grouped>>;\n\nexport interface IndexerRpc {\n  getTip: GetTipRpc;\n  getCells: GetCellsRpc;\n  getTransactions: GetTransactionsRpc;\n}\n"],"mappings":";;;;;;;AAYA;;AAsIO,MAAMA,cAAN,SAA6BC,oBAA7B,CAA0C"}