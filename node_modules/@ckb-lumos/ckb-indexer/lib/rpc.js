"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RPC = void 0;

var _base = require("@ckb-lumos/base");

var _crossFetch = _interopRequireDefault(require("cross-fetch"));

var _paramsFormatter = require("./paramsFormatter");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class RPC {
  /**
   *
   * @param uri  indexer uri
   */
  constructor(uri) {
    this.uri = uri;
  }

  async getTip() {
    return _base.utils.deepCamel(await request(this.uri, "get_tip"));
  }

  async getCells(searchKey, order, limit, cursor) {
    const params = [(0, _paramsFormatter.toGetCellsSearchKey)(searchKey), order, limit, cursor];
    return _base.utils.deepCamel(await request(this.uri, "get_cells", params));
  }

  async getTransactions(searchKey, order, limit, cursor) {
    const params = [(0, _paramsFormatter.toGetTransactionsSearchKey)(searchKey), order, limit, cursor];
    return _base.utils.deepCamel(await request(this.uri, "get_transactions", params));
  }

  async getIndexerInfo() {
    return _base.utils.deepCamel(await request(this.uri, "get_indexer_info"));
  }

}
/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types */


exports.RPC = RPC;

const request = async (ckbIndexerUrl, method, params) => {
  const res = await (0, _crossFetch.default)(ckbIndexerUrl, {
    method: "POST",
    body: JSON.stringify({
      id: 0,
      jsonrpc: "2.0",
      method,
      params
    }),
    headers: {
      "Content-Type": "application/json"
    }
  });

  if (res.status !== 200) {
    throw new Error(`indexer request failed with HTTP code ${res.status}`);
  }

  const data = await res.json();

  if (data.error !== undefined) {
    throw new Error(`indexer request rpc failed with error: ${JSON.stringify(data.error)}`);
  }

  return data.result;
};
/* eslint-enalbe @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types */
//# sourceMappingURL=rpc.js.map