{"version":3,"file":"api.js","names":["TransactionStatus","CellStatus","CKBComponents"],"sources":["../../src/types/api.ts"],"sourcesContent":["import type * as api from \"@ckb-lumos/base\";\n/**\n * @see https://github.com/nervosnetwork/ckb/blob/develop/protocol/src/protocol.fbs for more infGomation\n */\n/* eslint-disable  @typescript-eslint/no-namespace,  @typescript-eslint/no-explicit-any, @typescript-eslint/ban-types  */\nexport namespace CKBComponents {\n  export type DAO = string;\n  export type Hash = string;\n  export type Number = string;\n  export type Hash256 = string;\n  export type UInt32 = number;\n  export type Index = string;\n  export type Version = string;\n  export type Count = string;\n  export type Difficulty = string;\n  export type BlockNumber = string;\n  export type EpochInHeader = string;\n  export type Capacity = string;\n  export type ProposalShortId = string;\n  export type Timestamp = string;\n  export type Nonce = string;\n  export type Cycles = string;\n  export type Size = string;\n  export type OutputsValidator = \"default\" | \"passthrough\" | undefined;\n  export type RationalU256 = Record<\"denom\" | \"numer\", string>;\n  export type ProposalWindow = Record<\"closest\" | \"farthest\", BlockNumber>;\n  export type EpochNumberWithFraction = string;\n  export enum TransactionStatus {\n    Pending = \"pending\",\n    Proposed = \"proposed\",\n    Committed = \"committed\",\n  }\n\n  export type ScriptHashType = \"data\" | \"type\" | \"data1\";\n\n  export type DepType = \"code\" | \"depGroup\";\n  export type JsonBytes = string;\n\n  /**\n   * @typedef Bytes, keep consistent with CKB\n   * @description Bytes will be serialized to string\n   * @see https://github.com/nervosnetwork/ckb/blob/develop/util/jsonrpc-types/src/blockchain.rs#L19\n   */\n  export type Bytes = string;\n  export type Since = string;\n  export interface Node {\n    url: string;\n    httpAgent?: any;\n    httpsAgent?: any;\n  }\n  export interface Method {\n    name: string;\n    method: string;\n    paramsFormatters: Function[];\n    resultFormatters?: Function;\n  }\n  /**\n   * RPC Units\n   */\n  export type Witness = Bytes;\n\n  export type Script = api.Script;\n  export type CellInput = api.Input;\n  export type CellOutput = api.Output;\n  export type Cell = CellOutput;\n  export type OutPoint = api.OutPoint;\n  export type CellDep = api.CellDep;\n  export type RawTransaction = api.RawTransaction & { witnesses: Witness[] };\n  export type Transaction = Required<api.Transaction>;\n  export type TransactionWithStatus = api.TransactionWithStatus;\n  export type BlockHeader = api.Header;\n  export type Block = api.Block;\n  export type UncleBlock = api.UncleBlock;\n  export type LiveCell = api.LiveCell;\n  export type AlertMessage = api.AlertMessage;\n  export type BlockchainInfo = api.ChainInfo;\n  export type LocalNodeInfo = api.LocalNode;\n  export type RemoteNodeInfo = api.RemoteNode;\n  export type TxPoolInfo = api.TxPoolInfo;\n  export type Epoch = api.Epoch;\n  export type RunDryResult = api.DryRunResult;\n  export type BannedAddress = api.BannedAddr;\n  export type WitnessArgs = api.WitnessArgs;\n  export type BlockEconomicState = api.BlockEconomicState;\n  export type SyncState = api.SyncState;\n  export type TransactionProof = api.TransactionProof;\n  export type TxVerbosity = api.TxVerbosity;\n  export type TxPoolVerbosity = api.TxPoolVerbosity;\n  export type RawTxPool = api.RawTxPool;\n  export type Consensus = api.Consensus;\n  export type QueryOptions = api.QueryOptions;\n\n  export interface TransactionPoint {\n    blockNumber: BlockNumber;\n    index: Index;\n    txHash: Hash256;\n  }\n  export interface TransactionByLockHash {\n    consumedBy: undefined | TransactionPoint;\n    createdBy: TransactionPoint;\n  }\n\n  export type TransactionsByLockHash = TransactionByLockHash[];\n\n  export interface FeeRate {\n    feeRate: string;\n  }\n  export interface CellIncludingOutPoint {\n    blockHash: Hash256;\n    capacity: Capacity;\n    lock: Script;\n    outPoint: OutPoint;\n    cellbase: boolean;\n    outputDataLen: string;\n  }\n\n  export type TransactionTrace = {\n    action: string;\n    info: string;\n    time: Timestamp;\n  }[];\n\n  export enum CellStatus {\n    Live = \"live\",\n    Unknown = \"unknown\",\n  }\n\n  export interface LiveCellByLockHash {\n    cellOutput: CellOutput;\n    createdBy: TransactionPoint;\n    cellbase: boolean;\n    outputDataLen: string;\n  }\n\n  export type LiveCellsByLockHash = LiveCellByLockHash[];\n\n  export interface PeersState {\n    lastUpdated: string;\n    blocksInFlight: string;\n    peer: string;\n  }\n\n  export interface LockHashIndexState {\n    blockHash: Hash256;\n    blockNumber: BlockNumber;\n    lockHash: Hash256;\n  }\n\n  export type LockHashIndexStates = LockHashIndexState[];\n\n  export type BannedAddresses = BannedAddress[];\n\n  export interface CellbaseOutputCapacityDetails {\n    primary: string;\n    proposalReward: string;\n    secondary: string;\n    total: string;\n    txFee: string;\n  }\n\n  export interface RawTransactionToSign\n    extends Omit<RawTransaction, \"witnesses\"> {\n    witnesses: (WitnessArgs | Witness)[];\n  }\n\n  export interface CapacityByLockHash {\n    blockNumber: BlockNumber;\n    capacity: Capacity;\n    cellsCount: string;\n  }\n\n  export type TxPoolIds = Record<\"pending\" | \"proposed\", Array<Hash256>>;\n  export interface Tip {\n    blockNumber: BlockNumber;\n    blockHash: Hash256;\n  }\n\n  export type ScriptType = \"type\" | \"lock\";\n  export type Order = \"asc\" | \"desc\";\n  export type IOType = \"input\" | \"output\" | \"both\";\n\n  export interface IndexerCell {\n    blockNumber: BlockNumber;\n    outPoint: OutPoint;\n    output: {\n      capacity: Capacity;\n      lock: Script;\n      type?: Script;\n    };\n    outputData: string;\n    txIndex: string;\n  }\n\n  export interface IndexerCellWithoutData\n    extends Omit<IndexerCell, \"outputData\"> {\n    outputData: null;\n  }\n\n  export interface GetCellsResult<WithData extends boolean = true> {\n    lastCursor: string;\n    objects: WithData extends true ? IndexerCell[] : IndexerCellWithoutData[];\n  }\n\n  export type IndexerTransaction<Goruped extends boolean = false> =\n    Goruped extends true\n      ? GroupedIndexerTransaction\n      : UngroupedIndexerTransaction;\n\n  export type UngroupedIndexerTransaction = {\n    txHash: Hash256;\n    blockNumber: BlockNumber;\n    ioIndex: Number;\n    ioType: IOType;\n    txIndex: Number;\n  };\n\n  export type GroupedIndexerTransaction = {\n    txHash: Hash256;\n    blockNumber: BlockNumber;\n    txIndex: Number;\n    cells: Array<[IOType, Number]>;\n  };\n\n  export interface GetTransactionsResult<Goruped extends boolean = false> {\n    lastCursor: Hash256;\n    objects: IndexerTransaction<Goruped>[];\n  }\n\n  export interface CKBIndexerQueryOptions extends QueryOptions {\n    outputDataLenRange?: HexadecimalRange;\n    outputCapacityRange?: HexadecimalRange;\n    scriptLenRange?: HexadecimalRange;\n    bufferSize?: number;\n    withData?: boolean;\n    groupByTransaction?: boolean;\n  }\n\n  export type HexadecimalRange = [string, string];\n  export interface SearchFilter {\n    script?: Script;\n    scriptLenRange?: HexadecimalRange;\n    outputDataLenRange?: HexadecimalRange; //empty\n    outputCapacityRange?: HexadecimalRange; //empty\n    blockRange?: HexadecimalRange; //fromBlock-toBlock\n  }\n  export interface SearchKey {\n    script: Script;\n    scriptType: ScriptType;\n    filter?: SearchFilter;\n  }\n  export interface GetLiveCellsResult<WithData extends boolean = true> {\n    lastCursor: string;\n    objects: WithData extends true ? IndexerCell[] : IndexerCellWithoutData[];\n  }\n\n  export interface GetCellsSearchKey<WithData extends boolean = boolean>\n    extends SearchKey {\n    withData?: WithData;\n  }\n\n  export interface GetTransactionsSearchKey<Group extends boolean = boolean>\n    extends SearchKey {\n    groupByTransaction?: Group;\n  }\n\n  export interface CellsCapacity {\n    capacity: Capacity;\n    blockHash: Hash256;\n    blockNumber: BlockNumber;\n  }\n}\n"],"mappings":";;;;;;;AACA;AACA;AACA;;AACA;;;;;MAuBcA,iB;;aAAAA,iB;IAAAA,iB;IAAAA,iB;IAAAA,iB;KAAAA,iB,KAAAA,iB;;;MA+FAC,U;;aAAAA,U;IAAAA,U;IAAAA,U;KAAAA,U,KAAAA,U;;;GArHGC,a,6BAAAA,a"}