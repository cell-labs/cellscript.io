{"version":3,"file":"rpc.js","names":["TransactionStatus","RPC"],"sources":["../../src/types/rpc.ts"],"sourcesContent":["/**\n * @see https://github.com/nervosnetwork/ckb/blob/develop/util/jsonrpc-types/src/blockchain.rs\n */\nimport { CKBComponents } from \"./api\";\n\n/* eslint-disable  @typescript-eslint/no-namespace */\nexport namespace RPC {\n  export type ProposalShortId = CKBComponents.ProposalShortId;\n  export type Number = CKBComponents.Number;\n  export type UInt32 = CKBComponents.UInt32;\n  export type Count = CKBComponents.Count;\n  export type DAO = CKBComponents.DAO;\n  export type Hash = CKBComponents.Hash;\n  export type Hash256 = CKBComponents.Hash256;\n  export type Version = CKBComponents.Version;\n  export type Capacity = CKBComponents.Capacity;\n  export type Witness = CKBComponents.Witness;\n  export type Bytes = CKBComponents.Bytes;\n  export type Index = CKBComponents.Index;\n  export type Since = CKBComponents.Since;\n  export type Timestamp = CKBComponents.Timestamp;\n  export type BlockNumber = CKBComponents.BlockNumber;\n  export type EpochInHeader = string;\n  export type Difficulty = CKBComponents.Difficulty;\n  export type Cycles = CKBComponents.Cycles;\n  export type Size = CKBComponents.Size;\n  export type RationalU256 = CKBComponents.RationalU256;\n  export type ProposalWindow = CKBComponents.ProposalWindow;\n  export type EpochNumberWithFraction = CKBComponents.EpochNumberWithFraction;\n  export type JsonBytes = CKBComponents.JsonBytes;\n  export type IOType = CKBComponents.IOType;\n\n  export enum TransactionStatus {\n    Pending = \"pending\",\n    Proposed = \"proposed\",\n    Committed = \"committed\",\n  }\n\n  export type ScriptHashType = CKBComponents.ScriptHashType;\n\n  export type DepType = \"code\" | \"dep_group\";\n\n  export interface Script {\n    args: Bytes;\n    code_hash: Hash256;\n    hash_type: ScriptHashType;\n  }\n\n  export interface OutPoint {\n    tx_hash: Hash256;\n    index: Index;\n  }\n\n  export interface CellInput {\n    previous_output: OutPoint;\n    since: Since;\n  }\n\n  export interface CellOutput {\n    capacity: Capacity;\n    lock: Script;\n    type?: Script | undefined;\n  }\n\n  export type Cell = CellOutput;\n\n  export interface LiveCell {\n    data: {\n      content: Hash;\n      hash: Hash256;\n    };\n    output: CellOutput;\n  }\n\n  export interface CellDep {\n    out_point: OutPoint;\n    dep_type: DepType;\n  }\n\n  export interface CellIncludingOutPoint {\n    block_hash: Hash256;\n    capacity: Capacity;\n    lock: Script;\n    out_point: OutPoint;\n    cellbase: boolean;\n    output_data_len: string;\n  }\n\n  export interface RawTransaction {\n    version: Version;\n    cell_deps: CellDep[];\n    header_deps: Hash256[];\n    inputs: CellInput[];\n    outputs: CellOutput[];\n    witnesses: Witness[];\n    outputs_data: Bytes[];\n  }\n\n  export interface Transaction extends RawTransaction {\n    hash: Hash256;\n  }\n\n  export interface TransactionWithStatus {\n    transaction: Transaction;\n    tx_status:\n      | {\n          block_hash: Hash256;\n          status: TransactionStatus.Committed;\n        }\n      | {\n          block_hash: undefined;\n          status: TransactionStatus.Pending | TransactionStatus.Proposed;\n        };\n  }\n\n  export interface TransactionPoint {\n    block_number: BlockNumber;\n    index: Index;\n    tx_hash: Hash256;\n  }\n\n  export interface TransactionByLockHash {\n    consumed_by: undefined | TransactionPoint;\n    created_by: TransactionPoint;\n  }\n  export type TransactionsByLockHash = TransactionByLockHash[];\n\n  export interface LiveCellByLockHash {\n    cell_output: CellOutput;\n    created_by: TransactionPoint;\n    cellbase: boolean;\n    output_data_len: string;\n  }\n  export type LiveCellsByLockHash = LiveCellByLockHash[];\n\n  export interface Header {\n    compact_target: Hash;\n    dao: DAO;\n    epoch: EpochInHeader;\n    hash: Hash256;\n    number: BlockNumber;\n    parent_hash: Hash256;\n    proposals_hash: Hash256;\n    nonce: CKBComponents.Nonce;\n    timestamp: Timestamp;\n    transactions_root: Hash256;\n    extra_hash: Hash256;\n    version: Version;\n  }\n\n  export interface UncleBlock {\n    header: Header;\n    proposals: ProposalShortId[];\n  }\n\n  export interface Block {\n    header: Header;\n    uncles: UncleBlock[];\n    transactions: Transaction[];\n    proposals: ProposalShortId[];\n    extension?: JsonBytes | undefined;\n  }\n\n  export interface AlertMessage {\n    id: string;\n    priority: string;\n    notice_until: Timestamp;\n    message: string;\n  }\n\n  export interface BlockchainInfo {\n    is_initial_block_download: boolean;\n    epoch: string;\n    difficulty: string;\n    median_time: string;\n    chain: string;\n    alerts: AlertMessage[];\n  }\n\n  export interface LocalNodeInfo {\n    active: boolean;\n    addresses: Record<\"address\" | \"score\", string>[];\n    connections: string;\n    node_id: string;\n    protocols: { id: string; name: string; support_versions: string[] }[];\n    version: string;\n  }\n\n  export interface RemoteNodeInfo {\n    addresses: Record<\"address\" | \"score\", string>[];\n    connected_duration: string;\n    is_outbound: boolean;\n    last_ping_duration: string;\n    node_id: string;\n    protocols: Record<\"id\" | \"version\", string>[];\n    sync_state: Record<\n      | \"best_known_header_hash\"\n      | \"best_known_header_number\"\n      | \"can_fetch_count\"\n      | \"inflight_count\"\n      | \"last_common_header_hash\"\n      | \"last_common_header_number\"\n      | \"unknown_header_list_size\",\n      string | undefined\n    >;\n    version: string;\n  }\n\n  export interface PeersState {\n    last_updated: string;\n    blocks_in_flight: string;\n    peer: string;\n  }\n\n  export interface TxPoolInfo {\n    last_txs_updated_at: Timestamp;\n    min_fee_rate: string;\n    orphan: Count;\n    pending: Count;\n    proposed: Count;\n    tip_hash: Hash256;\n    tip_number: BlockNumber;\n    total_tx_cycles: Cycles;\n    total_tx_size: Size;\n  }\n\n  export interface Epoch {\n    compact_target: Hash;\n    length: string;\n    number: string;\n    start_number: string;\n  }\n\n  export interface LockHashIndexState {\n    block_hash: Hash256;\n    block_number: BlockNumber;\n    lock_hash: Hash256;\n  }\n\n  export type LockHashIndexStates = LockHashIndexState[];\n\n  export interface BannedAddress {\n    address: string;\n    ban_reason: string;\n    ban_until: Timestamp;\n    created_at: Timestamp;\n  }\n  export type BannedAddresses = BannedAddress[];\n\n  export interface CellbaseOutputCapacityDetails {\n    primary: string;\n    proposal_reward: string;\n    secondary: string;\n    total: string;\n    tx_fee: string;\n  }\n\n  export interface FeeRate {\n    fee_rate: string;\n  }\n\n  export interface CapacityByLockHash {\n    block_number: BlockNumber;\n    capacity: Capacity;\n    cells_count: string;\n  }\n\n  export interface BlockEconomicState {\n    finalized_at: string;\n    issuance: {\n      primary: string;\n      secondary: string;\n    };\n    miner_reward: {\n      committed: string;\n      primary: string;\n      proposal: string;\n      secondary: string;\n    };\n    txs_fee: string;\n  }\n\n  export interface SyncState {\n    best_known_block_number: string;\n    best_known_block_timestamp: string;\n    fast_time: string;\n    ibd: boolean;\n    inflight_blocks_count: string;\n    low_time: string;\n    normal_time: string;\n    orphan_blocks_count: string;\n  }\n\n  export interface TransactionProof {\n    block_hash: Hash;\n    proof: {\n      indices: string[];\n      lemmas: Hash[];\n    };\n    witnesses_root: Hash;\n  }\n\n  export type TxPoolIds = Record<\"pending\" | \"proposed\", Array<Hash256>>;\n\n  export interface TxVerbosity {\n    cycles: Cycles;\n    size: Size;\n    fee: Capacity;\n    ancestors_size: Size;\n    ancestors_cycles: Cycles;\n    ancestors_count: Count;\n  }\n\n  export type TxPoolVerbosity = Record<\n    \"pending\" | \"proposed\",\n    Record<Hash256, TxVerbosity>\n  >;\n\n  export type RawTxPool = TxPoolIds | TxPoolVerbosity;\n\n  export interface Consensus {\n    id: string;\n    genesis_hash: Hash256;\n    hardfork_features: Array<{ rfc: string; epoch_number: string | undefined }>;\n    dao_type_hash: Hash256 | undefined;\n    secp256k1_blake160_sighash_all_type_hash: Hash256 | undefined;\n    secp256k1_blake160_multisig_all_type_hash: Hash256 | undefined;\n    initial_primary_epoch_reward: Capacity;\n    secondary_epoch_reward: Capacity;\n    max_uncles_num: string;\n    orphan_rate_target: RationalU256;\n    epoch_duration_target: string;\n    tx_proposal_window: ProposalWindow;\n    proposer_reward_ratio: RationalU256;\n    cellbase_maturity: EpochNumberWithFraction;\n    median_time_block_count: Count;\n    max_block_cycles: Cycles;\n    max_block_bytes: string;\n    block_version: Version;\n    tx_version: Version;\n    type_id_code_hash: Hash256;\n    max_block_proposals_limit: string;\n    primary_epoch_reward_halving_interval: string;\n    permanent_difficulty_in_dummy: boolean;\n  }\n\n  export interface Tip {\n    block_hash: Hash256;\n    block_number: BlockNumber;\n  }\n\n  export interface IndexerCell {\n    block_number: BlockNumber;\n    out_point: OutPoint;\n    output: CellOutput;\n    output_data: string;\n    tx_index: string;\n  }\n\n  export type IndexerTransaction<Goruped extends boolean = false> =\n    Goruped extends true\n      ? GroupedIndexerTransaction\n      : UngroupedIndexerTransaction;\n  export interface UngroupedIndexerTransaction {\n    tx_hash: Hash256;\n    block_number: BlockNumber;\n    io_index: string;\n    io_type: IOType;\n    tx_index: string;\n  }\n\n  export interface GroupedIndexerTransaction {\n    tx_hash: Hash256;\n    block_number: BlockNumber;\n    tx_index: string;\n    cells: Array<[IOType, string]>;\n  }\n\n  export interface GetTransactionsResult<Goruped extends boolean = false> {\n    last_cursor: Hash256;\n    objects: IndexerTransaction<Goruped>[];\n  }\n\n  export interface GetLiveCellsResult {\n    last_cursor: Hash256;\n    objects: IndexerCell[];\n  }\n\n  export interface CellsCapacity {\n    capacity: Capacity;\n    block_hash: Hash256;\n    block_number: BlockNumber;\n  }\n\n  export type HexadecimalRange = [string, string];\n  export type ScriptType = \"type\" | \"lock\";\n\n  export interface SearchFilter {\n    script?: Script;\n    output_data_len_range?: HexadecimalRange; //empty\n    output_capacity_range?: HexadecimalRange; //empty\n    block_range?: HexadecimalRange; //fromBlock-toBlock\n    script_len_range?: HexadecimalRange;\n  }\n  export interface SearchKey {\n    script: Script;\n    script_type: ScriptType;\n    filter?: SearchFilter;\n  }\n  export interface GetCellsSearchKey extends SearchKey {\n    with_data?: boolean;\n  }\n\n  export interface GetTransactionsSearchKey extends SearchKey {\n    group_by_transaction?: boolean;\n  }\n}\n/* eslint-enable camelcase */\n"],"mappings":";;;;;;;AAAA;AACA;AACA;;AAGA;;AA4ZA;;;;;MAjYcA,iB;;aAAAA,iB;IAAAA,iB;IAAAA,iB;IAAAA,iB;KAAAA,iB,KAAAA,iB;;;GA1BGC,G,mBAAAA,G"}