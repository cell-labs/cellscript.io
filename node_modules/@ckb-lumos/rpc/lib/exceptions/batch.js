"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PayloadInBatchException = exports.MethodInBatchNotFoundException = exports.IdNotMatchedInBatchException = void 0;

var _ErrorCode = _interopRequireDefault(require("./ErrorCode"));

var _rpc = require("./rpc");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ERROR_LABEL = "Batch Request";

class MethodInBatchNotFoundException extends Error {
  code = _ErrorCode.default.MethodNotFound;

  constructor(name) {
    super(`[${ERROR_LABEL}]: Method ${name} is not found`);
  }

}

exports.MethodInBatchNotFoundException = MethodInBatchNotFoundException;

class PayloadInBatchException extends Error {
  code = _ErrorCode.default.PayloadMessage;

  constructor(index, message) {
    super(`[${ERROR_LABEL} ${index}]: ${message}`);
    this.index = index;
  }

}

exports.PayloadInBatchException = PayloadInBatchException;

class IdNotMatchedInBatchException extends _rpc.IdNotMatchException {
  constructor(index, requestId, responseId) {
    super(requestId, responseId);
    this.message = `[${ERROR_LABEL} ${index}]: ${this.message}`;
    this.index = index;
  }

}

exports.IdNotMatchedInBatchException = IdNotMatchedInBatchException;
var _default = {
  MethodInBatchNotFoundException,
  PayloadInBatchException,
  IdNotMatchedInBatchException
};
exports.default = _default;
//# sourceMappingURL=batch.js.map