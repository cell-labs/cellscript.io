"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.StringHashTypeException = exports.PageSizeTooSmallException = exports.PageSizeTooLargeException = exports.OutputsValidatorTypeException = exports.HexStringWithout0xException = exports.BigintOrHexStringTypeException = void 0;

var _ErrorCode = _interopRequireDefault(require("./ErrorCode"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line import/no-named-as-default
class PageSizeTooLargeException extends RangeError {
  code = _ErrorCode.default.ParameterInvalid;

  constructor(pageSize, maxSize) {
    super(`Expect page size to be at most ${maxSize}, but ${pageSize} received`);
  }

}

exports.PageSizeTooLargeException = PageSizeTooLargeException;

class PageSizeTooSmallException extends RangeError {
  code = _ErrorCode.default.ParameterInvalid;

  constructor(pageSize, minSize) {
    super(`Expect page size to be at least ${minSize}, but ${pageSize} received`);
  }

}

exports.PageSizeTooSmallException = PageSizeTooSmallException;

class OutputsValidatorTypeException extends TypeError {
  code = _ErrorCode.default.ParameterInvalid;

  constructor() {
    super(`Expect outputs validator to be 'default' or 'passthrough'`);
  }

}
/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types */


exports.OutputsValidatorTypeException = OutputsValidatorTypeException;

class BigintOrHexStringTypeException extends TypeError {
  code = _ErrorCode.default.ParameterInvalid;

  constructor(value) {
    super(`Expect number to be bigint or hex string, but ${value} received`);
  }

}

exports.BigintOrHexStringTypeException = BigintOrHexStringTypeException;

class StringHashTypeException extends TypeError {
  code = _ErrorCode.default.ParameterInvalid;

  constructor(hash) {
    super(`Expect hash to be string, but ${hash} received`);
  }

}
/* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types */


exports.StringHashTypeException = StringHashTypeException;

class HexStringWithout0xException extends Error {
  code = _ErrorCode.default.ParameterInvalid;

  constructor(hex) {
    super(`Hex string ${hex} should start with 0x`);
  }

}

exports.HexStringWithout0xException = HexStringWithout0xException;
var _default = {
  PageSizeTooLargeException,
  PageSizeTooSmallException,
  OutputsValidatorTypeException,
  BigintOrHexStringTypeException,
  StringHashTypeException,
  HexStringWithout0xException
};
exports.default = _default;
//# sourceMappingURL=formatter.js.map