{"version":3,"file":"formatter.js","names":["PageSizeTooLargeException","RangeError","code","ErrorCode","ParameterInvalid","constructor","pageSize","maxSize","PageSizeTooSmallException","minSize","OutputsValidatorTypeException","TypeError","BigintOrHexStringTypeException","value","StringHashTypeException","hash","HexStringWithout0xException","Error","hex"],"sources":["../../src/exceptions/formatter.ts"],"sourcesContent":["// eslint-disable-next-line import/no-named-as-default\nimport ErrorCode from \"./ErrorCode\";\n\nexport class PageSizeTooLargeException extends RangeError {\n  code = ErrorCode.ParameterInvalid;\n\n  constructor(pageSize: bigint | string, maxSize: number) {\n    super(\n      `Expect page size to be at most ${maxSize}, but ${pageSize} received`\n    );\n  }\n}\n\nexport class PageSizeTooSmallException extends RangeError {\n  code = ErrorCode.ParameterInvalid;\n\n  constructor(pageSize: bigint | string, minSize: number) {\n    super(\n      `Expect page size to be at least ${minSize}, but ${pageSize} received`\n    );\n  }\n}\n\nexport class OutputsValidatorTypeException extends TypeError {\n  code = ErrorCode.ParameterInvalid;\n\n  constructor() {\n    super(`Expect outputs validator to be 'default' or 'passthrough'`);\n  }\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types */\nexport class BigintOrHexStringTypeException extends TypeError {\n  code = ErrorCode.ParameterInvalid;\n\n  constructor(value: any) {\n    super(`Expect number to be bigint or hex string, but ${value} received`);\n  }\n}\n\nexport class StringHashTypeException extends TypeError {\n  code = ErrorCode.ParameterInvalid;\n\n  constructor(hash: any) {\n    super(`Expect hash to be string, but ${hash} received`);\n  }\n}\n/* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types */\nexport class HexStringWithout0xException extends Error {\n  code = ErrorCode.ParameterInvalid;\n\n  constructor(hex: string) {\n    super(`Hex string ${hex} should start with 0x`);\n  }\n}\n\nexport default {\n  PageSizeTooLargeException,\n  PageSizeTooSmallException,\n  OutputsValidatorTypeException,\n  BigintOrHexStringTypeException,\n  StringHashTypeException,\n  HexStringWithout0xException,\n};\n"],"mappings":";;;;;;;AACA;;;;AADA;AAGO,MAAMA,yBAAN,SAAwCC,UAAxC,CAAmD;EACxDC,IAAI,GAAGC,kBAAA,CAAUC,gBAAb;;EAEJC,WAAW,CAACC,QAAD,EAA4BC,OAA5B,EAA6C;IACtD,MACG,kCAAiCA,OAAQ,SAAQD,QAAS,WAD7D;EAGD;;AAPuD;;;;AAUnD,MAAME,yBAAN,SAAwCP,UAAxC,CAAmD;EACxDC,IAAI,GAAGC,kBAAA,CAAUC,gBAAb;;EAEJC,WAAW,CAACC,QAAD,EAA4BG,OAA5B,EAA6C;IACtD,MACG,mCAAkCA,OAAQ,SAAQH,QAAS,WAD9D;EAGD;;AAPuD;;;;AAUnD,MAAMI,6BAAN,SAA4CC,SAA5C,CAAsD;EAC3DT,IAAI,GAAGC,kBAAA,CAAUC,gBAAb;;EAEJC,WAAW,GAAG;IACZ,MAAO,2DAAP;EACD;;AAL0D;AAQ7D;;;;;AACO,MAAMO,8BAAN,SAA6CD,SAA7C,CAAuD;EAC5DT,IAAI,GAAGC,kBAAA,CAAUC,gBAAb;;EAEJC,WAAW,CAACQ,KAAD,EAAa;IACtB,MAAO,iDAAgDA,KAAM,WAA7D;EACD;;AAL2D;;;;AAQvD,MAAMC,uBAAN,SAAsCH,SAAtC,CAAgD;EACrDT,IAAI,GAAGC,kBAAA,CAAUC,gBAAb;;EAEJC,WAAW,CAACU,IAAD,EAAY;IACrB,MAAO,iCAAgCA,IAAK,WAA5C;EACD;;AALoD;AAOvD;;;;;AACO,MAAMC,2BAAN,SAA0CC,KAA1C,CAAgD;EACrDf,IAAI,GAAGC,kBAAA,CAAUC,gBAAb;;EAEJC,WAAW,CAACa,GAAD,EAAc;IACvB,MAAO,cAAaA,GAAI,uBAAxB;EACD;;AALoD;;;eAQxC;EACblB,yBADa;EAEbQ,yBAFa;EAGbE,6BAHa;EAIbE,8BAJa;EAKbE,uBALa;EAMbE;AANa,C"}