"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _paramsFormatter = require("../paramsFormatter");

var resultFmts = _interopRequireWildcard(require("../resultFormatter"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _default = {
  localNodeInfo: {
    method: "local_node_info",
    paramsFormatters: [],
    resultFormatters: resultFmts.toLocalNodeInfo
  },
  getPeers: {
    method: "get_peers",
    paramsFormatters: [],
    resultFormatters: resultFmts.toPeers
  },
  getBannedAddresses: {
    method: "get_banned_addresses",
    paramsFormatters: [],
    resultFormatters: resultFmts.toBannedAddresses
  },
  clearBannedAddresses: {
    method: "clear_banned_addresses",
    paramsFormatters: []
  },
  setBan: {
    method: "set_ban",
    paramsFormatters: []
  },
  syncState: {
    method: "sync_state",
    paramsFormatters: [],
    resultFormatters: resultFmts.toSyncState
  },
  setNetworkActive: {
    method: "set_network_active",
    paramsFormatters: [_paramsFormatter.formatter.toBoolean]
  },
  addNode: {
    method: "add_node",
    paramsFormatters: []
  },
  removeNode: {
    method: "remove_node",
    paramsFormatters: []
  },
  pingPeers: {
    method: "ping_peers",
    paramsFormatters: []
  }
};
exports.default = _default;
//# sourceMappingURL=net.js.map