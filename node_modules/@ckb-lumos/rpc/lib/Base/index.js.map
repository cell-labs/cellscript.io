{"version":3,"file":"index.js","names":["rpcProperties","chainRpc","experimentalRpc","indexerRpc","netRpc","poolRpc","statsRpc","Base"],"sources":["../../src/Base/index.ts"],"sourcesContent":["import chainRpc from \"./chain\";\nimport experimentalRpc from \"./experimental\";\nimport netRpc from \"./net\";\nimport poolRpc from \"./pool\";\nimport statsRpc from \"./stats\";\nimport indexerRpc from \"./indexer\";\nimport { CKBComponents } from \"../types/api\";\n\nexport interface RpcPropertes {\n  [name: string]: Omit<CKBComponents.Method, \"name\">;\n}\n\nexport const rpcProperties: RpcPropertes = {\n  ...chainRpc,\n  ...experimentalRpc,\n  ...indexerRpc,\n  // skip minerRpc\n  ...netRpc,\n  ...poolRpc,\n  ...statsRpc,\n  // skip subscription\n};\n\nexport interface Base {\n  /* Chain */\n\n  /**\n   * @method getTipBlockNumber\n   * @memberof DefaultRPC\n   * @description rpc to get the number of blocks in the longest blockchain\n   * @return {Promise<string>} block number\n   */\n  getTipBlockNumber: () => Promise<CKBComponents.BlockNumber>;\n\n  /**\n   * @method getTipHeader\n   * @memberof DefaultRPC\n   * @description rpc to get the tip header of the longeest blockchain\n   * @return {Promise<object>} block header\n   */\n  getTipHeader: () => Promise<CKBComponents.BlockHeader>;\n\n  /**\n   * @method getCurrentEpoch\n   * @memberof DefaultRPC\n   * @description rpc to get the epoch info about the current epoch\n   * @return {Promise<object>} epoch info, including block reward, difficulty, last_block_hash_in_previous_epoch,\n   *                           length, number, remainder reward, start number\n   */\n  getCurrentEpoch: () => Promise<CKBComponents.Epoch>;\n\n  /**\n   * @method getEpochByNumber\n   * @memberof DefaultRPC\n   * @description rpc to get the epoch info by its number\n   * @return {Promise<object>} epoch info\n   */\n  getEpochByNumber: (epoch: string | bigint) => Promise<CKBComponents.Epoch>;\n\n  /**\n   * @method getBlockHash\n   * @memberof DefaultRPC\n   * @description rpc to get the block hash by block number\n   * @param {string} hash - block hash\n   * @return {Promise<string>} block hash\n   */\n  getBlockHash: (\n    number: CKBComponents.BlockNumber | bigint\n  ) => Promise<CKBComponents.Hash>;\n\n  /**\n   * @method getBlock\n   * @memberof DefaultRPC\n   * @description rpc to get block by its hash\n   * @param {string} hash - the block hash of the target block\n   * @returns {Promise<object>} block object\n   */\n  getBlock: (hash: CKBComponents.Hash) => Promise<CKBComponents.Block>;\n\n  /**\n   * @method getHeader\n   * @memberof DefaultRPC\n   * @description Returns the information about a block header by hash.\n   * @params {Promise<string>} block hash\n   */\n  getHeader: (\n    blockHash: CKBComponents.Hash\n  ) => Promise<CKBComponents.BlockHeader>;\n\n  /**\n   * @method getHeaderByNumber\n   * @memberof DefaultRPC\n   * @description Returns the information about a block header by block number\n   * @params {Promise<string>} block number\n   */\n  getHeaderByNumber: (\n    blockNumber: CKBComponents.BlockNumber | bigint\n  ) => Promise<CKBComponents.BlockHeader>;\n\n  /**\n   * @method getLiveCell\n   * @memberof DefaultRPC\n   * @description rpc to get a cell by outPoint, the meaning of outPoint could be found in ckb-types,\n   *              please distinguish outPoint and cellOutPoint\n   * @param {object} outPoint - cell's outPoint\n   * @param {boolean} withData - set withData to true to return cell data and data hash if the cell is live\n   * @return {Promise<object>} liveCellWithStatus\n   */\n  getLiveCell: (\n    outPoint: CKBComponents.OutPoint,\n    withData: boolean\n  ) => Promise<{\n    cell: CKBComponents.LiveCell;\n    status: CKBComponents.CellStatus;\n  }>;\n\n  /**\n   * @method getTransaction\n   * @memberof DefaultRPC\n   * @description rpc to get trasnaction wtih its status by its hash\n   * @param {string} hash - the transaction hash of the target transaction\n   * @return {Promise<object>} transaction object with transaction status\n   */\n  getTransaction: (\n    hash: CKBComponents.Hash\n  ) => Promise<CKBComponents.TransactionWithStatus>;\n\n  /**\n   * @method getCellbaseOutputCapacityDetails\n   * @memberof DefaultRPC\n   * @description Returns each component of the created CKB in this block's cellbase, which is issued to\n   *              a block N - 1 - ProposalWindow.farthest, where this block's height is N.\n   * @param {string} blockHash\n   *\n   * @deprecated will be removed from v0.41.0\n   */\n  getCellbaseOutputCapacityDetails: (\n    blockHash: CKBComponents.Hash\n  ) => Promise<CKBComponents.CellbaseOutputCapacityDetails>;\n\n  /**\n   * @method getBlockEconomicState\n   * @memberof DefaultRPC\n   * @description\n   * @param {string} blockHash\n   * @returns {Promise<BlockEconomicState>}\n   */\n  getBlockEconomicState: (\n    blockHash: CKBComponents.Hash\n  ) => Promise<CKBComponents.BlockEconomicState>;\n\n  /**\n   * @method getTransactionProof\n   * @memberof DefaultRPC\n   * @description request merkle proof that transactions are included in a block\n   * @param {Array<string>} transactionHashes - transaction hashes, all transactions must be in the same block\n   * @param {Promise<[string]>} blockHash - if specified, looks for transactions in the block with this hash\n   */\n  getTransactionProof: (\n    transactionHashes: CKBComponents.Hash[],\n    blockHash?: CKBComponents.Hash\n  ) => Promise<CKBComponents.TransactionProof>;\n\n  /**\n   * @method verifyTransactionProof\n   * @memberof DefaultRPC\n   * @description verifies that a proof points to transactions in a block, returns transactions it commits to.\n   * @param {object} transactionProof\n   * @returns {Promise<Array<string>>} hash list of transactions committed in the block\n   */\n  verifyTransactionProof: (\n    transactionProof: CKBComponents.TransactionProof\n  ) => Promise<CKBComponents.Hash[]>;\n\n  /**\n   * @method getConsensus\n   * @memberof DefaultRPC\n   * @description return various consensus parameters.\n   * @returns {Promise<object>} consensus parameters\n   */\n  getConsensus: () => Promise<CKBComponents.Consensus>;\n\n  /**\n   * @method getBlockByNumber\n   * @memberof DefaultRPC\n   * @description rpc to get block by its number\n   * @param {string} number - the block number of the target block\n   * @returns {Promise<object>} block object\n   */\n  getBlockByNumber: (\n    number: CKBComponents.BlockNumber | bigint\n  ) => Promise<CKBComponents.Block>;\n\n  /* Experimental */\n\n  /**\n   * @method dryRunTransaction\n   * @memberof DefaultRPC\n   * @description dry run the transaction and return the execution cycles, this method will not check the transaction\n   *              validaty, but only run the lock script and type script and then return the execution cycles.\n   * @param {object} rawTrasnaction - the raw transaction whose cycles is going to be calculated\n   * @return {Promise<object>} dry run result, including cycles the transaction used.\n   */\n  dryRunTransaction: (\n    tx: CKBComponents.RawTransaction\n  ) => Promise<CKBComponents.RunDryResult>;\n\n  calculateDaoMaximumWithdraw: (\n    outPoint: CKBComponents.OutPoint,\n    withdrawBlockHash: CKBComponents.Hash256\n  ) => Promise<string>;\n\n  /* skip Miner */\n\n  /* Net */\n\n  /**\n   * @method localNodeInfo\n   * @memberof DefaultRPC\n   * @description rpc to get the local node information\n   * @return {Promise<object>} node info, including addresses, is_outbound, node id, and version\n   */\n  localNodeInfo: () => Promise<CKBComponents.LocalNodeInfo>;\n\n  /**\n   * @method getPeers\n   * @memberof DefaultRPC\n   * @description rpc to get connected peers info\n   * @return {Promise<object[]>} peers' node info\n   *\n   * @deprecated will be removed from v0.41.0\n   */\n  getPeers: () => Promise<CKBComponents.RemoteNodeInfo[]>;\n\n  /**\n   * @method getBannedAddresses\n   * @memberof DefaultRPC\n   * @description Returns all banned IPs/Subnets\n   */\n  getBannedAddresses: () => Promise<CKBComponents.BannedAddresses>;\n\n  /**\n   * @method clearBannedAddresses\n   * @memberof DefaultRPC\n   * @description clear all banned IPs/Subnets\n   * @returns <null>\n   */\n  clearBannedAddresses: () => Promise<null>;\n\n  /**\n   * @method setBan\n   * @memberof DefaultRPC\n   * @description insert or delete an IP/Subnet from the banned list\n   * @param {string} address, The IP/Subnet with an optional netmask (default is /32 = single IP)\n   * @param {insert|delete} command, `insert` to insert an IP/Subnet to the list, `delete` to delete an IP/Subnet\n   *                                 from the list\n   * @param {string|null} ban_time, Time in milliseconds how long (or until when if [absolute] is set) the IP is banned,\n   *                                optional parameter, null means using the default time of 24h\n   * @param {[boolean]} absolute, If set, the `ban_time` must be an absolute timestamp in milliseconds since epoch,\n   *                              optional parameter\n   * @param {[string]} reason, Ban reason, optional parameter\n   */\n\n  setBan: (\n    address: string,\n    command: \"insert\" | \"delete\",\n    banTime: string | null,\n    absolute?: boolean,\n    reason?: string\n  ) => Promise<null>;\n\n  /**\n   * @method syncState\n   * @memberof DefaultRPC\n   * @description return sync state of this node\n   */\n  syncState: () => Promise<CKBComponents.SyncState>;\n\n  /**\n   * @method setNetworkActive\n   * @memberof DefaultRPC\n   * @description disable/enable all p2p network activity\n   * @param {boolean} state - true to enable networking, false to disable\n   */\n  setNetworkActive: (state: boolean) => Promise<null>;\n\n  /**\n   * @method addNode\n   * @memberof DefaultRPC\n   * @description attempt to add a node to the peer list and try to connect\n   * @param {string} peerId - the peer id of target node\n   * @param {string} address - the address of target node\n   * @returns {Promise<null>}\n   */\n  addNode: (peerId: string, address: string) => Promise<null>;\n\n  /**\n   * @method removeNode\n   * @memberof DefaultRPC\n   * @description attempt to remove a node from the peer list and try to disconnect\n   * @param {string} peerId - the peer id of the target node\n   * @returns {Promise<null>}\n   */\n  removeNode: (peerId: string) => Promise<null>;\n\n  /**\n   * @method pingPeers\n   * @memberof DefaultRPC\n   * @description request a ping sent to all connected peers to measure ping time\n   * @returns {Promise<null>}\n   */\n  pingPeers: () => Promise<null>;\n\n  /* Pool */\n\n  /**\n   * @method sendTransaction\n   * @memberof DefaultRPC\n   * @description rpc to send a new transaction into transaction pool\n   * @param {object} rawTransaction - a raw transaction includes cell deps, inputs, outputs, version, and witnesses,\n   *                                  detailed info could be found in ckb-types\n   * @param {string} [outputsValidator] - Validates the transaction outputs before entering the tx-pool,\n   *                                  an optional string parameter (enum: default | passthrough ),\n   *                                  null and passthrough mean skipping outputs validation\n   * @return {Promise<string>} transaction hash\n   */\n  sendTransaction: (\n    tx: CKBComponents.RawTransaction,\n    outputsValidator?: CKBComponents.OutputsValidator\n  ) => Promise<CKBComponents.Hash>;\n\n  /**\n   * @method txPoolInfo\n   * @memberof DefaultRPC\n   * @description rpc to get pool information\n   * @return {Promise<object>} info of transaction pool, including last_txs_updated_at, number of orphan,\n   *                           number of pending, number of proposed\n   */\n  txPoolInfo: () => Promise<CKBComponents.TxPoolInfo>;\n\n  /**\n   * @method clearTxPool\n   * @memberof DefaultRPC\n   * @description remove all transactions from the tx pool\n   * @return {Promise<null>}\n   */\n  clearTxPool: () => Promise<null>;\n\n  /**\n   * @method getRawTxPool\n   * @memberof DefaultRPC\n   * @param {boolean | null} verbose - true for a json object, false for array of transaction ids, default=false\n   * @description Returns all transaction ids in tx pool as a json array of string transaction ids.\n   * @return {Promise<object>} CKBComponents.RawTxPool\n   */\n  getRawTxPool(): Promise<CKBComponents.TxPoolIds>;\n  getRawTxPool(verbose: true): Promise<CKBComponents.TxPoolVerbosity>;\n  getRawTxPool(verbose: false | null): Promise<CKBComponents.TxPoolIds>;\n\n  /* Stats */\n\n  /**\n   * @method getBlockchainInfo\n   * @memberof DefaultRPC\n   * @description rpc to get state info of the blockchain\n   * @return {Promise<object>} blockchain info, including chain name, difficulty, epoch number,\n   *                           is_intial_block_download, median time, warnings\n   */\n  getBlockchainInfo: () => Promise<CKBComponents.BlockchainInfo>;\n\n  /* Indexer */\n\n  /**\n   * @method getIndexerTip\n   * @memberof DefaultRPC\n   * @description rpc to get tip info of the longest blockchain\n   * @return {Promise<object>} tip info, including block number, block hash\n   */\n  getIndexerTip: () => Promise<CKBComponents.Tip>;\n\n  /**\n   * @method getCells\n   * @memberof DefaultRPC\n   * @description rpc to get a cell by script\n   * @param {object} searchKey\n   * @param {string} order - order cells by blocknumber \"asc\" or \"desc\"\n   * @param {string} limit - limit the number of cells returned per call\n   * @param {string} [cursor]\n   * @return {Promise<object>} CKBComponents.GetLiveCellsResult\n   */\n  getCells: <WithData extends boolean = true>(\n    searchKey: CKBComponents.GetCellsSearchKey<WithData>,\n    order: CKBComponents.Order,\n    limit: CKBComponents.Hash | bigint,\n    cursor?: CKBComponents.Hash256\n  ) => Promise<CKBComponents.GetLiveCellsResult<WithData>>;\n\n  /**\n   * @method getTransactions\n   * @memberof DefaultRPC\n   * @description rpc to get a transactions by script\n   * @param {object} searchKey\n   * @param {string} order - order cells by blocknumber \"asc\" or \"desc\"\n   * @param {string} limit - limit the number of cells returned per call\n   * @param {string} [cursor]\n   * @return {Promise<object>} CKBComponents.GetTransactionsResult\n   */\n  getTransactions: <Group extends boolean = false>(\n    searchKey: CKBComponents.GetTransactionsSearchKey<Group>,\n    order: CKBComponents.Order,\n    limit: CKBComponents.Hash | bigint,\n    cursor?: CKBComponents.Hash256\n  ) => Promise<CKBComponents.GetTransactionsResult<Group>>;\n\n  /**\n   * @method getCellsCapacity\n   * @memberof DefaultRPC\n   * @description rpc to get capacities by script\n   * @param {object} searchKey\n   * @return {Promise<object>} CKBComponents.CellsCapacity\n   */\n  getCellsCapacity: (\n    searchKey: CKBComponents.SearchKey\n  ) => Promise<CKBComponents.CellsCapacity>;\n\n  /* skip Subscription */\n}\n\nexport class Base {\n  #rpcProperties: RpcPropertes = rpcProperties;\n\n  get rpcProperties(): RpcPropertes {\n    return this.#rpcProperties;\n  }\n}\n"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAOO,MAAMA,aAA2B,GAAG,EACzC,GAAGC,cADsC;EAEzC,GAAGC,qBAFsC;EAGzC,GAAGC,gBAHsC;EAIzC;EACA,GAAGC,YALsC;EAMzC,GAAGC,aANsC;EAOzC,GAAGC,cAPsC,CAQzC;;AARyC,CAApC;;;AAgaA,MAAMC,IAAN,CAAW;EAChB,CAACP,aAAD,GAA+BA,aAA/B;;EAEiB,IAAbA,aAAa,GAAiB;IAChC,OAAO,KAAK,CAACA,aAAb;EACD;;AALe"}