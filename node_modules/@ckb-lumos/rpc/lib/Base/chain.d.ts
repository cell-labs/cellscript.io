declare const _default: {
    getTipBlockNumber: {
        method: string;
        paramsFormatters: never[];
        resultFormatters: (number: string) => string;
    };
    getTipHeader: {
        method: string;
        paramsFormatters: never[];
        resultFormatters: (header: import("../types/rpc").RPC.Header) => import("@ckb-lumos/base").Header;
    };
    getCurrentEpoch: {
        method: string;
        paramsFormatters: never[];
        resultFormatters: (epoch: import("../types/rpc").RPC.Epoch) => import("@ckb-lumos/base").Epoch;
    };
    getEpochByNumber: {
        method: string;
        paramsFormatters: ((number: string | bigint) => string)[];
        resultFormatters: (epoch: import("../types/rpc").RPC.Epoch) => import("@ckb-lumos/base").Epoch;
    };
    getBlockHash: {
        method: string;
        paramsFormatters: ((number: string | bigint) => string)[];
    };
    getBlock: {
        method: string;
        paramsFormatters: ((hash: string) => string)[];
        resultFormatters: (block: import("../types/rpc").RPC.Block) => import("@ckb-lumos/base").Block;
    };
    getBlockByNumber: {
        method: string;
        paramsFormatters: ((number: string | bigint) => string)[];
        resultFormatters: (block: import("../types/rpc").RPC.Block) => import("@ckb-lumos/base").Block;
    };
    getHeader: {
        method: string;
        paramsFormatters: ((hash: string) => string)[];
        resultFormatters: (header: import("../types/rpc").RPC.Header) => import("@ckb-lumos/base").Header;
    };
    getHeaderByNumber: {
        method: string;
        paramsFormatters: ((number: string | bigint) => string)[];
        resultFormatters: (header: import("../types/rpc").RPC.Header) => import("@ckb-lumos/base").Header;
    };
    getLiveCell: {
        method: string;
        paramsFormatters: ((outPoint: import("@ckb-lumos/base").OutPoint) => import("../types/rpc").RPC.OutPoint)[];
        resultFormatters: (cellWithStatus: {
            cell: import("../types/rpc").RPC.LiveCell;
            status: string;
        }) => {
            cell: import("@ckb-lumos/base").LiveCell;
            status: string;
        };
    };
    getTransaction: {
        method: string;
        paramsFormatters: ((hash: string) => string)[];
        resultFormatters: (txWithStatus: import("../types/rpc").RPC.TransactionWithStatus) => {
            transaction: import("../types/api").CKBComponents.RawTransaction;
            txStatus: {
                blockHash: string | undefined;
                status: import("../types/rpc").RPC.TransactionStatus;
            };
        };
    };
    getCellbaseOutputCapacityDetails: {
        method: string;
        paramsFormatters: ((hash: string) => string)[];
        resultFormatters: (details: import("../types/rpc").RPC.CellbaseOutputCapacityDetails) => import("../types/api").CKBComponents.CellbaseOutputCapacityDetails;
    };
    getBlockEconomicState: {
        method: string;
        paramsFormatters: ((hash: string) => string)[];
        resultFormatters: (blockEconomicState: import("../types/rpc").RPC.BlockEconomicState) => import("@ckb-lumos/base").BlockEconomicState;
    };
    getTransactionProof: {
        method: string;
        paramsFormatters: ((arg: any) => any)[];
        resultFormatters: (proof: import("../types/rpc").RPC.TransactionProof) => import("@ckb-lumos/base").TransactionProof;
    };
    verifyTransactionProof: {
        method: string;
        paramsFormatters: ((proof: import("@ckb-lumos/base").TransactionProof) => import("../types/rpc").RPC.TransactionProof)[];
    };
    getConsensus: {
        method: string;
        paramsFormatters: never[];
        resultFormatters: (consensus: import("../types/rpc").RPC.Consensus) => import("@ckb-lumos/base").Consensus;
    };
};
export default _default;
//# sourceMappingURL=chain.d.ts.map