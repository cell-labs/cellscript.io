declare const _default: {
    getIndexerTip: {
        method: string;
        paramsFormatters: never[];
        resultFormatters: (tip: import("../types/rpc").RPC.Tip) => import("../types/api").CKBComponents.Tip;
    };
    getCells: {
        method: string;
        paramsFormatters: (((number: string | bigint) => string) | ((order: "asc" | "desc") => "asc" | "desc") | ((data: import("../types/api").CKBComponents.GetCellsSearchKey<boolean>) => import("../types/rpc").RPC.GetCellsSearchKey) | ((arg: any) => any))[];
        resultFormatters: (getCellsResult: import("../types/rpc").RPC.GetLiveCellsResult) => import("../types/api").CKBComponents.GetLiveCellsResult<true>;
    };
    getTransactions: {
        method: string;
        paramsFormatters: (((number: string | bigint) => string) | ((order: "asc" | "desc") => "asc" | "desc") | ((data: import("../types/api").CKBComponents.GetTransactionsSearchKey<boolean>) => import("../types/rpc").RPC.GetTransactionsSearchKey) | ((arg: any) => any))[];
        resultFormatters: <Goruped extends boolean = false>(getTransactionsResult: import("../types/rpc").RPC.GetTransactionsResult<Goruped>) => import("../types/api").CKBComponents.GetTransactionsResult<Goruped>;
    };
    getCellsCapacity: {
        method: string;
        paramsFormatters: ((data: import("../types/api").CKBComponents.SearchKey) => import("../types/rpc").RPC.SearchKey)[];
        resultFormatters: (cellsCapacity: import("../types/rpc").RPC.CellsCapacity) => import("../types/api").CKBComponents.CellsCapacity;
    };
};
export default _default;
//# sourceMappingURL=indexer.d.ts.map