"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _paramsFormatter = require("../paramsFormatter");

var resultFmts = _interopRequireWildcard(require("../resultFormatter"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _default = {
  getTipBlockNumber: {
    method: "get_tip_block_number",
    paramsFormatters: [],
    resultFormatters: resultFmts.toNumber
  },
  getTipHeader: {
    method: "get_tip_header",
    paramsFormatters: [],
    resultFormatters: resultFmts.toHeader
  },
  getCurrentEpoch: {
    method: "get_current_epoch",
    paramsFormatters: [],
    resultFormatters: resultFmts.toEpoch
  },
  getEpochByNumber: {
    method: "get_epoch_by_number",
    paramsFormatters: [_paramsFormatter.formatter.toNumber],
    resultFormatters: resultFmts.toEpoch
  },
  getBlockHash: {
    method: "get_block_hash",
    paramsFormatters: [_paramsFormatter.formatter.toNumber]
  },
  getBlock: {
    method: "get_block",
    paramsFormatters: [_paramsFormatter.formatter.toHash],
    resultFormatters: resultFmts.toBlock
  },
  getBlockByNumber: {
    method: "get_block_by_number",
    paramsFormatters: [_paramsFormatter.formatter.toNumber],
    resultFormatters: resultFmts.toBlock
  },
  getHeader: {
    method: "get_header",
    paramsFormatters: [_paramsFormatter.formatter.toHash],
    resultFormatters: resultFmts.toHeader
  },
  getHeaderByNumber: {
    method: "get_header_by_number",
    paramsFormatters: [_paramsFormatter.formatter.toNumber],
    resultFormatters: resultFmts.toHeader
  },
  getLiveCell: {
    method: "get_live_cell",
    paramsFormatters: [_paramsFormatter.formatter.toOutPoint],
    resultFormatters: resultFmts.toLiveCellWithStatus
  },
  getTransaction: {
    method: "get_transaction",
    paramsFormatters: [_paramsFormatter.formatter.toHash],
    resultFormatters: resultFmts.toTransactionWithStatus
  },
  getCellbaseOutputCapacityDetails: {
    method: "get_cellbase_output_capacity_details",
    paramsFormatters: [_paramsFormatter.formatter.toHash],
    resultFormatters: resultFmts.toCellbaseOutputCapacityDetails
  },
  getBlockEconomicState: {
    method: "get_block_economic_state",
    paramsFormatters: [_paramsFormatter.formatter.toHash],
    resultFormatters: resultFmts.toBlockEconomicState
  },
  getTransactionProof: {
    method: "get_transaction_proof",
    paramsFormatters: [_paramsFormatter.formatter.toArray(_paramsFormatter.formatter.toHash), _paramsFormatter.formatter.toOptional(_paramsFormatter.formatter.toHash)],
    resultFormatters: resultFmts.toTransactionProof
  },
  verifyTransactionProof: {
    method: "verify_transaction_proof",
    paramsFormatters: [_paramsFormatter.formatter.toTransactionProof]
  },
  getConsensus: {
    method: "get_consensus",
    paramsFormatters: [],
    resultFormatters: resultFmts.toConsensus
  }
};
exports.default = _default;
//# sourceMappingURL=chain.js.map