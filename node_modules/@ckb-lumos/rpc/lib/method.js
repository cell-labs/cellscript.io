"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Method = void 0;

var _axios = _interopRequireDefault(require("axios"));

var _exceptions = require("./exceptions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Method {
  #name;
  #config;

  get name() {
    return this.#name;
  }

  #options = {
    name: "",
    method: "",
    paramsFormatters: [],
    resultFormatters: undefined
  };
  #node;

  constructor(node, options, config = {
    timeout: 30000
  }) {
    this.#node = node;
    this.#options = options;
    this.#name = options.name;
    this.#config = config;
    Object.defineProperty(this.call, "name", {
      value: options.name,
      configurable: false,
      writable: false
    });
  }
  /* eslint-disable @typescript-eslint/ban-types, @typescript-eslint/explicit-module-boundary-types */


  call = (...params) => {
    const payload = this.getPayload(...params);
    return (0, _axios.default)({
      method: "POST",
      headers: {
        "content-type": "application/json"
      },
      data: payload,
      url: this.#node.url,
      httpAgent: this.#node.httpAgent,
      httpsAgent: this.#node.httpsAgent,
      timeout: this.#config.timeout
    }).then(res => {
      var _this$options$resultF, _this$options$resultF2, _this$options;

      if (res.data.id !== payload.id) {
        throw new _exceptions.IdNotMatchException(payload.id, res.data.id);
      }

      if (res.data.error) {
        throw new _exceptions.ResponseException(JSON.stringify(res.data.error));
      }

      return (_this$options$resultF = (_this$options$resultF2 = (_this$options = this.#options).resultFormatters) === null || _this$options$resultF2 === void 0 ? void 0 : _this$options$resultF2.call(_this$options, res.data.result)) !== null && _this$options$resultF !== void 0 ? _this$options$resultF : res.data.result;
    });
  };
  getPayload = (...params) => {
    const data = params.map((p, i) => this.#options.paramsFormatters[i] && this.#options.paramsFormatters[i](p) || p);
    const id = Math.round(Math.random() * 10000);
    const payload = {
      id,
      method: this.#options.method,
      params: data,
      jsonrpc: "2.0"
    };
    return payload;
  };
}
/* eslint-enable @typescript-eslint/ban-types, @typescript-eslint/explicit-module-boundary-types */


exports.Method = Method;
//# sourceMappingURL=method.js.map