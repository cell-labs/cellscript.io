import { CKBComponents } from "./types/api";
import { RPC } from "./types/rpc";
declare const toNumber: (number: RPC.BlockNumber) => CKBComponents.BlockNumber;
declare const toHash: (hash: RPC.Hash256) => CKBComponents.Hash256;
declare const toHeader: (header: RPC.Header) => CKBComponents.BlockHeader;
declare const toScript: (script: RPC.Script) => CKBComponents.Script;
declare const toInput: (input: RPC.CellInput) => CKBComponents.CellInput;
declare const toOutput: (output: RPC.CellOutput) => CKBComponents.CellOutput;
declare const toOutPoint: (outPoint: RPC.OutPoint) => CKBComponents.OutPoint;
declare const toDepType: (type: RPC.DepType) => CKBComponents.DepType;
declare const toCellDep: (cellDep: RPC.CellDep) => CKBComponents.CellDep;
declare function toTransaction(tx: RPC.RawTransaction): CKBComponents.RawTransaction;
declare function toTransaction(tx: RPC.Transaction): CKBComponents.Transaction;
declare const toUncleBlock: (uncleBlock: RPC.UncleBlock) => CKBComponents.UncleBlock;
declare const toTip: (tip: RPC.Tip) => CKBComponents.Tip;
declare const toBlock: (block: RPC.Block) => CKBComponents.Block;
declare const toAlertMessage: (alertMessage: RPC.AlertMessage) => CKBComponents.AlertMessage;
declare const toBlockchainInfo: (info: RPC.BlockchainInfo) => CKBComponents.BlockchainInfo;
declare const toLocalNodeInfo: (info: RPC.LocalNodeInfo) => CKBComponents.LocalNodeInfo;
declare const toRemoteNodeInfo: (info: RPC.RemoteNodeInfo) => CKBComponents.RemoteNodeInfo;
declare const toTxPoolInfo: (info: RPC.TxPoolInfo) => CKBComponents.TxPoolInfo;
declare const toPeers: (nodes: RPC.RemoteNodeInfo[]) => CKBComponents.RemoteNodeInfo[];
declare const toCell: (cell: RPC.Cell) => CKBComponents.Cell;
declare const toLiveCell: (liveCell: RPC.LiveCell) => CKBComponents.LiveCell;
declare const toLiveCellWithStatus: (cellWithStatus: {
    cell: RPC.LiveCell;
    status: string;
}) => {
    cell: CKBComponents.LiveCell;
    status: string;
};
declare const toCells: (cells: RPC.Cell[]) => CKBComponents.Cell[];
declare const toCellIncludingOutPoint: (cell: RPC.CellIncludingOutPoint) => {
    capacity: string;
    cellbase: boolean;
    blockHash: string;
    lock: import("@ckb-lumos/base").Script;
    outPoint: import("@ckb-lumos/base").OutPoint;
    outputDataLen: string;
};
declare const toCellsIncludingOutPoint: (cells: RPC.CellIncludingOutPoint[]) => CKBComponents.CellIncludingOutPoint[];
declare const toTransactionWithStatus: (txWithStatus: RPC.TransactionWithStatus) => {
    transaction: CKBComponents.RawTransaction;
    txStatus: {
        blockHash: string | undefined;
        status: RPC.TransactionStatus;
    };
};
declare const toEpoch: (epoch: RPC.Epoch) => CKBComponents.Epoch;
declare const toTransactionPoint: (transactionPoint: RPC.TransactionPoint) => CKBComponents.TransactionPoint;
declare const toTransactionsByLockHash: (transactions: RPC.TransactionsByLockHash) => CKBComponents.TransactionsByLockHash;
declare const toLiveCellsByLockHash: (cells: RPC.LiveCellsByLockHash) => CKBComponents.LiveCellsByLockHash;
declare const toLockHashIndexState: (index: RPC.LockHashIndexState) => CKBComponents.LockHashIndexState;
declare const toLockHashIndexStates: (states: RPC.LockHashIndexStates) => CKBComponents.LockHashIndexStates;
declare const toBannedAddress: (bannedAddress: RPC.BannedAddress) => CKBComponents.BannedAddress;
declare const toBannedAddresses: (bannedAddresses: RPC.BannedAddresses) => CKBComponents.BannedAddresses;
declare const toCellbaseOutputCapacityDetails: (details: RPC.CellbaseOutputCapacityDetails) => CKBComponents.CellbaseOutputCapacityDetails;
declare const toFeeRate: (feeRateObj: RPC.FeeRate) => CKBComponents.FeeRate;
declare const toCapacityByLockHash: (capacityByLockHash: RPC.CapacityByLockHash) => CKBComponents.CapacityByLockHash;
declare const toBlockEconomicState: (blockEconomicState: RPC.BlockEconomicState) => CKBComponents.BlockEconomicState;
declare const toSyncState: (state: RPC.SyncState) => CKBComponents.SyncState;
declare const toTransactionProof: (proof: RPC.TransactionProof) => CKBComponents.TransactionProof;
declare const toConsensus: (consensus: RPC.Consensus) => CKBComponents.Consensus;
declare const toRawTxPool: (rawTxPool: RPC.RawTxPool) => CKBComponents.RawTxPool;
declare const toGetCellsResult: (getCellsResult: RPC.GetLiveCellsResult) => CKBComponents.GetLiveCellsResult;
declare const toGetTransactionsResult: <Goruped extends boolean = false>(getTransactionsResult: RPC.GetTransactionsResult<Goruped>) => CKBComponents.GetTransactionsResult<Goruped>;
declare const toCellsCapacity: (cellsCapacity: RPC.CellsCapacity) => CKBComponents.CellsCapacity;
export { toNumber, toHash, toHeader, toScript, toInput, toOutput, toOutPoint, toDepType, toCellDep, toTransaction, toUncleBlock, toBlock, toTip, toAlertMessage, toBlockchainInfo, toLocalNodeInfo, toRemoteNodeInfo, toTxPoolInfo, toPeers, toLiveCell, toLiveCellWithStatus, toCell, toCells, toCellIncludingOutPoint, toCellsIncludingOutPoint, toTransactionWithStatus, toEpoch, toTransactionPoint, toTransactionsByLockHash, toLiveCellsByLockHash, toLockHashIndexState, toLockHashIndexStates, toBannedAddress, toBannedAddresses, toCellbaseOutputCapacityDetails, toFeeRate, toCapacityByLockHash, toBlockEconomicState, toSyncState, toTransactionProof, toConsensus, toRawTxPool, toCellsCapacity, toGetCellsResult, toGetTransactionsResult, };
//# sourceMappingURL=resultFormatter.d.ts.map