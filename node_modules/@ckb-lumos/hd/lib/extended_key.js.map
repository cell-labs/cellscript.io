{"version":3,"file":"extended_key.js","names":["AddressType","ExtendedPublicKey","constructor","publicKey","chainCode","assertPublicKey","assertChainCode","serialize","slice","parse","serialized","utils","assertHexString","AccountExtendedPublicKey","ckbAccountPath","publicKeyInfo","type","index","getPublicKey","blake160","key","publicKeyToBlake160","path","pathFor","pathForReceiving","Receiving","pathForChange","Change","keychain","Keychain","fromPublicKey","Buffer","from","deriveChild","toString","ExtendedPrivateKey","privateKey","assertPrivateKey","toExtendedPublicKey","privateToPublic","toAccountExtendedPublicKey","masterKeychain","accountKeychain","derivePath","fromSeed","seed","privateKeyInfo","privateKeyInfoByPath","privateKeyInfoFromKeychain"],"sources":["../src/extended_key.ts"],"sourcesContent":["import Keychain from \"./keychain\";\nimport key, { privateToPublic } from \"./key\";\nimport { utils, HexString } from \"@ckb-lumos/base\";\nimport { assertPublicKey, assertChainCode, assertPrivateKey } from \"./helper\";\n\nexport enum AddressType {\n  Receiving = 0,\n  Change = 1,\n}\n\nexport interface PublicKeyInfo {\n  blake160: HexString;\n  path: string;\n  publicKey: HexString;\n}\n\nexport class ExtendedPublicKey {\n  publicKey: HexString;\n  chainCode: HexString;\n\n  constructor(publicKey: HexString, chainCode: HexString) {\n    assertPublicKey(publicKey);\n    assertChainCode(chainCode);\n\n    this.publicKey = publicKey;\n    this.chainCode = chainCode;\n  }\n\n  serialize(): HexString {\n    return this.publicKey + this.chainCode.slice(2);\n  }\n\n  static parse(serialized: HexString): ExtendedPublicKey {\n    utils.assertHexString(\"serialized\", serialized);\n    return new ExtendedPublicKey(\n      serialized.slice(0, 68),\n      \"0x\" + serialized.slice(68)\n    );\n  }\n}\n\n// Extended public key of the BIP44 path down to account level,\n// which is `m/44'/309'/0'`. This key will be persisted to wallet\n// and used to derive receiving/change addresses.\nexport class AccountExtendedPublicKey extends ExtendedPublicKey {\n  public static ckbAccountPath = `m/44'/309'/0'`;\n\n  static parse(serialized: HexString): AccountExtendedPublicKey {\n    utils.assertHexString(\"serialized\", serialized);\n    return new AccountExtendedPublicKey(\n      serialized.slice(0, 68),\n      \"0x\" + serialized.slice(68)\n    );\n  }\n\n  publicKeyInfo(type: AddressType, index: number): PublicKeyInfo {\n    const publicKey: string = this.getPublicKey(type, index);\n    const blake160: string = key.publicKeyToBlake160(publicKey);\n    return {\n      publicKey,\n      blake160,\n      path: AccountExtendedPublicKey.pathFor(type, index),\n    };\n  }\n\n  public static pathForReceiving(index: number) {\n    return AccountExtendedPublicKey.pathFor(AddressType.Receiving, index);\n  }\n\n  public static pathForChange(index: number) {\n    return AccountExtendedPublicKey.pathFor(AddressType.Change, index);\n  }\n\n  public static pathFor(type: AddressType, index: number): string {\n    return `${AccountExtendedPublicKey.ckbAccountPath}/${type}/${index}`;\n  }\n\n  private getPublicKey(type = AddressType.Receiving, index: number): HexString {\n    const keychain = Keychain.fromPublicKey(\n      Buffer.from(this.publicKey.slice(2), \"hex\"),\n      Buffer.from(this.chainCode.slice(2), \"hex\"),\n      AccountExtendedPublicKey.ckbAccountPath\n    )\n      .deriveChild(type, false)\n      .deriveChild(index, false);\n\n    return \"0x\" + keychain.publicKey.toString(\"hex\");\n  }\n}\n\nexport interface PrivateKeyInfo {\n  privateKey: HexString;\n  publicKey: HexString;\n  path: string;\n}\n\nexport class ExtendedPrivateKey {\n  privateKey: HexString;\n  chainCode: HexString;\n\n  constructor(privateKey: HexString, chainCode: HexString) {\n    assertPrivateKey(privateKey);\n    assertChainCode(chainCode);\n\n    this.privateKey = privateKey;\n    this.chainCode = chainCode;\n  }\n\n  serialize(): HexString {\n    return this.privateKey + this.chainCode.slice(2);\n  }\n\n  toExtendedPublicKey(): ExtendedPublicKey {\n    const publicKey: HexString = privateToPublic(this.privateKey);\n    return new ExtendedPublicKey(publicKey, this.chainCode);\n  }\n\n  toAccountExtendedPublicKey(): AccountExtendedPublicKey {\n    const masterKeychain = new Keychain(\n      Buffer.from(this.privateKey.slice(2), \"hex\"),\n      Buffer.from(this.chainCode.slice(2), \"hex\")\n    );\n    const accountKeychain = masterKeychain.derivePath(\n      AccountExtendedPublicKey.ckbAccountPath\n    );\n\n    return new AccountExtendedPublicKey(\n      \"0x\" + accountKeychain.publicKey.toString(\"hex\"),\n      \"0x\" + accountKeychain.chainCode.toString(\"hex\")\n    );\n  }\n\n  static fromSeed(seed: Buffer): ExtendedPrivateKey {\n    const keychain = Keychain.fromSeed(seed);\n    return new ExtendedPrivateKey(\n      \"0x\" + keychain.privateKey.toString(\"hex\"),\n      \"0x\" + keychain.chainCode.toString(\"hex\")\n    );\n  }\n\n  privateKeyInfo(type: AddressType, index: number): PrivateKeyInfo {\n    const path = AccountExtendedPublicKey.pathFor(type, index);\n    return this.privateKeyInfoByPath(path);\n  }\n\n  privateKeyInfoByPath(path: string): PrivateKeyInfo {\n    const keychain = new Keychain(\n      Buffer.from(this.privateKey.slice(2), \"hex\"),\n      Buffer.from(this.chainCode.slice(2), \"hex\")\n    ).derivePath(path);\n\n    return this.privateKeyInfoFromKeychain(keychain, path);\n  }\n\n  private privateKeyInfoFromKeychain(\n    keychain: Keychain,\n    path: string\n  ): PrivateKeyInfo {\n    return {\n      privateKey: \"0x\" + keychain.privateKey.toString(\"hex\"),\n      publicKey: \"0x\" + keychain.publicKey.toString(\"hex\"),\n      path: path,\n    };\n  }\n\n  static parse(serialized: HexString): ExtendedPrivateKey {\n    utils.assertHexString(\"serialized\", serialized);\n    return new ExtendedPrivateKey(\n      serialized.slice(0, 66),\n      \"0x\" + serialized.slice(66)\n    );\n  }\n}\n"],"mappings":"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"}