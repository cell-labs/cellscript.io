{"version":3,"file":"transformers.js","names":["invokeSerializeJson","debugPath","value","Object","serializeJson","Function","call","transformObject","object","keys","Error","result","key","f","entries","camelKey","replace","group","toUpperCase","TransformScript","script","validation","codeHash","hashType","args","validators","ValidateScript","TransformOutPoint","outPoint","txHash","index","ValidateOutPoint","toInvoke","transform","TransformCellInput","cellInput","since","previousOutput","ValidateCellInput","TransformCellOutput","cellOutput","capacity","lock","type","ValidateCellOutput","TransformCellDep","cellDep","depType","ValidateCellDep","toInvokeArray","invokeFunction","array","map","item","i","TransformRawTransaction","rawTransaction","version","cellDeps","headerDeps","inputs","outputs","outputsData","ValidateRawTransaction","TransformTransaction","transaction","witnesses","ValidateTransaction","TransformRawHeader","rawHeader","compactTarget","timestamp","number","epoch","parentHash","transactionsRoot","proposalsHash","extraHash","dao","ValidateRawHeader","TransformHeader","header","nonce","ValidateHeader","TransformUncleBlock","uncleBlock","proposals","ValidateUncleBlock","TransformBlock","block","uncles","transactions","ValidateBlock","TransformCellbaseWitness","cellbaseWitness","message","ValidateCellbaseWitness","TransformWitnessArgs","witnessArgs","inputType","outputType","ValidateWitnessArgs"],"sources":["../src/transformers.js"],"sourcesContent":["// This package provides transformer functions that transform JavaScript objects\n// into JSON ready objects that can be passed to RPC. It following the following\n// rules:\n//\n// 1. If the specified object has a serializeJson method, it would invoke this\n// method and use the result to replace current object.\n// 2. It then restricts the keys of the object to keys required by the specified\n// entity(i.e., a Script would only have codeHash, hashType, args keys),for each\n// sub-field, it then recursively perform the steps here from step 1.\n// 3. It then optionally run validator functions to ensure the resulting object\n// follows specified rules.\n//\n// Note rule 1 here provides the flexibility in defining your own structures: you\n// could define a class containing custom data structures, then provide a\n// serializeJson that transforms the custom one into the rigid data structure\n// required by CKB. You can also leverage the Reader class we provide as much as\n// possible. Since Reader class does provide serializeJson methods, transformers\n// here will transform them to valid hex strings required by CKB.\nimport * as validators from \"./validators\";\n\nfunction invokeSerializeJson(debugPath, value) {\n  if (value instanceof Object && value.serializeJson instanceof Function) {\n    return value.serializeJson.call(value);\n  }\n  return value;\n}\n\nfunction transformObject(debugPath, object, keys) {\n  object = invokeSerializeJson(debugPath, object);\n  if (!(object instanceof Object)) {\n    throw new Error(`Transformed ${debugPath} is not an object!`);\n  }\n  const result = {};\n\n  for (const [key, f] of Object.entries(keys)) {\n    let value = object[key];\n    if (!value) {\n      const camelKey = key.replace(/(_[a-z])/g, (group) =>\n        group.toUpperCase().replace(\"_\", \"\")\n      );\n      value = object[camelKey];\n    }\n    if (value) {\n      result[key] = f(`${debugPath}.${key}`, value);\n    }\n  }\n  return result;\n}\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n */\nexport function TransformScript(\n  script,\n  { validation = true, debugPath = \"script\" } = {}\n) {\n  script = transformObject(debugPath, script, {\n    codeHash: invokeSerializeJson,\n    hashType: invokeSerializeJson,\n    args: invokeSerializeJson,\n  });\n\n  if (validation) {\n    validators.ValidateScript(script, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return script;\n}\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n */\nexport function TransformOutPoint(\n  outPoint,\n  { validation = true, debugPath = \"outPoint\" } = {}\n) {\n  outPoint = transformObject(debugPath, outPoint, {\n    txHash: invokeSerializeJson,\n    index: invokeSerializeJson,\n  });\n\n  if (validation) {\n    validators.ValidateOutPoint(outPoint, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return outPoint;\n}\n\nfunction toInvoke(transform) {\n  return function (debugPath, value) {\n    return transform(value, {\n      validation: false,\n      debugPath,\n    });\n  };\n}\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n */\nexport function TransformCellInput(\n  cellInput,\n  { validation = true, debugPath = \"cell_input\" } = {}\n) {\n  cellInput = transformObject(debugPath, cellInput, {\n    since: invokeSerializeJson,\n    previousOutput: toInvoke(TransformOutPoint),\n  });\n\n  if (validation) {\n    validators.ValidateCellInput(cellInput, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return cellInput;\n}\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n */\nexport function TransformCellOutput(\n  cellOutput,\n  { validation = true, debugPath = \"cellOutput\" } = {}\n) {\n  cellOutput = transformObject(debugPath, cellOutput, {\n    capacity: invokeSerializeJson,\n    lock: toInvoke(TransformScript),\n    type: toInvoke(TransformScript),\n  });\n\n  if (validation) {\n    validators.ValidateCellOutput(cellOutput, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return cellOutput;\n}\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n */\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n */ function TransformCellDep(\n  cellDep,\n  { validation = true, debugPath = \"cell_dep\" } = {}\n) {\n  cellDep = transformObject(debugPath, cellDep, {\n    outPoint: toInvoke(TransformOutPoint),\n    depType: invokeSerializeJson,\n  });\n\n  if (validation) {\n    validators.ValidateCellDep(cellDep, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return cellDep;\n}\n\nfunction toInvokeArray(invokeFunction) {\n  return function (debugPath, array) {\n    return array.map((item, i) => {\n      return invokeFunction(`${debugPath}[${i}]`, item);\n    });\n  };\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n */\nexport function TransformRawTransaction(\n  rawTransaction,\n  { validation = true, debugPath = \"raw_transaction\" } = {}\n) {\n  rawTransaction = transformObject(debugPath, rawTransaction, {\n    version: invokeSerializeJson,\n    cellDeps: toInvokeArray(toInvoke(TransformCellDep)),\n    headerDeps: toInvokeArray(invokeSerializeJson),\n    inputs: toInvokeArray(toInvoke(TransformCellInput)),\n    outputs: toInvokeArray(toInvoke(TransformCellOutput)),\n    outputsData: toInvokeArray(invokeSerializeJson),\n  });\n\n  if (validation) {\n    validators.ValidateRawTransaction(rawTransaction, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return rawTransaction;\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n */\nexport function TransformTransaction(\n  transaction,\n  { validation = true, debugPath = \"transaction\" } = {}\n) {\n  transaction = transformObject(debugPath, transaction, {\n    version: invokeSerializeJson,\n    cellDeps: toInvokeArray(toInvoke(TransformCellDep)),\n    headerDeps: toInvokeArray(invokeSerializeJson),\n    inputs: toInvokeArray(toInvoke(TransformCellInput)),\n    outputs: toInvokeArray(toInvoke(TransformCellOutput)),\n    outputsData: toInvokeArray(invokeSerializeJson),\n    witnesses: toInvokeArray(invokeSerializeJson),\n  });\n\n  if (validation) {\n    validators.ValidateTransaction(transaction, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return transaction;\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n */\nexport function TransformRawHeader(\n  rawHeader,\n  { validation = true, debugPath = \"raw_header\" } = {}\n) {\n  rawHeader = transformObject(debugPath, rawHeader, {\n    version: invokeSerializeJson,\n    compactTarget: invokeSerializeJson,\n    timestamp: invokeSerializeJson,\n    number: invokeSerializeJson,\n    epoch: invokeSerializeJson,\n    parentHash: invokeSerializeJson,\n    transactionsRoot: invokeSerializeJson,\n    proposalsHash: invokeSerializeJson,\n    extraHash: invokeSerializeJson,\n    dao: invokeSerializeJson,\n  });\n\n  if (validation) {\n    validators.ValidateRawHeader(rawHeader, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return rawHeader;\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n */\nexport function TransformHeader(\n  header,\n  { validation = true, debugPath = \"header\" } = {}\n) {\n  header = transformObject(debugPath, header, {\n    version: invokeSerializeJson,\n    compactTarget: invokeSerializeJson,\n    timestamp: invokeSerializeJson,\n    number: invokeSerializeJson,\n    epoch: invokeSerializeJson,\n    parentHash: invokeSerializeJson,\n    transactionsRoot: invokeSerializeJson,\n    proposalsHash: invokeSerializeJson,\n    extraHash: invokeSerializeJson,\n    dao: invokeSerializeJson,\n    nonce: invokeSerializeJson,\n  });\n\n  if (validation) {\n    validators.ValidateHeader(header, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return header;\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n */\nexport function TransformUncleBlock(\n  uncleBlock,\n  { validation = true, debugPath = \"uncle_block\" } = {}\n) {\n  uncleBlock = transformObject(debugPath, uncleBlock, {\n    header: toInvoke(TransformHeader),\n    proposals: toInvokeArray(invokeSerializeJson),\n  });\n\n  if (validation) {\n    validators.ValidateUncleBlock(uncleBlock, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return uncleBlock;\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n */\nexport function TransformBlock(\n  block,\n  { validation = true, debugPath = \"block\" } = {}\n) {\n  block = transformObject(debugPath, block, {\n    header: toInvoke(TransformHeader),\n    uncles: toInvokeArray(toInvoke(TransformUncleBlock)),\n    transactions: toInvokeArray(toInvoke(TransformTransaction)),\n    proposals: toInvokeArray(invokeSerializeJson),\n  });\n\n  if (validation) {\n    validators.ValidateBlock(block, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return block;\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n */\nexport function TransformCellbaseWitness(\n  cellbaseWitness,\n  { validation = true, debugPath = \"cellbase_witness\" } = {}\n) {\n  cellbaseWitness = transformObject(debugPath, cellbaseWitness, {\n    lock: toInvoke(TransformScript),\n    message: invokeSerializeJson,\n  });\n\n  if (validation) {\n    validators.ValidateCellbaseWitness(cellbaseWitness, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return cellbaseWitness;\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n */\nexport function TransformWitnessArgs(\n  witnessArgs,\n  { validation = true, debugPath = \"witness_args\" } = {}\n) {\n  witnessArgs = transformObject(debugPath, witnessArgs, {\n    lock: invokeSerializeJson,\n    inputType: invokeSerializeJson,\n    outputType: invokeSerializeJson,\n  });\n\n  if (validation) {\n    validators.ValidateWitnessArgs(witnessArgs, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return witnessArgs;\n}\n"],"mappings":"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"}