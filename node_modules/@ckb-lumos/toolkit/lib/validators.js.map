{"version":3,"file":"validators.js","names":["assertObject","debugPath","object","Object","Error","assertObjectWithKeys","expectedKeys","optionalKeys","providedKeys","keys","sort","requiredLength","length","maximalLength","errorMessage","join","optionalProvidedKeys","filter","key","includes","find","assertHexString","string","test","assertHash","hash","assertInteger","i","ValidateScript","script","nestedValidation","codeHash","args","hashType","ValidateOutPoint","outPoint","txHash","index","ValidateCellInput","cellInput","since","previousOutput","ValidateCellOutput","cellOutput","capacity","lock","type","ValidateCellDep","cellDep","depType","assertArray","array","validateFunction","Array","isArray","toAssert","value","assertCommonTransaction","rawTransaction","version","cellDeps","headerDeps","inputs","outputs","outputsData","ValidateRawTransaction","ValidateTransaction","transaction","witnesses","assertCommonHeader","rawHeader","compactTarget","timestamp","number","epoch","parentHash","transactionsRoot","proposalsHash","extraHash","dao","ValidateRawHeader","ValidateHeader","header","nonce","assertProposalShortId","shortId","ValidateUncleBlock","uncleBlock","proposals","ValidateBlock","block","uncles","transactions","ValidateCellbaseWitness","cellbaseWitness","message","ValidateWitnessArgs","witnessArgs","inputType","outputType"],"sources":["../src/validators.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n// This package provides validator functions that check JSON objects are\n// following the correct format, so we can submit them to CKB via RPC\n// directly\n\nfunction assertObject(debugPath, object) {\n  if (!(object instanceof Object)) {\n    throw new Error(`${debugPath} is not an object!`);\n  }\n}\n\nfunction assertObjectWithKeys(\n  debugPath,\n  object,\n  expectedKeys,\n  optionalKeys = []\n) {\n  assertObject(debugPath, object);\n  const providedKeys = Object.keys(object).sort();\n  const requiredLength = expectedKeys.length;\n  const maximalLength = expectedKeys.length + optionalKeys.length;\n  const errorMessage = `${debugPath} does not have correct keys! Required keys: [${expectedKeys\n    .sort()\n    .join(\", \")}], optional keys: [${optionalKeys\n    .sort()\n    .join(\", \")}], actual keys: [${providedKeys.join(\", \")}]`;\n  if (\n    providedKeys.length < requiredLength ||\n    providedKeys.length > maximalLength\n  ) {\n    throw new Error(errorMessage);\n  }\n  let optionalProvidedKeys = providedKeys.filter(\n    (key) => !expectedKeys.includes(key)\n  );\n  if (providedKeys.length - optionalProvidedKeys.length !== requiredLength) {\n    throw new Error(errorMessage);\n  }\n  if (optionalProvidedKeys.find((key) => !optionalKeys.includes(key))) {\n    throw new Error(errorMessage);\n  }\n}\n\nfunction assertHexString(debugPath, string) {\n  if (!/^0x([0-9a-fA-F][0-9a-fA-F])*$/.test(string)) {\n    throw new Error(`${debugPath} must be a hex string!`);\n  }\n}\n\nfunction assertHash(debugPath, hash) {\n  assertHexString(debugPath, hash);\n  if (hash.length !== 66) {\n    throw new Error(`${debugPath} must be a hex string of 66 bytes long!`);\n  }\n}\n\nfunction assertInteger(debugPath, i) {\n  if (i === \"0x0\") {\n    return;\n  }\n  if (!/^0x[1-9a-fA-F][0-9a-fA-F]*$/.test(i)) {\n    throw new Error(`${debugPath} must be a hex integer!`);\n  }\n}\n\nexport function ValidateScript(\n  script,\n  { nestedValidation = true, debugPath = \"script\" } = {}\n) {\n  assertObjectWithKeys(debugPath, script, [\"codeHash\", \"hashType\", \"args\"], []);\n  assertHash(`${debugPath}.codeHash`, script.codeHash);\n  assertHexString(`${debugPath}.args`, script.args);\n\n  if (\n    script.hashType !== \"data\" &&\n    script.hashType !== \"type\" &&\n    script.hashType !== \"data1\"\n  ) {\n    throw new Error(`${debugPath}.hashType must be either data or type!`);\n  }\n}\n\nexport function ValidateOutPoint(\n  outPoint,\n  { nestedValidation = true, debugPath = \"outPoint\" } = {}\n) {\n  assertObjectWithKeys(debugPath, outPoint, [\"txHash\", \"index\"], []);\n  assertHash(`${debugPath}.txHash`, outPoint.txHash);\n  assertInteger(`${debugPath}.index`, outPoint.index);\n}\n\nexport function ValidateCellInput(\n  cellInput,\n  { nestedValidation = true, debugPath = \"cellInput\" } = {}\n) {\n  assertObjectWithKeys(debugPath, cellInput, [\"since\", \"previousOutput\"], []);\n  assertInteger(`${debugPath}.since`, cellInput.since);\n\n  if (nestedValidation) {\n    ValidateOutPoint(cellInput.previousOutput, {\n      debugPath: `${debugPath}.previousOutput`,\n    });\n  }\n}\n\nexport function ValidateCellOutput(\n  cellOutput,\n  { nestedValidation = true, debugPath = \"cellOutput\" } = {}\n) {\n  assertObjectWithKeys(debugPath, cellOutput, [\"capacity\", \"lock\"], [\"type\"]);\n  assertInteger(`${debugPath}.capacity`, cellOutput.capacity);\n\n  if (nestedValidation) {\n    ValidateScript(cellOutput.lock, {\n      debugPath: `${debugPath}.lock`,\n    });\n    if (cellOutput.type) {\n      ValidateScript(cellOutput.type, {\n        debugPath: `${debugPath}.type`,\n      });\n    }\n  }\n}\n\nexport function ValidateCellDep(\n  cellDep,\n  { nestedValidation = true, debugPath = \"cellDep\" } = {}\n) {\n  assertObjectWithKeys(debugPath, cellDep, [\"outPoint\", \"depType\"], []);\n  if (cellDep.depType !== \"code\" && cellDep.depType !== \"depGroup\") {\n    throw new Error(`${debugPath}.depType must be either code or depGroup!`);\n  }\n\n  if (nestedValidation) {\n    ValidateOutPoint(cellDep.outPoint, {\n      debugPath: `${debugPath}.outPoint`,\n    });\n  }\n}\n\nfunction assertArray(debugPath, array, validateFunction, nestedValidation) {\n  if (!Array.isArray(array)) {\n    throw new Error(`${debugPath} is not an array!`);\n  }\n  if (nestedValidation) {\n    for (let i = 0; i < array.length; i++) {\n      validateFunction(`${debugPath}[${i}]`, array[i]);\n    }\n  }\n}\n\nfunction toAssert(validateFunction, nestedValidation) {\n  return function (debugPath, value) {\n    validateFunction(value, {\n      nestedValidation: nestedValidation,\n      debugPath: debugPath,\n    });\n  };\n}\n\nfunction assertCommonTransaction(debugPath, rawTransaction, nestedValidation) {\n  assertInteger(`${debugPath}.version`, rawTransaction.version);\n  assertArray(\n    `${debugPath}.cellDeps`,\n    rawTransaction.cellDeps,\n    toAssert(ValidateCellDep, nestedValidation),\n    nestedValidation\n  );\n  assertArray(\n    `${debugPath}.headerDeps`,\n    rawTransaction.headerDeps,\n    assertHash,\n    nestedValidation\n  );\n  assertArray(\n    `${debugPath}.inputs`,\n    rawTransaction.inputs,\n    toAssert(ValidateCellInput, nestedValidation),\n    nestedValidation\n  );\n  assertArray(\n    `${debugPath}.outputs`,\n    rawTransaction.outputs,\n    toAssert(ValidateCellOutput, nestedValidation),\n    nestedValidation\n  );\n  assertArray(\n    `${debugPath}.outputsData`,\n    rawTransaction.outputsData,\n    assertHexString,\n    nestedValidation\n  );\n}\n\nexport function ValidateRawTransaction(\n  rawTransaction,\n  { nestedValidation = true, debugPath = \"rawTransaction\" } = {}\n) {\n  assertObjectWithKeys(\n    debugPath,\n    rawTransaction,\n    [\"version\", \"cellDeps\", \"headerDeps\", \"inputs\", \"outputs\", \"outputsData\"],\n    []\n  );\n  assertCommonTransaction(debugPath, rawTransaction, nestedValidation);\n}\n\nexport function ValidateTransaction(\n  transaction,\n  { nestedValidation = true, debugPath = \"transaction\" } = {}\n) {\n  assertObjectWithKeys(\n    debugPath,\n    transaction,\n    [\n      \"version\",\n      \"cellDeps\",\n      \"headerDeps\",\n      \"inputs\",\n      \"outputs\",\n      \"outputsData\",\n      \"witnesses\",\n    ],\n    []\n  );\n  assertCommonTransaction(debugPath, transaction, nestedValidation);\n  assertArray(\n    `${debugPath}.witnesses`,\n    transaction.witnesses,\n    assertHexString,\n    nestedValidation\n  );\n}\n\nfunction assertCommonHeader(debugPath, rawHeader) {\n  assertInteger(`${debugPath}.version`, rawHeader.version);\n  assertInteger(`${debugPath}.compactTarget`, rawHeader.compactTarget);\n  assertInteger(`${debugPath}.timestamp`, rawHeader.timestamp);\n  assertInteger(`${debugPath}.number`, rawHeader.number);\n  assertInteger(`${debugPath}.epoch`, rawHeader.epoch);\n  assertHash(`${debugPath}.parentHash`, rawHeader.parentHash);\n  assertHash(`${debugPath}.transactionsRoot`, rawHeader.transactionsRoot);\n  assertHash(`${debugPath}.proposalsHash`, rawHeader.proposalsHash);\n  assertHash(`${debugPath}.extraHash`, rawHeader.extraHash);\n  assertHash(`${debugPath}.dao`, rawHeader.dao);\n}\n\nexport function ValidateRawHeader(\n  rawHeader,\n  { nestedValidation = true, debugPath = \"rawHeader\" } = {}\n) {\n  assertObjectWithKeys(\n    debugPath,\n    rawHeader,\n    [\n      \"version\",\n      \"compactTarget\",\n      \"timestamp\",\n      \"number\",\n      \"epoch\",\n      \"parentHash\",\n      \"transactionsRoot\",\n      \"proposalsHash\",\n      \"extraHash\",\n      \"dao\",\n    ],\n    []\n  );\n  assertCommonHeader(debugPath, rawHeader);\n}\n\nexport function ValidateHeader(\n  header,\n  { nestedValidation = true, debugPath = \"header\" } = {}\n) {\n  assertObjectWithKeys(\n    debugPath,\n    header,\n    [\n      \"version\",\n      \"compactTarget\",\n      \"timestamp\",\n      \"number\",\n      \"epoch\",\n      \"parentHash\",\n      \"transactionsRoot\",\n      \"proposalsHash\",\n      \"extraHash\",\n      \"dao\",\n      \"nonce\",\n    ],\n    []\n  );\n  assertHexString(`${debugPath}.nonce`, header.nonce);\n  if (header.nonce.length !== 34) {\n    throw new Error(\n      `${debugPath}.nonce must be a hex string of 34 bytes long!`\n    );\n  }\n}\n\nfunction assertProposalShortId(debugPath, shortId) {\n  assertHexString(debugPath, shortId);\n  if (shortId.length !== 22) {\n    throw new Error(`${debugPath} must be a hex string of 22 bytes long!`);\n  }\n}\n\nexport function ValidateUncleBlock(\n  uncleBlock,\n  { nestedValidation = true, debugPath = \"uncleBlock\" } = {}\n) {\n  assertObjectWithKeys(debugPath, uncleBlock, [\"header\", \"proposals\"], []);\n\n  if (nestedValidation) {\n    ValidateHeader(uncleBlock.header, {\n      debugPath: `${debugPath}.header`,\n    });\n  }\n  assertArray(\n    `${debugPath}.proposals`,\n    uncleBlock.proposals,\n    assertProposalShortId,\n    nestedValidation\n  );\n}\n\nexport function ValidateBlock(\n  block,\n  { nestedValidation = true, debugPath = \"block\" } = {}\n) {\n  assertObjectWithKeys(\n    debugPath,\n    block,\n    [\"header\", \"uncles\", \"transactions\", \"proposals\"],\n    []\n  );\n\n  if (nestedValidation) {\n    ValidateHeader(block.header, {\n      debugPath: `${debugPath}.header`,\n    });\n  }\n  assertArray(\n    `${debugPath}.uncles`,\n    block.uncles,\n    toAssert(ValidateUncleBlock, nestedValidation),\n    nestedValidation\n  );\n  assertArray(\n    `${debugPath}.transactions`,\n    block.transactions,\n    toAssert(ValidateTransaction, nestedValidation),\n    nestedValidation\n  );\n  assertArray(\n    `${debugPath}.proposals`,\n    block.proposals,\n    assertProposalShortId,\n    nestedValidation\n  );\n}\n\nexport function ValidateCellbaseWitness(\n  cellbaseWitness,\n  { nestedValidation = true, debugPath = \"cellbaseWitness\" } = {}\n) {\n  assertObjectWithKeys(debugPath, cellbaseWitness, [\"lock\", \"message\"], []);\n  assertHexString(`${debugPath}.message`, cellbaseWitness.message);\n\n  if (nestedValidation) {\n    ValidateScript(cellbaseWitness.lock, {\n      debugPath: `${debugPath}.lock`,\n    });\n  }\n}\n\nexport function ValidateWitnessArgs(\n  witnessArgs,\n  { nestedValidation = true, debugPath = \"witnessArgs\" } = {}\n) {\n  assertObjectWithKeys(\n    debugPath,\n    witnessArgs,\n    [],\n    [\"lock\", \"inputType\", \"outputType\"]\n  );\n\n  if (witnessArgs.lock) {\n    assertHexString(`${debugPath}.lock`, witnessArgs.lock);\n  }\n  if (witnessArgs.inputType) {\n    assertHexString(`${debugPath}.inputType`, witnessArgs.inputType);\n  }\n  if (witnessArgs.outputType) {\n    assertHexString(`${debugPath}.outputType`, witnessArgs.outputType);\n  }\n}\n"],"mappings":"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"}