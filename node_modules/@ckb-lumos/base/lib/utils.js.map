{"version":3,"file":"utils.js","names":["bytify","hexify","bytifyRawString","bytes","CKBHasher","constructor","options","outLength","hasher","blake2b","undefined","update","data","digestHex","out","Uint8Array","digest","buffer","ckbHash","computeScriptHash","script","_options","blockchain","Script","pack","hashCode","xxHash32","toBigUInt64LE","num","toBigUInt64LECompatible","BI","from","buf","Buffer","alloc","writeUInt32LE","and","toNumber","shr","toString","readBigUInt64LE","hex","readBigUInt64LECompatible","toBigInt","slice","readUInt32LE","add","shl","toBigUInt128LE","u128","toBigUInt128LECompatible","U128_MIN_COMPATIBLE","U128_MAX_COMPATIBLE","lt","Error","gt","readBigUInt128LE","leHex","readBigUInt128LECompatible","length","startsWith","assertHexString","debugPath","str","test","assertHexadecimal","isDeepEqual","a","b","isEqual","TYPE_ID_CODE_HASH","generateTypeIdArgs","input","outputIndex","outPointBuf","CellInput","outputIndexBuf","number","Uint64LE","ckbHasher","generateTypeIdScript","args","codeHash","hashType","toCamel","s","replace","$1","toUpperCase","deepCamel","Object","prototype","call","map","item","result","key","value","deepCamelizeDepGroup","deepCamelizeTransaction"],"sources":["../src/utils.ts"],"sourcesContent":["import blake2b, { Blake2b } from \"blake2b\";\nimport isEqual from \"lodash.isequal\";\nimport { xxHash32 } from \"js-xxhash\";\nimport { bytes, number, BytesLike } from \"@ckb-lumos/codec\";\nimport { BI, BIish } from \"@ckb-lumos/bi\";\nimport * as blockchain from \"./blockchain\";\nimport { Script, Input } from \"./api\";\nimport { Hash, HexNumber, HexString } from \"./primitive\";\n\ntype CKBHasherOptions = {\n  outLength?: number;\n};\n\nconst { bytify, hexify, bytifyRawString } = bytes;\nclass CKBHasher {\n  hasher: Blake2b;\n  outLength: number;\n\n  constructor(options: CKBHasherOptions = {}) {\n    const { outLength = 32 } = options;\n    this.outLength = outLength;\n    this.hasher = blake2b(\n      outLength,\n      undefined,\n      undefined,\n      bytifyRawString(\"ckb-default-hash\")\n    );\n  }\n\n  update(data: string | ArrayBuffer): this {\n    this.hasher.update(bytify(data));\n    return this;\n  }\n\n  digestHex(): Hash {\n    const out = new Uint8Array(this.outLength);\n    this.hasher.digest(out);\n    return hexify(out.buffer);\n  }\n}\n\nfunction ckbHash(data: BytesLike): Hash {\n  const hasher = new CKBHasher();\n  hasher.update(bytes.bytify(data));\n  return hasher.digestHex();\n}\n\n/**\n * compute lock/type hash\n *\n * @param script\n * @param _options @deprecated this option has no effect\n */\nfunction computeScriptHash(\n  script: Script,\n  _options?: { validate?: boolean }\n): string {\n  return ckbHash(blockchain.Script.pack(script));\n}\n\nfunction hashCode(buffer: Buffer): number {\n  return xxHash32(buffer, 0);\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n * convert bigint to BigUInt64 little-endian hex string\n * @param num\n */\nfunction toBigUInt64LE(num: BIish): HexString {\n  return toBigUInt64LECompatible(num);\n}\n\nfunction toBigUInt64LECompatible(num: BIish): HexString {\n  num = BI.from(num);\n  const buf = Buffer.alloc(8);\n  buf.writeUInt32LE(num.and(\"0xffffffff\").toNumber(), 0);\n  num = num.shr(32);\n  buf.writeUInt32LE(num.and(\"0xffffffff\").toNumber(), 4);\n  return `0x${buf.toString(\"hex\")}`;\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n * convert BigUInt64 little-endian hex string to bigint\n *\n * @param hex BigUInt64 little-endian hex string\n */\nfunction readBigUInt64LE(hex: HexString): bigint {\n  return readBigUInt64LECompatible(hex).toBigInt();\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n */\nfunction readBigUInt64LECompatible(hex: HexString): BI {\n  const buf = Buffer.from(hex.slice(2), \"hex\");\n  return BI.from(buf.readUInt32LE()).add(BI.from(buf.readUInt32LE(4)).shl(32));\n}\n\n// const U128_MIN = BigInt(0);\n// const U128_MAX = BigInt(\"340282366920938463463374607431768211455\");\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n * convert bigint to BigUInt128 little-endian hex string\n *\n * @param u128\n */\nfunction toBigUInt128LE(u128: BIish): string {\n  return toBigUInt128LECompatible(u128);\n}\n\nconst U128_MIN_COMPATIBLE = BI.from(0);\nconst U128_MAX_COMPATIBLE = BI.from(\"340282366920938463463374607431768211455\");\nfunction toBigUInt128LECompatible(num: BIish): HexNumber {\n  num = BI.from(num);\n  if (num.lt(U128_MIN_COMPATIBLE)) {\n    throw new Error(`u128 ${num} too small`);\n  }\n\n  if (num.gt(U128_MAX_COMPATIBLE)) {\n    throw new Error(`u128 ${num} too large`);\n  }\n\n  const buf = Buffer.alloc(16);\n  buf.writeUInt32LE(num.and(0xffffffff).toNumber(), 0);\n  num = num.shr(32);\n  buf.writeUInt32LE(num.and(0xffffffff).toNumber(), 4);\n\n  num = num.shr(32);\n  buf.writeUInt32LE(num.and(0xffffffff).toNumber(), 8);\n\n  num = num.shr(32);\n  buf.writeUInt32LE(num.and(0xffffffff).toNumber(), 12);\n  return `0x${buf.toString(\"hex\")}`;\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n * convert BigUInt64 little-endian hex string to bigint\n *\n * @param leHex BigUInt128 little-endian hex string\n */\nfunction readBigUInt128LE(leHex: HexString): bigint {\n  return readBigUInt128LECompatible(leHex).toBigInt();\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n */\nfunction readBigUInt128LECompatible(leHex: HexString): BI {\n  if (leHex.length < 34 || !leHex.startsWith(\"0x\")) {\n    throw new Error(`leHex format error`);\n  }\n\n  const buf = Buffer.from(leHex.slice(2, 34), \"hex\");\n\n  return BI.from(buf.readUInt32LE(0))\n    .shl(0)\n    .add(BI.from(buf.readUInt32LE(4)).shl(32))\n    .add(BI.from(buf.readUInt32LE(8)).shl(64))\n    .add(BI.from(buf.readUInt32LE(12)).shl(96));\n}\n\nfunction assertHexString(debugPath: string, str: string): void {\n  if (!/^0x([0-9a-fA-F][0-9a-fA-F])*$/.test(str)) {\n    throw new Error(`${debugPath} must be a hex string!`);\n  }\n}\n\nfunction assertHexadecimal(debugPath: string, str: string): void {\n  if (!/^0x(0|[0-9a-fA-F]+)$/.test(str)) {\n    throw new Error(`${debugPath} must be a hexadecimal!`);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nfunction isDeepEqual(a: any, b: any): boolean {\n  return isEqual(a, b);\n}\n// Buffer.from('TYPE_ID')\nconst TYPE_ID_CODE_HASH =\n  \"0x00000000000000000000000000000000000000000000000000545950455f4944\";\n\nfunction generateTypeIdArgs(input: Input, outputIndex: HexNumber): HexString {\n  const outPointBuf = blockchain.CellInput.pack(input);\n  const outputIndexBuf = bytes.hexify(number.Uint64LE.pack(outputIndex));\n  const ckbHasher = new CKBHasher();\n  ckbHasher.update(outPointBuf);\n  ckbHasher.update(outputIndexBuf);\n  return ckbHasher.digestHex();\n}\n\nfunction generateTypeIdScript(input: Input, outputIndex = \"0x0\"): Script {\n  blockchain.CellInput.pack(input);\n  assertHexadecimal(\"outputIndex\", outputIndex);\n\n  const args = generateTypeIdArgs(input, outputIndex);\n  return {\n    codeHash: TYPE_ID_CODE_HASH,\n    hashType: \"type\",\n    args,\n  };\n}\n\nfunction toCamel(s: string): string {\n  return s.replace(/([-_][a-z])/gi, ($1) => {\n    return $1.toUpperCase().replace(\"-\", \"\").replace(\"_\", \"\");\n  });\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nfunction deepCamel(data: any): any {\n  if (Object.prototype.toString.call(data) === \"[object Array]\") {\n    if (data.length === 0) {\n      return data;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return data.map((item: any) => deepCamel(item));\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const result: any = {};\n  if (Object.prototype.toString.call(data) === \"[object Object]\") {\n    for (const key in data) {\n      const value = data[key];\n      if (\n        Object.prototype.toString.call(value) === \"[object Object]\" ||\n        Object.prototype.toString.call(value) === \"[object Array]\"\n      ) {\n        result[toCamel(key)] = deepCamel(value);\n      } else {\n        result[toCamel(key)] = value;\n      }\n    }\n    return result;\n  }\n  return data;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nfunction deepCamelizeDepGroup(data: any): any {\n  if (Object.prototype.toString.call(data) === \"[object Array]\") {\n    if (data.length === 0) {\n      return data;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return data.map((item: any) => deepCamelizeDepGroup(item));\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const result: any = {};\n  if (Object.prototype.toString.call(data) === \"[object Object]\") {\n    for (const key in data) {\n      const value = data[key];\n      if (\n        Object.prototype.toString.call(value) === \"[object Object]\" ||\n        Object.prototype.toString.call(value) === \"[object Array]\"\n      ) {\n        result[key] = deepCamelizeDepGroup(value);\n      } else {\n        result[key] = value === \"dep_group\" ? \"depGroup\" : value;\n      }\n    }\n    return result;\n  }\n  return data;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nfunction deepCamelizeTransaction(data: any): any {\n  return deepCamelizeDepGroup(deepCamel(data));\n}\n\nexport {\n  CKBHasher,\n  ckbHash,\n  deepCamel,\n  deepCamelizeTransaction,\n  toBigUInt64LE,\n  toBigUInt64LECompatible,\n  readBigUInt64LE,\n  readBigUInt64LECompatible,\n  toBigUInt128LE,\n  toBigUInt128LECompatible,\n  readBigUInt128LE,\n  readBigUInt128LECompatible,\n  computeScriptHash,\n  hashCode,\n  assertHexString,\n  assertHexadecimal,\n  isDeepEqual,\n  generateTypeIdScript,\n};\n"],"mappings":"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"}