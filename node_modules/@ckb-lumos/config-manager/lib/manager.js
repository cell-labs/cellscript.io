"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConfig = getConfig;
exports.initializeConfig = initializeConfig;
exports.validateConfig = validateConfig;

var _deepFreezeStrict = _interopRequireDefault(require("deep-freeze-strict"));

var _base = require("@ckb-lumos/base");

var _predefined = require("./predefined");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function assertHexString(debugPath, string) {
  if (!/^0x([0-9a-fA-F][0-9a-fA-F])*$/.test(string)) {
    throw new Error(`${debugPath} must be a hex string!`);
  }
}

function assertHash(debugPath, hash) {
  assertHexString(debugPath, hash);

  if (hash.length != 66) {
    throw new Error(`${debugPath} must be a hex string of 66 bytes long!`);
  }
}

function assertInteger(debugPath, i) {
  if (i === "0x0") {
    return;
  }

  if (!/^0x[1-9a-fA-F][0-9a-fA-F]*$/.test(i)) {
    throw new Error(`${debugPath} must be a hex integer!`);
  }
}

function assert(condition, debugPath = "variable") {
  if (!condition) throw new Error(`${debugPath} is not valid`);
}

function validateConfig(config) {
  assert(typeof config.SCRIPTS === "object" && config.SCRIPTS != null, "config.SCRIPT");

  for (const scriptName of Object.keys(config.SCRIPTS)) {
    const scriptConfig = config.SCRIPTS[scriptName];
    assert(scriptConfig === null || scriptConfig === void 0 ? void 0 : scriptConfig.CODE_HASH);
    assertHash(`SCRIPTS.${scriptName}.CODE_HASH`, scriptConfig.CODE_HASH);
    const hashType = scriptConfig.HASH_TYPE;

    if (hashType !== "type" && hashType !== "data") {
      throw new Error(`SCRIPTS.${scriptName}.HASH_TYPE must either be data or type!`);
    }

    assertHash(`SCRIPTS.${scriptName}.TX_HASH`, scriptConfig.TX_HASH);
    assertInteger(`SCRIPTS.${scriptName}.INDEX`, scriptConfig.INDEX);
    const depType = scriptConfig.DEP_TYPE;

    if (depType !== "depGroup" && depType !== "code") {
      throw new Error(`SCRIPTS.${scriptName}.DEP_TYPE must either be depGroup or code!`);
    }

    const shortId = scriptConfig.SHORT_ID; // Short ID is optional

    if (shortId != undefined) {
      if (typeof shortId !== "number") {
        throw new Error("SHORT_ID must be a number!");
      }
    }
  }
}

let config = _predefined.predefined.LINA;

function getConfig() {
  return config;
}
/**
 * Initialize current app with a config. The initializaton steps work as follows:
 * 1. If `LUMOS_CONFIG_NAME` environment variable is set to a predefined config,
 * the predefined config is loaded;
 * 2. If `LUMOS_CONFIG_FILE` environment variable is set, it will be used as the
 * name of a file containing the Config to use.
 * 3. A file named `config.json` in current running directory will be used as the
 * file containing the Config to use.
 * @deprecated
 * @returns void
 */


function initializeConfigLegacy() {
  var _process;

  const env = (_process = process) === null || _process === void 0 ? void 0 : _process.env;
  const configName = env === null || env === void 0 ? void 0 : env.LUMOS_CONFIG_NAME;

  if ((configName === "LINA" || configName === "AGGRON4") && _predefined.predefined[configName]) {
    config = _predefined.predefined[configName];
    return;
  }

  const configFile = env === null || env === void 0 ? void 0 : env.LUMOS_CONFIG_FILE;
  const configFilename = configFile || "config.json";

  try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const data = require("fs").readFileSync(configFilename);

    const loadedConfig = JSON.parse(data);
    validateConfig(loadedConfig);
    config = (0, _deepFreezeStrict.default)(loadedConfig);
  } catch (e) {
    throw new Error(`Error loading config from file ${configFilename}: ${e}`);
  }
}

function initializeConfig(inputConfig) {
  if (!inputConfig) {
    _base.logger.deprecated("initializeConfig with env will be deprecated, please migrate to initializeConfig(...)");

    initializeConfigLegacy();
  } else {
    validateConfig(inputConfig);
    config = (0, _deepFreezeStrict.default)(inputConfig);
  }
}
//# sourceMappingURL=manager.js.map