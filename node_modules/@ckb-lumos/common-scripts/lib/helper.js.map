{"version":3,"file":"helper.js","names":["CKBHasher","ckbHash","utils","addCellDep","txSkeleton","newCellDep","cellDep","get","find","depType","values","OutPointValue","outPoint","validate","equals","update","cellDeps","push","generateDaoScript","config","template","SCRIPTS","DAO","codeHash","CODE_HASH","hashType","HASH_TYPE","args","isSecp256k1Blake160Script","script","SECP256K1_BLAKE160","isSecp256k1Blake160Address","address","parseAddress","isOmnilockScript","OMNILOCK","isOmnilockAddress","isSecp256k1Blake160MultisigScript","SECP256K1_BLAKE160_MULTISIG","isSecp256k1Blake160MultisigAddress","isDaoScript","isSudtScript","SUDT","Error","isAcpScript","ANYONE_CAN_PAY","isAcpAddress","hashWitness","hasher","witness","lengthBuffer","ArrayBuffer","view","DataView","witnessHexString","BI","from","bytes","bytify","length","toString","setUint32","Number","slice","prepareSigningEntries","scriptType","processedArgs","Set","tx","createTransactionFromSkeleton","txHash","blockchain","RawTransaction","pack","inputs","witnesses","signingEntries","i","size","input","cellOutput","lock","has","add","lockValue","ScriptValue","j","otherInput","signingEntry","type","index","message","digestHex","set","ensureScript","SECP_SIGNATURE_PLACEHOLDER","OMNILOCK_SIGNATURE_PLACEHOLDER","repeat","omnilock","OmnilockWitnessLock","signature","byteLength"],"sources":["../src/helper.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion, @typescript-eslint/explicit-module-boundary-types */\n\nimport * as omnilock from \"./omnilock\";\nimport { Set } from \"immutable\";\nimport {\n  createTransactionFromSkeleton,\n  parseAddress,\n  TransactionSkeletonType,\n} from \"@ckb-lumos/helpers\";\nimport { bytes } from \"@ckb-lumos/codec\";\nimport {\n  values,\n  utils,\n  CellDep,\n  Script,\n  Address,\n  HexString,\n  blockchain,\n} from \"@ckb-lumos/base\";\nconst { CKBHasher, ckbHash } = utils;\nimport { Config } from \"@ckb-lumos/config-manager\";\nimport { BI } from \"@ckb-lumos/bi\";\n\nexport function addCellDep(\n  txSkeleton: TransactionSkeletonType,\n  newCellDep: CellDep\n): TransactionSkeletonType {\n  const cellDep = txSkeleton.get(\"cellDeps\").find((cellDep) => {\n    return (\n      cellDep.depType === newCellDep.depType &&\n      new values.OutPointValue(cellDep.outPoint, { validate: false }).equals(\n        new values.OutPointValue(newCellDep.outPoint, { validate: false })\n      )\n    );\n  });\n\n  if (!cellDep) {\n    txSkeleton = txSkeleton.update(\"cellDeps\", (cellDeps) => {\n      return cellDeps.push({\n        outPoint: newCellDep.outPoint,\n        depType: newCellDep.depType,\n      });\n    });\n  }\n\n  return txSkeleton;\n}\n\nexport function generateDaoScript(config: Config): Script {\n  const template = config.SCRIPTS.DAO!;\n\n  return {\n    codeHash: template.CODE_HASH,\n    hashType: template.HASH_TYPE,\n    args: \"0x\",\n  };\n}\n\nexport function isSecp256k1Blake160Script(\n  script: Script,\n  config: Config\n): boolean {\n  const template = config.SCRIPTS.SECP256K1_BLAKE160!;\n  return (\n    script.codeHash === template.CODE_HASH &&\n    script.hashType === template.HASH_TYPE\n  );\n}\n\nexport function isSecp256k1Blake160Address(\n  address: Address,\n  config: Config\n): boolean {\n  const script = parseAddress(address, { config });\n  return isSecp256k1Blake160Script(script, config);\n}\n\nexport function isOmnilockScript(script: Script, config: Config): boolean {\n  const template = config.SCRIPTS.OMNILOCK!;\n  return (\n    script.codeHash === template.CODE_HASH &&\n    script.hashType === template.HASH_TYPE\n  );\n}\n\nexport function isOmnilockAddress(address: Address, config: Config): boolean {\n  const script = parseAddress(address, { config });\n  return isOmnilockScript(script, config);\n}\n\nexport function isSecp256k1Blake160MultisigScript(\n  script: Script,\n  config: Config\n): boolean {\n  const template = config.SCRIPTS.SECP256K1_BLAKE160_MULTISIG!;\n  return (\n    script.codeHash === template.CODE_HASH &&\n    script.hashType === template.HASH_TYPE\n  );\n}\n\nexport function isSecp256k1Blake160MultisigAddress(\n  address: Address,\n  config: Config\n): boolean {\n  const script = parseAddress(address, { config });\n  return isSecp256k1Blake160MultisigScript(script, config);\n}\n\nexport function isDaoScript(\n  script: Script | undefined,\n  config: Config\n): boolean {\n  const template = config.SCRIPTS.DAO!;\n\n  return (\n    !!script &&\n    script.codeHash === template.CODE_HASH &&\n    script.hashType === template.HASH_TYPE\n  );\n}\n\nexport function isSudtScript(\n  script: Script | undefined,\n  config: Config\n): boolean {\n  const template = config.SCRIPTS.SUDT;\n\n  if (!template) {\n    throw new Error(`SUDT script not defined in config!`);\n  }\n\n  return (\n    !!script &&\n    script.codeHash === template.CODE_HASH &&\n    script.hashType === template.HASH_TYPE\n  );\n}\n\nexport function isAcpScript(script: Script, config: Config): boolean {\n  const template = config.SCRIPTS.ANYONE_CAN_PAY;\n\n  if (!template) {\n    throw new Error(`ANYONE_CAN_PAY script not defined in config!`);\n  }\n\n  return (\n    !!script &&\n    script.codeHash === template.CODE_HASH &&\n    script.hashType === template.HASH_TYPE\n  );\n}\n\nexport function isAcpAddress(address: Address, config: Config): boolean {\n  const script = parseAddress(address, { config });\n\n  return isAcpScript(script, config);\n}\n\n/**\n * Hash a witness in a hasher\n * @param hasher The hasher object which should have a `update` method.\n * @param witness witness data, the inputs to hasher will derived from it\n */\nexport function hashWitness(\n  hasher: { update: (value: HexString | ArrayBuffer) => unknown },\n  witness: HexString\n): void {\n  const lengthBuffer = new ArrayBuffer(8);\n  const view = new DataView(lengthBuffer);\n  const witnessHexString = BI.from(bytes.bytify(witness).length).toString(16);\n  if (witnessHexString.length <= 8) {\n    view.setUint32(0, Number(\"0x\" + witnessHexString), true);\n    view.setUint32(4, Number(\"0x\" + \"00000000\"), true);\n  }\n\n  if (witnessHexString.length > 8 && witnessHexString.length <= 16) {\n    view.setUint32(0, Number(\"0x\" + witnessHexString.slice(-8)), true);\n    view.setUint32(4, Number(\"0x\" + witnessHexString.slice(0, -8)), true);\n  }\n  hasher.update(lengthBuffer);\n  hasher.update(witness);\n}\n/* eslint-enable camelcase, @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types */\n\nexport function prepareSigningEntries(\n  txSkeleton: TransactionSkeletonType,\n  config: Config,\n  scriptType: \"SECP256K1_BLAKE160\" | \"SECP256K1_BLAKE160_MULTISIG\" | \"OMNILOCK\"\n): TransactionSkeletonType {\n  const template = config.SCRIPTS[scriptType];\n  if (!template) {\n    throw new Error(\n      `Provided config does not have ${scriptType} script setup!`\n    );\n  }\n  let processedArgs = Set<string>();\n  const tx = createTransactionFromSkeleton(txSkeleton);\n  const txHash = ckbHash(blockchain.RawTransaction.pack(tx));\n  const inputs = txSkeleton.get(\"inputs\");\n  const witnesses = txSkeleton.get(\"witnesses\");\n  let signingEntries = txSkeleton.get(\"signingEntries\");\n  for (let i = 0; i < inputs.size; i++) {\n    const input = inputs.get(i)!;\n    if (\n      template.CODE_HASH === input.cellOutput.lock.codeHash &&\n      template.HASH_TYPE === input.cellOutput.lock.hashType &&\n      !processedArgs.has(input.cellOutput.lock.args)\n    ) {\n      processedArgs = processedArgs.add(input.cellOutput.lock.args);\n      const lockValue = new values.ScriptValue(input.cellOutput.lock, {\n        validate: false,\n      });\n      const hasher = new CKBHasher();\n      hasher.update(txHash);\n      if (i >= witnesses.size) {\n        throw new Error(\n          `The first witness in the script group starting at input index ${i} does not exist, maybe some other part has invalidly tampered the transaction?`\n        );\n      }\n      hashWitness(hasher, witnesses.get(i)!);\n      for (let j = i + 1; j < inputs.size && j < witnesses.size; j++) {\n        const otherInput = inputs.get(j)!;\n        if (\n          lockValue.equals(\n            new values.ScriptValue(otherInput.cellOutput.lock, {\n              validate: false,\n            })\n          )\n        ) {\n          hashWitness(hasher, witnesses.get(j)!);\n        }\n      }\n      for (let j = inputs.size; j < witnesses.size; j++) {\n        hashWitness(hasher, witnesses.get(j)!);\n      }\n      const signingEntry = {\n        type: \"witness_args_lock\",\n        index: i,\n        message: hasher.digestHex(),\n      };\n      signingEntries = signingEntries.push(signingEntry);\n    }\n  }\n  txSkeleton = txSkeleton.set(\"signingEntries\", signingEntries);\n  return txSkeleton;\n}\n\nexport function ensureScript(\n  script: Script,\n  config: Config,\n  scriptType:\n    | \"SECP256K1_BLAKE160\"\n    | \"SECP256K1_BLAKE160_MULTISIG\"\n    | \"DAO\"\n    | \"OMNILOCK\"\n): void {\n  const template = config.SCRIPTS[scriptType];\n  if (!template) {\n    throw new Error(\n      `Provided config does not have ${scriptType} script setup!`\n    );\n  }\n  if (\n    template.CODE_HASH !== script.codeHash ||\n    template.HASH_TYPE !== script.hashType\n  ) {\n    throw new Error(`Provided script is not ${scriptType} script!`);\n  }\n}\n\n/* 65-byte zeros in hex */\nexport const SECP_SIGNATURE_PLACEHOLDER =\n  \"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\";\n/* 85-byte zeros in hex */\nexport const OMNILOCK_SIGNATURE_PLACEHOLDER = `0x${\"00\".repeat(\n  omnilock.OmnilockWitnessLock.pack({ signature: SECP_SIGNATURE_PLACEHOLDER })\n    .byteLength\n)}`;\n\nexport default {\n  addCellDep,\n  generateDaoScript,\n  isSecp256k1Blake160Script,\n  isSecp256k1Blake160MultisigScript,\n  isDaoScript,\n  isSudtScript,\n  prepareSigningEntries,\n  isSecp256k1Blake160Address,\n  isSecp256k1Blake160MultisigAddress,\n  ensureScript,\n  isAcpScript,\n  isAcpAddress,\n};\n"],"mappings":"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"}