{"version":3,"file":"omnilock.js","names":["ScriptValue","values","createOmnilockScript","omnilockInfo","options","config","getConfig","omnilockConfig","SCRIPTS","OMNILOCK","Error","args","auth","flag","bytes","hexify","content","slice","script","codeHash","CODE_HASH","hashType","HASH_TYPE","Hexify","pack","bytify","unpack","Identity","createFixedHexBytesCodec","SmtProof","byteVecOf","SmtProofEntry","table","mask","byteOf","proof","SmtProofEntryVec","vector","OmniIdentity","identity","proofs","OmniIdentityOpt","option","OmnilockWitnessLock","signature","BytesOpt","omni_identity","preimage","CellCollector","constructor","fromInfo","cellProvider","undefined","queryOptions","fromScript","parseFromInfo","lock","type","cellCollector","collector","collect","isOmnilockScript","inputCell","setupInputCell","txSkeleton","_fromInfo","defaultWitness","since","cellOutput","update","inputs","push","output","capacity","data","outputs","inputSinces","set","get","size","witnesses","template","secp256k1Template","SECP256K1_BLAKE160","omnilockOutPoint","txHash","TX_HASH","index","INDEX","secp256k1OutPoint","addCellDep","outPoint","depType","DEP_TYPE","firstIndex","findIndex","input","validate","equals","witness","newWitnessArgs","OMNILOCK_SIGNATURE_PLACEHOLDER","blockchain","WitnessArgs","prepareSigningEntries","_prepareSigningEntries"],"sources":["../src/omnilock.ts"],"sourcesContent":["import { TransactionSkeletonType, Options } from \"@ckb-lumos/helpers\";\nimport { bytes, BytesLike } from \"@ckb-lumos/codec\";\nimport {\n  values,\n  Cell,\n  WitnessArgs,\n  CellCollector as CellCollectorType,\n  Script,\n  CellProvider,\n  QueryOptions,\n  OutPoint,\n  HexString,\n  PackedSince,\n  blockchain,\n} from \"@ckb-lumos/base\";\nimport { getConfig, Config } from \"@ckb-lumos/config-manager\";\nimport {\n  addCellDep,\n  prepareSigningEntries as _prepareSigningEntries,\n  isOmnilockScript,\n  OMNILOCK_SIGNATURE_PLACEHOLDER,\n} from \"./helper\";\nimport { FromInfo } from \".\";\nimport { parseFromInfo } from \"./from_info\";\nimport { CellCollectorConstructor } from \"./type\";\nimport {\n  byteOf,\n  byteVecOf,\n  option,\n  table,\n  vector,\n} from \"@ckb-lumos/codec/lib/molecule\";\nimport {\n  BytesOpt,\n  createFixedHexBytesCodec,\n} from \"@ckb-lumos/codec/lib/blockchain\";\nimport { bytify, hexify } from \"@ckb-lumos/codec/lib/bytes\";\nconst { ScriptValue } = values;\n\nexport type OmnilockInfo = {\n  auth: {\n    flag: \"ETHEREUM\" | \"SECP256K1_BLAKE160\";\n    /**\n     * if auth flag is SECP256K1_BLAKE160, content is publicKeyToBlake160(secp256k1Pubkey)\n     * if auth flag is ETHEREUM, content is Ethereum address\n     */\n    content: BytesLike;\n  };\n};\n\n/**\n * only support ETHEREUM and SECP256K1_BLAKE160 mode currently\n * refer to: @link https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0042-omnilock/0042-omnilock.md omnilock\n * @param omnilockInfo\n * @param options\n * @returns\n */\nexport function createOmnilockScript(\n  omnilockInfo: OmnilockInfo,\n  options?: Options\n): Script {\n  const config = options?.config || getConfig();\n  const omnilockConfig = config.SCRIPTS.OMNILOCK;\n  if (!omnilockConfig) {\n    throw new Error(\"OMNILOCK script config not found.\");\n  }\n\n  const args = (() => {\n    // omni flag       pubkey hash   omni lock flags\n    // chain identity   eth addr      function flag()\n    // 00: Nervos       ðŸ‘‡            00: owner\n    // 01: Ethereum     ðŸ‘‡            01: administrator\n    if (omnilockInfo.auth.flag === \"ETHEREUM\") {\n      return `0x01${bytes.hexify(omnilockInfo.auth.content).slice(2)}00`;\n    }\n    if (omnilockInfo.auth.flag === \"SECP256K1_BLAKE160\") {\n      return `0x00${bytes.hexify(omnilockInfo.auth.content).slice(2)}00`;\n    }\n    throw new Error(`Not supported flag: ${omnilockInfo.auth.flag}.`);\n  })();\n\n  const script: Script = {\n    codeHash: omnilockConfig.CODE_HASH,\n    hashType: omnilockConfig.HASH_TYPE,\n    args,\n  };\n  return script;\n}\n\nconst Hexify = { pack: bytify, unpack: hexify };\nconst Identity = createFixedHexBytesCodec(21);\nconst SmtProof = byteVecOf(Hexify);\nconst SmtProofEntry = table(\n  {\n    mask: byteOf(Hexify),\n    proof: SmtProof,\n  },\n  [\"mask\", \"proof\"]\n);\nconst SmtProofEntryVec = vector(SmtProofEntry);\nconst OmniIdentity = table(\n  {\n    identity: Identity,\n    proofs: SmtProofEntryVec,\n  },\n  [\"identity\", \"proofs\"]\n);\nconst OmniIdentityOpt = option(OmniIdentity);\nexport const OmnilockWitnessLock = table(\n  {\n    signature: BytesOpt,\n    omni_identity: OmniIdentityOpt,\n    preimage: BytesOpt,\n  },\n  [\"signature\", \"omni_identity\", \"preimage\"]\n);\n\nexport const CellCollector: CellCollectorConstructor = class CellCollector\n  implements CellCollectorType\n{\n  private cellCollector: CellCollectorType;\n  private config: Config;\n  public readonly fromScript: Script;\n\n  constructor(\n    fromInfo: FromInfo,\n    cellProvider: CellProvider,\n    {\n      config = undefined,\n      queryOptions = {},\n    }: Options & {\n      queryOptions?: QueryOptions;\n    } = {}\n  ) {\n    if (!cellProvider) {\n      throw new Error(`Cell provider is missing!`);\n    }\n    config = config || getConfig();\n    this.fromScript = parseFromInfo(fromInfo, { config }).fromScript;\n\n    this.config = config;\n\n    queryOptions = {\n      ...queryOptions,\n      lock: this.fromScript,\n      type: queryOptions.type || \"empty\",\n    };\n\n    this.cellCollector = cellProvider.collector(queryOptions);\n  }\n\n  async *collect(): AsyncGenerator<Cell> {\n    if (!isOmnilockScript(this.fromScript, this.config)) {\n      return;\n    }\n\n    for await (const inputCell of this.cellCollector.collect()) {\n      yield inputCell;\n    }\n  }\n};\n\n/**\n * Setup input cell infos, such as cell deps and witnesses.\n *\n * @param txSkeleton\n * @param inputCell\n * @param _fromInfo\n * @param options\n */\nexport async function setupInputCell(\n  txSkeleton: TransactionSkeletonType,\n  inputCell: Cell,\n  _fromInfo?: FromInfo,\n  {\n    config = undefined,\n    defaultWitness = \"0x\",\n    since = undefined,\n  }: Options & {\n    defaultWitness?: HexString;\n    since?: PackedSince;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n\n  const fromScript = inputCell.cellOutput.lock;\n  if (!isOmnilockScript(fromScript, config)) {\n    throw new Error(`Not OMNILOCK input!`);\n  }\n\n  // add inputCell to txSkeleton\n  txSkeleton = txSkeleton.update(\"inputs\", (inputs) => {\n    return inputs.push(inputCell);\n  });\n\n  const output: Cell = {\n    cellOutput: {\n      capacity: inputCell.cellOutput.capacity,\n      lock: inputCell.cellOutput.lock,\n      type: inputCell.cellOutput.type,\n    },\n    data: inputCell.data,\n  };\n\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push(output);\n  });\n\n  if (since) {\n    txSkeleton = txSkeleton.update(\"inputSinces\", (inputSinces) => {\n      return inputSinces.set(txSkeleton.get(\"inputs\").size - 1, since);\n    });\n  }\n\n  txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => {\n    return witnesses.push(defaultWitness);\n  });\n\n  const template = config.SCRIPTS.OMNILOCK;\n  const secp256k1Template = config.SCRIPTS.SECP256K1_BLAKE160;\n  if (!template) {\n    throw new Error(`OMNILOCK script not defined in config!`);\n  }\n  if (!secp256k1Template) {\n    throw new Error(`SECP256K1_BLAKE160 script not defined in config!`);\n  }\n\n  const omnilockOutPoint: OutPoint = {\n    txHash: template.TX_HASH,\n    index: template.INDEX,\n  };\n  const secp256k1OutPoint: OutPoint = {\n    txHash: secp256k1Template.TX_HASH,\n    index: secp256k1Template.INDEX,\n  };\n\n  // add cell dep\n  txSkeleton = addCellDep(txSkeleton, {\n    outPoint: omnilockOutPoint,\n    depType: template.DEP_TYPE,\n  });\n  txSkeleton = addCellDep(txSkeleton, {\n    outPoint: secp256k1OutPoint,\n    depType: secp256k1Template.DEP_TYPE,\n  });\n\n  // add witness\n  /*\n   * Modify the skeleton, so the first witness of the fromAddress script group\n   * has a WitnessArgs construct with 85-byte zero filled values. While this\n   * is not required, it helps in transaction fee estimation.\n   */\n  const firstIndex = txSkeleton\n    .get(\"inputs\")\n    .findIndex((input) =>\n      new ScriptValue(input.cellOutput.lock, { validate: false }).equals(\n        new ScriptValue(fromScript, { validate: false })\n      )\n    );\n  if (firstIndex !== -1) {\n    while (firstIndex >= txSkeleton.get(\"witnesses\").size) {\n      txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n        witnesses.push(\"0x\")\n      );\n    }\n    let witness: string = txSkeleton.get(\"witnesses\").get(firstIndex)!;\n    const newWitnessArgs: WitnessArgs = {\n      /* 85-byte zeros in hex */\n      lock: OMNILOCK_SIGNATURE_PLACEHOLDER,\n    };\n    witness = bytes.hexify(blockchain.WitnessArgs.pack(newWitnessArgs));\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n      witnesses.set(firstIndex, witness)\n    );\n  }\n\n  return txSkeleton;\n}\n\n/**\n * prepare for txSkeleton signingEntries, will update txSkeleton.get(\"signingEntries\")\n *\n * @param txSkeleton\n * @param options\n */\nexport function prepareSigningEntries(\n  txSkeleton: TransactionSkeletonType,\n  { config = undefined }: Options = {}\n): TransactionSkeletonType {\n  config = config || getConfig();\n\n  return _prepareSigningEntries(txSkeleton, config, \"OMNILOCK\");\n}\n\nexport default {\n  prepareSigningEntries,\n  setupInputCell,\n  CellCollector,\n  OmnilockWitnessLock,\n  createOmnilockScript,\n};\n"],"mappings":"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"}