{"version":3,"file":"deploy.js","names":["ScriptValue","values","bytesToHex","bytes","res","i","length","toString","padStart","findCellsByLock","lockScript","cellProvider","collector","lock","type","data","cells","cell","collect","push","updateOutputs","txSkeleton","output","cellCapacity","minimalCellCapacityCompatible","cellOutput","capacity","update","outputs","updateCellDeps","config","cellDeps","clear","getConfig","secp256k1Config","SCRIPTS","SECP256K1_BLAKE160","secp256k1MultiSigConfig","SECP256K1_BLAKE160_MULTISIG","Error","outPoint","txHash","TX_HASH","index","INDEX","depType","DEP_TYPE","completeTx","fromInfo","feeRate","inputCapacity","get","map","c","BI","from","reduce","a","b","add","outputCapacity","needCapacity","sub","injectCapacity","amount","undefined","_feeRate","_amount","fromScript","multisigScript","parseFromInfo","pow","changeCapacity","changeCell","minimalChangeCapacity","lt","gt","cellCollector","previousInputs","Set","input","inputCell","has","inputs","witnesses","deductCapacity","eq","gte","firstIndex","findIndex","validate","equals","size","witness","newWitnessArgs","SECP_SIGNATURE_PLACEHOLDER","slice","repeat","M","witnessArgs","blockchain","WitnessArgs","unpack","bytify","equal","inputType","outputType","hexify","pack","set","txFee","calculateTxFee","pop","getTransactionSize","tx","createTransactionFromSkeleton","getTransactionSizeByTx","serializedTx","Transaction","byteLength","calculateFee","ratio","base","mul","fee","div","txSize","calculateCodeHashByBin","scriptBin","bin","valueOf","utils","CKBHasher","buffer","byteOffset","digestHex","getDataHash","rpc","parseInt","getTransaction","outputData","transaction","outputsData","calculateTxHash","ckbHash","getScriptConfigByDataHash","outputIndex","codeHash","scriptConfig","CODE_HASH","HASH_TYPE","getScriptConfigByTypeHash","typeScript","computeScriptHash","getScriptConfig","outputCell","isMultisigFromInfo","Array","isArray","publicKeyHashes","verifyFromInfo","helpers","nameOfScript","parseAddress","generateDeployWithDataTx","options","TransactionSkeleton","scriptBinary","generateDeployWithTypeIdTx","resolved","typeId","generateTypeIdScript","previousOutput","since","generateUpgradeTypeIdDataTx","deployedCell","compareScriptBinaryWithOnChainData","localHash","onChainHash","__tests__"],"sources":["../src/deploy.ts"],"sourcesContent":["import {\n  Script,\n  OutPoint,\n  CellProvider,\n  Cell,\n  utils,\n  values,\n  WitnessArgs,\n  Transaction,\n  blockchain,\n} from \"@ckb-lumos/base\";\nimport { bytes } from \"@ckb-lumos/codec\";\nimport { getConfig, Config, helpers } from \"@ckb-lumos/config-manager\";\nimport {\n  TransactionSkeletonType,\n  TransactionSkeleton,\n  Options,\n  createTransactionFromSkeleton,\n  parseAddress,\n  minimalCellCapacityCompatible,\n} from \"@ckb-lumos/helpers\";\nimport { Set } from \"immutable\";\nimport { FromInfo, parseFromInfo, MultisigScript } from \"./from_info\";\nimport { BI, BIish } from \"@ckb-lumos/bi\";\nimport { RPC } from \"@ckb-lumos/rpc\";\nconst { ScriptValue } = values;\n\nfunction bytesToHex(bytes: Uint8Array): string {\n  let res = \"0x\";\n  for (let i = 0; i < bytes.length; i++) {\n    res += bytes[i].toString(16).padStart(2, \"0\");\n  }\n  return res;\n}\n\nasync function findCellsByLock(\n  lockScript: Script,\n  cellProvider: CellProvider\n): Promise<Cell[]> {\n  const collector = cellProvider.collector({\n    lock: lockScript,\n    type: \"empty\",\n    data: \"0x\",\n  });\n  const cells: Cell[] = [];\n  for await (const cell of collector.collect()) {\n    cells.push(cell);\n  }\n  return cells;\n}\n\nfunction updateOutputs(\n  txSkeleton: TransactionSkeletonType,\n  output: Cell\n): TransactionSkeletonType {\n  const cellCapacity = minimalCellCapacityCompatible(output);\n  output.cellOutput.capacity = `0x${cellCapacity.toString(16)}`;\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push(output);\n  });\n\n  return txSkeleton;\n}\n\nfunction updateCellDeps(\n  txSkeleton: TransactionSkeletonType,\n  config?: Config\n): TransactionSkeletonType {\n  txSkeleton = txSkeleton.update(\"cellDeps\", (cellDeps) => {\n    return cellDeps.clear();\n  });\n  config = config || getConfig();\n  const secp256k1Config = config.SCRIPTS.SECP256K1_BLAKE160;\n  const secp256k1MultiSigConfig = config.SCRIPTS.SECP256K1_BLAKE160_MULTISIG;\n  if (!secp256k1Config || !secp256k1MultiSigConfig) {\n    throw new Error(\n      \"Provided config does not have SECP256K1_BLAKE160 or SECP256K1_BLAKE160_MULTISIG script setup!\"\n    );\n  }\n  txSkeleton = txSkeleton.update(\"cellDeps\", (cellDeps) => {\n    return cellDeps.push(\n      {\n        outPoint: {\n          txHash: secp256k1Config.TX_HASH,\n          index: secp256k1Config.INDEX,\n        },\n        depType: secp256k1Config.DEP_TYPE,\n      },\n      // TODO: optimize me, push dep directly without checking actual locks used would cause bigger tx\n      {\n        outPoint: {\n          txHash: secp256k1MultiSigConfig.TX_HASH,\n          index: secp256k1MultiSigConfig.INDEX,\n        },\n        depType: secp256k1MultiSigConfig.DEP_TYPE,\n      }\n    );\n  });\n\n  return txSkeleton;\n}\n\nasync function completeTx(\n  txSkeleton: TransactionSkeletonType,\n  fromInfo: FromInfo,\n  config?: Config,\n  feeRate?: BIish\n): Promise<TransactionSkeletonType> {\n  const inputCapacity = txSkeleton\n    .get(\"inputs\")\n    .map((c) => BI.from(c.cellOutput.capacity))\n    .reduce((a, b) => a.add(b), BI.from(0));\n  const outputCapacity = txSkeleton\n    .get(\"outputs\")\n    .map((c) => BI.from(c.cellOutput.capacity))\n    .reduce((a, b) => a.add(b), BI.from(0));\n  const needCapacity = outputCapacity.sub(inputCapacity);\n  txSkeleton = await injectCapacity(\n    txSkeleton,\n    fromInfo,\n    BI.from(needCapacity),\n    {\n      config: config,\n      feeRate: feeRate,\n    }\n  );\n  return txSkeleton;\n}\n\nasync function injectCapacity(\n  txSkeleton: TransactionSkeletonType,\n  fromInfo: FromInfo,\n  amount: BIish,\n  {\n    config = undefined,\n    feeRate = undefined,\n  }: { config?: Config; feeRate?: BIish }\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  const _feeRate = feeRate || 1000;\n  let _amount = BI.from(amount);\n  const { fromScript, multisigScript } = parseFromInfo(fromInfo, { config });\n  _amount = _amount.add(BI.from(10).pow(8));\n  let changeCapacity = BI.from(10).pow(8);\n  const changeCell: Cell = {\n    cellOutput: {\n      capacity: \"0x0\",\n      lock: fromScript,\n      type: undefined,\n    },\n    data: \"0x\",\n  };\n  const minimalChangeCapacity: BI = BI.from(\n    minimalCellCapacityCompatible(changeCell)\n  ).add(BI.from(10).pow(8));\n\n  if (_amount.lt(0)) {\n    changeCapacity = changeCapacity.sub(_amount);\n    _amount = BI.from(0);\n  }\n  if (_amount.gt(0) || changeCapacity.lt(minimalChangeCapacity)) {\n    const cellProvider = txSkeleton.get(\"cellProvider\");\n    if (!cellProvider) throw new Error(\"Cell provider is missing!\");\n    const cellCollector = cellProvider.collector({\n      lock: fromScript,\n      type: \"empty\",\n      data: \"0x\",\n    });\n\n    let previousInputs = Set<string>();\n    for (const input of txSkeleton.get(\"inputs\")) {\n      previousInputs = previousInputs.add(\n        `${input.outPoint!.txHash}_${input.outPoint!.index}`\n      );\n    }\n\n    for await (const inputCell of cellCollector.collect()) {\n      if (\n        previousInputs.has(\n          `${inputCell.outPoint!.txHash}_${inputCell.outPoint!.index}`\n        )\n      )\n        continue;\n      txSkeleton = txSkeleton.update(\"inputs\", (inputs) =>\n        inputs.push(inputCell)\n      );\n      txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n        witnesses.push(\"0x\")\n      );\n      const inputCapacity = BI.from(inputCell.cellOutput.capacity);\n      let deductCapacity = inputCapacity;\n      if (deductCapacity.gt(_amount)) {\n        deductCapacity = _amount;\n      }\n      _amount = _amount.sub(deductCapacity);\n      changeCapacity = changeCapacity.add(inputCapacity).sub(deductCapacity);\n      if (\n        _amount.eq(0) &&\n        (changeCapacity.eq(0) || changeCapacity.gte(minimalChangeCapacity))\n      )\n        break;\n    }\n  }\n\n  if (changeCapacity.gt(0)) {\n    changeCell.cellOutput.capacity = \"0x\" + changeCapacity.toString(16);\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) =>\n      outputs.push(changeCell)\n    );\n  }\n  if (_amount.gt(0) || changeCapacity.lt(minimalChangeCapacity))\n    throw new Error(\"Not enough capacity in from address!\");\n\n  /*\n   * Modify the skeleton, so the first witness of the fromAddress script group\n   * has a WitnessArgs construct with 65-byte zero filled values. While this\n   * is not required, it helps in transaction fee estimation.\n   */\n  const firstIndex = txSkeleton\n    .get(\"inputs\")\n    .findIndex((input) =>\n      new ScriptValue(input.cellOutput.lock, { validate: false }).equals(\n        new ScriptValue(fromScript, { validate: false })\n      )\n    );\n  if (firstIndex !== -1) {\n    while (firstIndex >= txSkeleton.get(\"witnesses\").size) {\n      txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n        witnesses.push(\"0x\")\n      );\n    }\n    let witness: string = txSkeleton.get(\"witnesses\").get(firstIndex)!;\n    let newWitnessArgs: WitnessArgs;\n    const SECP_SIGNATURE_PLACEHOLDER =\n      \"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\";\n\n    if (typeof fromInfo !== \"string\") {\n      newWitnessArgs = {\n        lock:\n          \"0x\" +\n          multisigScript!.slice(2) +\n          SECP_SIGNATURE_PLACEHOLDER.slice(2).repeat(\n            (fromInfo as MultisigScript).M\n          ),\n      };\n    } else {\n      newWitnessArgs = { lock: SECP_SIGNATURE_PLACEHOLDER };\n    }\n\n    if (witness !== \"0x\") {\n      const witnessArgs = blockchain.WitnessArgs.unpack(bytes.bytify(witness));\n      const lock = witnessArgs.lock;\n      if (\n        !!lock &&\n        !!newWitnessArgs.lock &&\n        !bytes.equal(lock, newWitnessArgs.lock)\n      ) {\n        throw new Error(\n          \"Lock field in first witness is set aside for signature!\"\n        );\n      }\n      const inputType = witnessArgs.inputType;\n      if (inputType) {\n        newWitnessArgs.inputType = inputType;\n      }\n      const outputType = witnessArgs.outputType;\n      if (outputType) {\n        newWitnessArgs.outputType = outputType;\n      }\n    }\n    witness = bytes.hexify(blockchain.WitnessArgs.pack(newWitnessArgs));\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n      witnesses.set(firstIndex, witness)\n    );\n  }\n\n  const txFee = calculateTxFee(txSkeleton, _feeRate);\n  changeCapacity = changeCapacity.sub(txFee);\n\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.pop();\n  });\n  if (changeCapacity.gt(0)) {\n    changeCell.cellOutput.capacity = \"0x\" + changeCapacity.toString(16);\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) =>\n      outputs.push(changeCell)\n    );\n  }\n\n  return txSkeleton;\n}\n\nfunction getTransactionSize(txSkeleton: TransactionSkeletonType): number {\n  const tx = createTransactionFromSkeleton(txSkeleton);\n  return getTransactionSizeByTx(tx);\n}\n\nfunction getTransactionSizeByTx(tx: Transaction): number {\n  const serializedTx = blockchain.Transaction.pack(tx);\n  // 4 is serialized offset bytesize\n  const size = serializedTx.byteLength + 4;\n  return size;\n}\n\nfunction calculateFee(size: number, feeRate: BIish): BI {\n  const ratio = BI.from(1000);\n  const base = BI.from(size).mul(feeRate);\n  const fee = base.div(ratio);\n\n  if (fee.mul(ratio).lt(base)) {\n    return fee.add(1);\n  }\n  return BI.from(fee);\n}\n\nfunction calculateTxFee(\n  txSkeleton: TransactionSkeletonType,\n  feeRate: BIish\n): BI {\n  const txSize = getTransactionSize(txSkeleton);\n  return BI.from(calculateFee(txSize, feeRate));\n}\n\nfunction calculateCodeHashByBin(scriptBin: Uint8Array): string {\n  const bin = scriptBin.valueOf();\n  return new utils.CKBHasher()\n    .update(bin.buffer.slice(bin.byteOffset, bin.byteLength + bin.byteOffset))\n    .digestHex();\n}\n\nasync function getDataHash(outPoint: OutPoint, rpc: RPC): Promise<string> {\n  const txHash = outPoint.txHash;\n  const index = parseInt(outPoint.index, 10);\n  const tx = await rpc.getTransaction(txHash);\n\n  if (!tx) throw new Error(`TxHash(${txHash}) is not found`);\n\n  const outputData = tx.transaction.outputsData[index];\n  if (!outputData) throw new Error(`cannot find output data`);\n\n  return new utils.CKBHasher().update(bytes.bytify(outputData)).digestHex();\n}\n\ninterface ScriptConfig {\n  // if hashType is type, codeHash is ckbHash(type_script)\n  // if hashType is data, codeHash is ckbHash(data)\n  CODE_HASH: string;\n\n  HASH_TYPE: \"type\" | \"data1\";\n\n  TX_HASH: string;\n  // the deploy cell can be found at index of tx's outputs\n  INDEX: string;\n\n  // now deployWithX only supportted `code `\n  DEP_TYPE: \"depGroup\" | \"code\";\n\n  // empty\n  SHORT_ID?: number;\n}\n\nfunction calculateTxHash(txSkeleton: TransactionSkeletonType): string {\n  const tx = createTransactionFromSkeleton(txSkeleton);\n  const txHash = utils.ckbHash(blockchain.Transaction.pack(tx));\n  return txHash;\n}\n\nfunction getScriptConfigByDataHash(\n  txSkeleton: TransactionSkeletonType,\n  outputIndex: number\n): ScriptConfig {\n  const data = txSkeleton.outputs.get(outputIndex)!.data;\n  const codeHash = utils.ckbHash(bytes.bytify(data));\n  const txHash = calculateTxHash(txSkeleton);\n  const scriptConfig: ScriptConfig = {\n    CODE_HASH: codeHash,\n    HASH_TYPE: \"data1\",\n    TX_HASH: txHash,\n    INDEX: \"0x0\",\n    DEP_TYPE: \"code\",\n  };\n  return scriptConfig;\n}\n\nfunction getScriptConfigByTypeHash(\n  txSkeleton: TransactionSkeletonType,\n  outputIndex: number\n): ScriptConfig {\n  const typeScript = txSkeleton.outputs.get(outputIndex)!.cellOutput.type!;\n  const codeHash = utils.computeScriptHash(typeScript);\n  const txHash = calculateTxHash(txSkeleton);\n  const scriptConfig: ScriptConfig = {\n    CODE_HASH: codeHash,\n    HASH_TYPE: \"type\",\n    TX_HASH: txHash,\n    INDEX: \"0x0\",\n    DEP_TYPE: \"code\",\n  };\n  return scriptConfig;\n}\n\nfunction getScriptConfig(\n  txSkeleton: TransactionSkeletonType,\n  outputIndex: number\n): ScriptConfig {\n  const outputCell = txSkeleton.outputs.get(outputIndex);\n  if (outputCell == undefined)\n    throw new Error(\"Invalid txSkeleton or outputIndex\");\n  const type = outputCell.cellOutput.type;\n  if (type !== undefined)\n    return getScriptConfigByTypeHash(txSkeleton, outputIndex);\n  return getScriptConfigByDataHash(txSkeleton, outputIndex);\n}\n\nfunction isMultisigFromInfo(fromInfo: FromInfo): fromInfo is MultisigScript {\n  if (typeof fromInfo !== \"object\") return false;\n  return (\n    \"M\" in fromInfo &&\n    \"R\" in fromInfo &&\n    Array.isArray(fromInfo.publicKeyHashes)\n  );\n}\n\nfunction verifyFromInfo(\n  fromInfo: FromInfo,\n  { config = undefined }: Options = {}\n): void {\n  config = config || getConfig();\n  if (typeof fromInfo === \"string\") {\n    if (\n      helpers.nameOfScript(\n        parseAddress(fromInfo, { config }),\n        config.SCRIPTS\n      ) !== \"SECP256K1_BLAKE160\"\n    )\n      throw new Error(\n        \"only SECP256K1_BLAKE160 or SECP256K1_MULTISIG is supported\"\n      );\n  } else if (!isMultisigFromInfo(fromInfo)) {\n    throw new Error(\n      \"only SECP256K1_BLAKE160 or SECP256K1_MULTISIG is supported\"\n    );\n  }\n}\n\ninterface DeployOptions {\n  cellProvider: CellProvider;\n  scriptBinary: Uint8Array;\n  fromInfo: FromInfo;\n  config?: Config;\n  feeRate?: bigint;\n}\n\ninterface UpgradeOptions extends DeployOptions {\n  typeId: Script;\n}\n\ninterface DeployResult {\n  txSkeleton: TransactionSkeletonType;\n  scriptConfig: ScriptConfig;\n}\n\ninterface TypeIDDeployResult extends DeployResult {\n  typeId: Script;\n}\n\n/**\n * Generate txSkeleton for writing binary data to CKB, usually for deploying contracts.\n * This generator only supports `SECP256K1_BLAKE160` and `SECP256K1_BLAKE160_MULTISIG` currently.\n *\n * @param options\n */\nexport async function generateDeployWithDataTx(\n  options: DeployOptions\n): Promise<DeployResult> {\n  verifyFromInfo(options.fromInfo, { config: options.config });\n\n  let txSkeleton = TransactionSkeleton({ cellProvider: options.cellProvider });\n  const { fromScript } = parseFromInfo(options.fromInfo, {\n    config: options.config,\n  });\n\n  const output: Cell = {\n    cellOutput: {\n      capacity: \"0x0\",\n      lock: fromScript,\n    },\n    data: bytesToHex(options.scriptBinary),\n  };\n\n  txSkeleton = updateOutputs(txSkeleton, output);\n  txSkeleton = updateCellDeps(txSkeleton, options.config);\n  txSkeleton = await completeTx(\n    txSkeleton,\n    options.fromInfo,\n    options.config,\n    options.feeRate\n  );\n\n  const scriptConfig = getScriptConfig(txSkeleton, 0);\n\n  return {\n    txSkeleton,\n    scriptConfig,\n  };\n}\n\n/**\n * Generate txSkeleton for writing binary data to CKB via Type ID, usually for deploying contracts.\n * Deploying via Type ID makes it possible to upgrade contract, for more information about Type ID, please check: https://xuejie.space/2020_02_03_introduction_to_ckb_script_programming_type_id/\n * This generator only supports `SECP256K1_BLAKE160` and `SECP256K1_BLAKE160_MULTISIG` currently.\n *\n * @param options\n */\nexport async function generateDeployWithTypeIdTx(\n  options: DeployOptions\n): Promise<TypeIDDeployResult> {\n  verifyFromInfo(options.fromInfo, { config: options.config });\n\n  let txSkeleton = TransactionSkeleton({ cellProvider: options.cellProvider });\n  const { fromScript } = parseFromInfo(options.fromInfo, {\n    config: options.config,\n  });\n\n  const [resolved] = await findCellsByLock(fromScript, options.cellProvider);\n  if (!resolved) throw new Error(`fromAddress has no live ckb`);\n\n  const typeId = utils.generateTypeIdScript(\n    { previousOutput: resolved.outPoint!, since: \"0x0\" },\n    \"0x0\"\n  );\n  const output: Cell = {\n    cellOutput: {\n      capacity: \"0x0\",\n      lock: fromScript,\n      type: typeId,\n    },\n    data: bytesToHex(options.scriptBinary),\n  };\n\n  txSkeleton = updateOutputs(txSkeleton, output);\n  txSkeleton = updateCellDeps(txSkeleton, options.config);\n  txSkeleton = await completeTx(\n    txSkeleton,\n    options.fromInfo,\n    options.config,\n    options.feeRate\n  );\n\n  const scriptConfig = getScriptConfig(txSkeleton, 0);\n\n  return {\n    txSkeleton,\n    scriptConfig,\n    typeId,\n  };\n}\n\nexport async function generateUpgradeTypeIdDataTx(\n  options: UpgradeOptions\n): Promise<DeployResult> {\n  verifyFromInfo(options.fromInfo, { config: options.config });\n\n  let txSkeleton = TransactionSkeleton({ cellProvider: options.cellProvider });\n  const { fromScript } = parseFromInfo(options.fromInfo, {\n    config: options.config,\n  });\n\n  const collector = options.cellProvider.collector({ type: options.typeId });\n  const cells: Cell[] = [];\n  for await (const cell of collector.collect()) {\n    cells.push(cell);\n  }\n  if (cells.length !== 1) throw new Error(\"the typeid maybe wrong\");\n\n  const deployedCell = cells[0];\n  txSkeleton = txSkeleton.update(\"inputs\", (inputs) => {\n    return inputs.push(deployedCell);\n  });\n\n  const output: Cell = {\n    cellOutput: {\n      capacity: \"0x0\",\n      lock: fromScript,\n      type: options.typeId,\n    },\n    data: bytesToHex(options.scriptBinary),\n  };\n\n  txSkeleton = updateOutputs(txSkeleton, output);\n  txSkeleton = updateCellDeps(txSkeleton, options.config);\n  txSkeleton = await completeTx(\n    txSkeleton,\n    options.fromInfo,\n    options.config,\n    options.feeRate\n  );\n\n  const scriptConfig = getScriptConfig(txSkeleton, 0);\n\n  return {\n    txSkeleton,\n    scriptConfig,\n  };\n}\n\nexport async function compareScriptBinaryWithOnChainData(\n  scriptBinary: Uint8Array,\n  outPoint: OutPoint,\n  rpc: RPC\n): Promise<boolean> {\n  const localHash = calculateCodeHashByBin(scriptBinary);\n  const onChainHash = await getDataHash(outPoint, rpc);\n  return localHash === onChainHash;\n}\n\nexport default {\n  generateDeployWithDataTx,\n  generateDeployWithTypeIdTx,\n  generateUpgradeTypeIdDataTx,\n  compareScriptBinaryWithOnChainData,\n  __tests__: {\n    calculateTxFee,\n  },\n};\n"],"mappings":"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"}