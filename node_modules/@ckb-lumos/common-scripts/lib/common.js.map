{"version":3,"file":"common.js","names":["ScriptValue","values","defaultLogger","level","message","console","log","lockScriptInfos","configHashCode","_predefinedInfos","_customInfos","infos","resetLockScriptInfos","getLockScriptInfos","registerCustomLockScriptInfos","generateLockScriptInfos","config","undefined","getConfig","getPredefinedInfos","secpTemplate","SCRIPTS","SECP256K1_BLAKE160","multisigTemplate","SECP256K1_BLAKE160_MULTISIG","acpTemplate","ANYONE_CAN_PAY","omnilockTemplate","OMNILOCK","predefinedInfos","push","codeHash","CODE_HASH","hashType","HASH_TYPE","lockScriptInfo","secp256k1Blake160","secp256k1Blake160Multisig","anyoneCanPay","omnilock","utils","hashCode","Buffer","from","JSON","stringify","length","transfer","txSkeleton","fromInfos","toAddress","amount","changeAddress","tipHeader","useLocktimeCellsFirst","LocktimePoolCellCollector","LocktimePoolCellCollectorClass","_amount","BI","Error","toScript","parseAddress","targetOutput","cellOutput","capacity","toString","lock","type","data","targetLockScriptInfo","find","setupOutputCell","update","outputs","injectCapacity","enableDeductCapacity","deductAmount","changeLockScript","parseFromInfo","fromScript","changeCell","minimalChangeCapacity","minimalCellCapacityCompatible","changeCapacity","result","locktimePool","injectCapacityWithoutChangeCompatible","LocktimeCellCollector","gt","_commonTransferCompatible","eq","lt","sub","payFee","prepareSigningEntries","_commonTransfer","BigInt","cellProvider","get","getInputKey","input","outPoint","txHash","index","previousInputs","Set","add","fromScripts","map","fromInfo","_deductCapacityCompatible","loop1","cellCollectors","CellCollector","cellCollector","inputCell","collect","inputKey","has","collectInputCompatible","needCapacity","inputCapacity","availableCapacity","deductCapacity","_capacity","lastFreezedOutput","filter","field","maxBy","i","size","output","validate","equals","clonedOutput","parse","cellCapacity","gte","since","defaultWitness","setupInputCell","lastOutputIndex","lastOutput","lastOutputCapacity","lastOutputFixedEntryIndex","findIndex","fixedEntry","isAcpScript","destroyable","_needCapacity","remove","fixedEntries","minimalOutputCapacity","canUseCapacity","clonedLastOutput","outputCapacity","inputLock","payFeeByFeeRate","feeRate","newTxSkeleton","currentTransactionSize","getTransactionSize","fee","calculateFeeCompatible","calculateFee","ratio","base","mul","div","tx","createTransactionFromSkeleton","getTransactionSizeByTx","serializedTx","blockchain","Transaction","pack","byteLength","__tests__"],"sources":["../src/common.ts"],"sourcesContent":["import {\n  parseAddress,\n  TransactionSkeletonType,\n  Options,\n  createTransactionFromSkeleton,\n  minimalCellCapacityCompatible,\n} from \"@ckb-lumos/helpers\";\nimport secp256k1Blake160Multisig from \"./secp256k1_blake160_multisig\";\nimport { FromInfo, parseFromInfo } from \"./from_info\";\nimport secp256k1Blake160 from \"./secp256k1_blake160\";\nimport { getConfig, Config } from \"@ckb-lumos/config-manager\";\nimport locktimePool, {\n  CellCollector as LocktimePoolCellCollectorClass,\n} from \"./locktime_pool\";\nimport {\n  Address,\n  Header,\n  Script,\n  values,\n  Cell,\n  HexString,\n  Hash,\n  PackedSince,\n  utils,\n  Transaction,\n  HashType,\n  blockchain,\n} from \"@ckb-lumos/base\";\nimport anyoneCanPay from \"./anyone_can_pay\";\nconst { ScriptValue } = values;\nimport { Set } from \"immutable\";\nimport { isAcpScript } from \"./helper\";\nimport { BI, BIish } from \"@ckb-lumos/bi\";\nimport { CellCollectorConstructor } from \"./type\";\nimport omnilock from \"./omnilock\";\n\nfunction defaultLogger(level: string, message: string) {\n  console.log(`[${level}] ${message}`);\n}\n/**\n * CellCollector should be a class which implement CellCollectorInterface.\n * If you want to work well with `transfer`, `injectCapacity`, `payFee`, `payFeeByFeeRate`,\n *  please add the `output` at the end of `txSkeleton.get(\"outputs\")`\n */\nexport interface LockScriptInfo {\n  codeHash: Hash;\n  hashType: HashType;\n  lockScriptInfo: {\n    CellCollector: CellCollectorConstructor;\n    setupInputCell(\n      txSkeleton: TransactionSkeletonType,\n      inputCell: Cell,\n      fromInfo?: FromInfo,\n      options?: {\n        config?: Config;\n        defaultWitness?: HexString;\n        since?: PackedSince;\n      }\n    ): Promise<TransactionSkeletonType>;\n    prepareSigningEntries(\n      txSkeleton: TransactionSkeletonType,\n      options: Options\n    ): TransactionSkeletonType;\n    setupOutputCell?: (\n      txSkeleton: TransactionSkeletonType,\n      outputCell: Cell,\n      options: Options\n    ) => Promise<TransactionSkeletonType>;\n  };\n}\ntype LockScriptInfosType = {\n  configHashCode: number;\n  _predefinedInfos: LockScriptInfo[];\n  _customInfos: LockScriptInfo[];\n  infos: LockScriptInfo[];\n};\n/**\n * `infos` includes predefined and customized.\n */\nconst lockScriptInfos: LockScriptInfosType = {\n  configHashCode: 0,\n  _predefinedInfos: [],\n  _customInfos: [],\n  get infos(): LockScriptInfo[] {\n    return [...this._predefinedInfos, ...this._customInfos];\n  },\n};\n\nfunction resetLockScriptInfos(): void {\n  lockScriptInfos.configHashCode = 0;\n  lockScriptInfos._predefinedInfos = [];\n  lockScriptInfos._customInfos = [];\n}\n\nfunction getLockScriptInfos(): LockScriptInfosType {\n  return lockScriptInfos;\n}\n\nexport function registerCustomLockScriptInfos(infos: LockScriptInfo[]): void {\n  lockScriptInfos._customInfos = infos;\n}\n\nfunction generateLockScriptInfos({ config = undefined }: Options = {}): void {\n  config = config || getConfig();\n\n  // lazy load\n  const getPredefinedInfos = () => {\n    const secpTemplate = config?.SCRIPTS.SECP256K1_BLAKE160;\n    const multisigTemplate = config?.SCRIPTS.SECP256K1_BLAKE160_MULTISIG;\n    const acpTemplate = config?.SCRIPTS.ANYONE_CAN_PAY;\n    const omnilockTemplate = config?.SCRIPTS.OMNILOCK;\n\n    const predefinedInfos: LockScriptInfo[] = [];\n\n    if (secpTemplate) {\n      predefinedInfos.push({\n        codeHash: secpTemplate.CODE_HASH,\n        hashType: secpTemplate.HASH_TYPE,\n        lockScriptInfo: secp256k1Blake160,\n      });\n    } else {\n      defaultLogger(\n        \"warn\",\n        \"SECP256K1_BLAKE160 script info not found in config!\"\n      );\n    }\n\n    if (multisigTemplate) {\n      predefinedInfos.push({\n        codeHash: multisigTemplate.CODE_HASH,\n        hashType: multisigTemplate.HASH_TYPE,\n        lockScriptInfo: secp256k1Blake160Multisig,\n      });\n    } else {\n      defaultLogger(\n        \"warn\",\n        \"SECP256K1_BLAKE160_MULTISIG script info not found in config!\"\n      );\n    }\n\n    if (acpTemplate) {\n      predefinedInfos.push({\n        codeHash: acpTemplate.CODE_HASH,\n        hashType: acpTemplate.HASH_TYPE,\n        lockScriptInfo: anyoneCanPay,\n      });\n    } else {\n      defaultLogger(\"warn\", \"ANYONE_CAN_PAY script info not found in config!\");\n    }\n    if (omnilockTemplate) {\n      predefinedInfos.push({\n        codeHash: omnilockTemplate.CODE_HASH,\n        hashType: omnilockTemplate.HASH_TYPE,\n        lockScriptInfo: omnilock,\n      });\n    } else {\n      defaultLogger(\"warn\", \"OMNILOCK script info not found in config!\");\n    }\n\n    return predefinedInfos;\n  };\n\n  const configHashCode: number = utils.hashCode(\n    Buffer.from(JSON.stringify(config))\n  );\n\n  if (lockScriptInfos.infos.length === 0) {\n    lockScriptInfos._predefinedInfos = getPredefinedInfos();\n    lockScriptInfos.configHashCode = configHashCode;\n  } else {\n    if (configHashCode !== lockScriptInfos.configHashCode) {\n      defaultLogger(`warn`, \"`config` changed, regenerate lockScriptInfos!\");\n      lockScriptInfos._predefinedInfos = getPredefinedInfos();\n      lockScriptInfos.configHashCode = configHashCode;\n    }\n  }\n}\n\n/**\n *\n * @param txSkeleton\n * @param fromInfos\n * @param toAddress\n * @param changeAddress\n * @param amount\n * @param tipHeader will not use locktime cells if tipHeader not provided\n * @param options\n */\nexport async function transfer(\n  txSkeleton: TransactionSkeletonType,\n  fromInfos: FromInfo[],\n  toAddress: Address,\n  amount: BIish,\n  changeAddress?: Address,\n  tipHeader?: Header,\n  {\n    config = undefined,\n    useLocktimeCellsFirst = true,\n    LocktimePoolCellCollector = LocktimePoolCellCollectorClass,\n  }: {\n    config?: Config;\n    useLocktimeCellsFirst?: boolean;\n    LocktimePoolCellCollector?: CellCollectorConstructor;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  const _amount = BI.from(amount);\n  if (!toAddress) {\n    throw new Error(\"You must provide a to address!\");\n  }\n\n  const toScript: Script = parseAddress(toAddress, { config });\n  const targetOutput: Cell = {\n    cellOutput: {\n      capacity: \"0x\" + _amount.toString(16),\n      lock: toScript,\n      type: undefined,\n    },\n    data: \"0x\",\n  };\n\n  generateLockScriptInfos({ config });\n\n  const targetLockScriptInfo: LockScriptInfo | undefined =\n    lockScriptInfos.infos.find((lockScriptInfo) => {\n      return (\n        lockScriptInfo.codeHash === toScript.codeHash &&\n        lockScriptInfo.hashType === toScript.hashType\n      );\n    });\n\n  if (\n    targetLockScriptInfo &&\n    targetLockScriptInfo.lockScriptInfo?.setupOutputCell\n  ) {\n    txSkeleton = await targetLockScriptInfo.lockScriptInfo.setupOutputCell(\n      txSkeleton,\n      targetOutput,\n      {\n        config,\n      }\n    );\n  } else {\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n      return outputs.push(targetOutput);\n    });\n  }\n\n  txSkeleton = await injectCapacity(\n    txSkeleton,\n    fromInfos,\n    _amount.toString(),\n    changeAddress,\n    tipHeader,\n    {\n      config,\n      useLocktimeCellsFirst,\n      LocktimePoolCellCollector,\n    }\n  );\n\n  return txSkeleton;\n}\n\nexport async function injectCapacity(\n  txSkeleton: TransactionSkeletonType,\n  fromInfos: FromInfo[],\n  amount: BIish,\n  changeAddress?: Address,\n  tipHeader?: Header,\n  {\n    config = undefined,\n    useLocktimeCellsFirst = true,\n    LocktimePoolCellCollector = LocktimePoolCellCollectorClass,\n    enableDeductCapacity = true,\n  }: {\n    config?: Config;\n    useLocktimeCellsFirst?: boolean;\n    LocktimePoolCellCollector?: CellCollectorConstructor;\n    enableDeductCapacity?: boolean;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  const _amount = BI.from(amount);\n  let deductAmount = _amount;\n\n  if (fromInfos.length === 0) {\n    throw new Error(\"No from info provided!\");\n  }\n\n  const changeLockScript: Script = parseFromInfo(\n    changeAddress || fromInfos[0],\n    { config }\n  ).fromScript;\n  const changeCell: Cell = {\n    cellOutput: {\n      capacity: \"0x0\",\n      lock: changeLockScript,\n      type: undefined,\n    },\n    data: \"0x\",\n  };\n  const minimalChangeCapacity: BI = BI.from(\n    minimalCellCapacityCompatible(changeCell)\n  );\n  let changeCapacity: BI = BI.from(0);\n  if (useLocktimeCellsFirst) {\n    if (tipHeader) {\n      const result = await locktimePool.injectCapacityWithoutChangeCompatible(\n        txSkeleton,\n        fromInfos,\n        deductAmount.toString(),\n        tipHeader,\n        minimalChangeCapacity.toString(),\n        {\n          config,\n          LocktimeCellCollector: LocktimePoolCellCollector,\n          enableDeductCapacity,\n        }\n      );\n      txSkeleton = result.txSkeleton;\n      deductAmount = BI.from(result.capacity);\n      // if deductAmount > 0, changeCapacity must be 0\n      changeCapacity = BI.from(result.changeCapacity);\n    }\n\n    if (deductAmount.gt(0)) {\n      const result = await _commonTransferCompatible(\n        txSkeleton,\n        fromInfos,\n        deductAmount,\n        minimalChangeCapacity,\n        {\n          config,\n          enableDeductCapacity,\n        }\n      );\n      txSkeleton = result.txSkeleton;\n      deductAmount = result.capacity;\n      changeCapacity = result.changeCapacity;\n    } else if (\n      deductAmount.eq(0) &&\n      changeCapacity.gt(0) &&\n      changeCapacity.lt(minimalChangeCapacity)\n    ) {\n      const result = await _commonTransferCompatible(\n        txSkeleton,\n        fromInfos,\n        minimalChangeCapacity.sub(changeCapacity),\n        BI.from(0),\n        { config, enableDeductCapacity }\n      );\n      txSkeleton = result.txSkeleton;\n      deductAmount = result.capacity;\n      changeCapacity = result.changeCapacity;\n    }\n  } else {\n    const result = await _commonTransferCompatible(\n      txSkeleton,\n      fromInfos,\n      deductAmount,\n      minimalChangeCapacity,\n      {\n        config,\n        enableDeductCapacity,\n      }\n    );\n    txSkeleton = result.txSkeleton;\n    deductAmount = result.capacity;\n    changeCapacity = result.changeCapacity;\n\n    if (tipHeader) {\n      if (deductAmount.gt(0)) {\n        const result = await locktimePool.injectCapacityWithoutChangeCompatible(\n          txSkeleton,\n          fromInfos,\n          deductAmount.toString(),\n          tipHeader,\n          minimalChangeCapacity.toString(),\n          {\n            config,\n            LocktimeCellCollector: LocktimePoolCellCollector,\n            enableDeductCapacity,\n          }\n        );\n        txSkeleton = result.txSkeleton;\n        deductAmount = BI.from(result.capacity);\n        changeCapacity = BI.from(result.changeCapacity);\n      } else if (\n        deductAmount.eq(0) &&\n        changeCapacity.gt(0) &&\n        changeCapacity.lt(minimalChangeCapacity)\n      ) {\n        const result = await locktimePool.injectCapacityWithoutChangeCompatible(\n          txSkeleton,\n          fromInfos,\n          minimalChangeCapacity.sub(changeCapacity).toString(),\n          tipHeader,\n          0,\n          {\n            config,\n            LocktimeCellCollector: LocktimePoolCellCollector,\n            enableDeductCapacity,\n          }\n        );\n        txSkeleton = result.txSkeleton;\n        deductAmount = BI.from(result.capacity);\n        changeCapacity = BI.from(result.changeCapacity);\n      }\n    }\n  }\n\n  if (deductAmount.gt(0)) {\n    throw new Error(\"Not enough capacity in from infos!\");\n  }\n\n  if (changeCapacity.gt(0) && changeCapacity.lt(minimalChangeCapacity)) {\n    throw new Error(\"Not enough capacity in from infos for change!\");\n  }\n\n  if (changeCapacity.gt(0)) {\n    changeCell.cellOutput.capacity = \"0x\" + changeCapacity.toString(16);\n\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n      return outputs.push(changeCell);\n    });\n  }\n\n  return txSkeleton;\n}\n\nexport async function payFee(\n  txSkeleton: TransactionSkeletonType,\n  fromInfos: FromInfo[],\n  amount: BIish,\n  tipHeader?: Header,\n  {\n    config = undefined,\n    useLocktimeCellsFirst = true,\n    enableDeductCapacity = true,\n  }: {\n    config?: Config;\n    useLocktimeCellsFirst?: boolean;\n    enableDeductCapacity?: boolean;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  return injectCapacity(txSkeleton, fromInfos, amount, undefined, tipHeader, {\n    config,\n    useLocktimeCellsFirst,\n    enableDeductCapacity,\n  });\n}\n\nexport function prepareSigningEntries(\n  txSkeleton: TransactionSkeletonType,\n  { config = undefined }: Options = {}\n): TransactionSkeletonType {\n  config = config || getConfig();\n\n  generateLockScriptInfos({ config });\n\n  for (const lockScriptInfo of lockScriptInfos.infos) {\n    txSkeleton = lockScriptInfo.lockScriptInfo.prepareSigningEntries(\n      txSkeleton,\n      { config }\n    );\n  }\n\n  return txSkeleton;\n}\n\nasync function _commonTransfer(\n  txSkeleton: TransactionSkeletonType,\n  fromInfos: FromInfo[],\n  amount: bigint,\n  minimalChangeCapacity: bigint,\n  {\n    config = undefined,\n    enableDeductCapacity = true,\n  }: Options & { enableDeductCapacity?: boolean } = {}\n): Promise<{\n  txSkeleton: TransactionSkeletonType;\n  capacity: bigint;\n  changeCapacity: bigint;\n}> {\n  const result = await _commonTransferCompatible(\n    txSkeleton,\n    fromInfos,\n    amount,\n    minimalChangeCapacity,\n    {\n      config,\n      enableDeductCapacity,\n    }\n  );\n  return {\n    txSkeleton: result.txSkeleton,\n    capacity: BigInt(result.capacity.toString()),\n    changeCapacity: BigInt(result.changeCapacity.toString()),\n  };\n}\n\nasync function _commonTransferCompatible(\n  txSkeleton: TransactionSkeletonType,\n  fromInfos: FromInfo[],\n  amount: BIish,\n  minimalChangeCapacity: BIish,\n  {\n    config = undefined,\n    enableDeductCapacity = true,\n  }: Options & { enableDeductCapacity?: boolean } = {}\n): Promise<{\n  txSkeleton: TransactionSkeletonType;\n  capacity: BI;\n  changeCapacity: BI;\n}> {\n  config = config || getConfig();\n  let _amount = BI.from(amount);\n\n  const cellProvider = txSkeleton.get(\"cellProvider\");\n  if (!cellProvider) {\n    throw new Error(\"Cell Provider is missing!\");\n  }\n\n  const getInputKey = (input: Cell) =>\n    `${input.outPoint?.txHash}_${input.outPoint?.index}`;\n  let previousInputs = Set<string>();\n  for (const input of txSkeleton.get(\"inputs\")) {\n    previousInputs = previousInputs.add(getInputKey(input));\n  }\n\n  const fromScripts: Script[] = fromInfos.map((fromInfo) => {\n    return parseFromInfo(fromInfo, { config }).fromScript;\n  });\n\n  for (const fromScript of fromScripts) {\n    if (enableDeductCapacity && _amount.gt(0)) {\n      [txSkeleton, _amount] = _deductCapacityCompatible(\n        txSkeleton,\n        fromScript,\n        _amount\n      );\n    }\n  }\n\n  generateLockScriptInfos({ config });\n\n  let changeCapacity: BI = BI.from(0);\n\n  if (_amount.gt(0)) {\n    // collect cells\n    loop1: for (const fromInfo of fromInfos) {\n      const cellCollectors = lockScriptInfos.infos.map((lockScriptInfo) => {\n        return new lockScriptInfo.lockScriptInfo.CellCollector(\n          fromInfo,\n          cellProvider,\n          {\n            config,\n          }\n        );\n      });\n\n      for (const cellCollector of cellCollectors) {\n        for await (const inputCell of cellCollector.collect()) {\n          const inputKey: string = getInputKey(inputCell);\n          if (previousInputs.has(inputKey)) {\n            continue;\n          }\n          previousInputs = previousInputs.add(inputKey);\n          const result = await collectInputCompatible(\n            txSkeleton,\n            inputCell,\n            fromInfo,\n            {\n              config,\n              needCapacity: _amount,\n            }\n          );\n          txSkeleton = result.txSkeleton;\n\n          const inputCapacity: BI = BI.from(result.availableCapacity);\n          let deductCapacity: BI = inputCapacity;\n          if (deductCapacity.gt(_amount)) {\n            deductCapacity = _amount;\n          }\n          _amount = _amount.sub(deductCapacity);\n          changeCapacity = changeCapacity.add(\n            inputCapacity.sub(deductCapacity)\n          );\n\n          if (\n            _amount.eq(0) &&\n            (changeCapacity.eq(0) || changeCapacity.gt(minimalChangeCapacity))\n          ) {\n            break loop1;\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    txSkeleton,\n    capacity: _amount,\n    changeCapacity,\n  };\n}\n\nfunction _deductCapacityCompatible(\n  txSkeleton: TransactionSkeletonType,\n  fromScript: Script,\n  capacity: BIish\n): [TransactionSkeletonType, BI] {\n  /*\n   * First, check if there is any output cells that contains enough capacity\n   * for us to tinker with.\n   *\n   * TODO: the solution right now won't cover all cases, some outputs before the\n   * last output might still be tinkerable, right now we are working on the\n   * simple solution, later we can change this for more optimizations.\n   */\n  let _capacity = BI.from(capacity);\n  const lastFreezedOutput = txSkeleton\n    .get(\"fixedEntries\")\n    .filter(({ field }) => field === \"outputs\")\n    .maxBy(({ index }) => index);\n  let i = lastFreezedOutput ? lastFreezedOutput.index + 1 : 0;\n  for (; i < txSkeleton.get(\"outputs\").size && _capacity.gt(0); i++) {\n    const output = txSkeleton.get(\"outputs\").get(i);\n    if (\n      output &&\n      new ScriptValue(output.cellOutput.lock, { validate: false }).equals(\n        new ScriptValue(fromScript, { validate: false })\n      )\n    ) {\n      const clonedOutput: Cell = JSON.parse(JSON.stringify(output));\n      const cellCapacity = BI.from(clonedOutput.cellOutput.capacity);\n      const availableCapacity: BI = cellCapacity;\n      let deductCapacity;\n      if (_capacity.gte(availableCapacity)) {\n        deductCapacity = availableCapacity;\n      } else {\n        deductCapacity = cellCapacity.sub(\n          minimalCellCapacityCompatible(clonedOutput)\n        );\n        if (deductCapacity.gt(capacity)) {\n          deductCapacity = capacity;\n        }\n      }\n      _capacity = _capacity.sub(deductCapacity);\n      clonedOutput.cellOutput.capacity =\n        \"0x\" + cellCapacity.sub(deductCapacity).toString(16);\n\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.update(i, () => clonedOutput);\n      });\n    }\n  }\n  // Remove all output cells with capacity equal to 0\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.filter(\n      (output) =>\n        BI.from(output.cellOutput.capacity).toString() !== BI.from(0).toString()\n    );\n  });\n\n  return [txSkeleton, _capacity];\n}\n\n// Alter output generated by `setupInputCell`\nasync function collectInputCompatible(\n  txSkeleton: TransactionSkeletonType,\n  inputCell: Cell,\n  fromInfo?: FromInfo,\n  {\n    config = undefined,\n    since = undefined,\n    defaultWitness = \"0x\",\n    needCapacity = undefined,\n  }: Options & {\n    defaultWitness?: HexString;\n    since?: PackedSince;\n    needCapacity?: BIish;\n  } = {}\n): Promise<{\n  txSkeleton: TransactionSkeletonType;\n  availableCapacity: BI;\n}> {\n  config = config || getConfig();\n\n  txSkeleton = await setupInputCell(txSkeleton, inputCell, fromInfo, {\n    config,\n    since,\n    defaultWitness,\n  });\n\n  const lastOutputIndex: number = txSkeleton.get(\"outputs\").size - 1;\n  const lastOutput: Cell | undefined = txSkeleton\n    .get(\"outputs\")\n    .get(lastOutputIndex);\n  /* c8 ignore next 3 */\n  if (!lastOutput) {\n    throw new Error(\"Impossible: can not find last output\");\n  }\n  const lastOutputCapacity: BI = BI.from(lastOutput.cellOutput.capacity);\n  const lastOutputFixedEntryIndex: number = txSkeleton\n    .get(\"fixedEntries\")\n    .findIndex((fixedEntry) => {\n      return (\n        fixedEntry.field === \"outputs\" && fixedEntry.index === lastOutputIndex\n      );\n    });\n  const fromScript: Script = inputCell.cellOutput.lock;\n\n  let availableCapacity: BI = BI.from(0);\n  if (config.SCRIPTS.ANYONE_CAN_PAY && isAcpScript(fromScript, config)) {\n    const destroyable = !!(\n      fromInfo &&\n      typeof fromInfo === \"object\" &&\n      \"destroyable\" in fromInfo &&\n      fromInfo.destroyable\n    );\n    const _needCapacity = needCapacity\n      ? BI.from(needCapacity)\n      : lastOutputCapacity;\n\n    if (destroyable) {\n      availableCapacity = lastOutputCapacity;\n      // remove output & fixedEntry added by `setupInputCell`\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.remove(lastOutputIndex);\n      });\n      if (lastOutputFixedEntryIndex >= 0) {\n        txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n          return fixedEntries.remove(lastOutputFixedEntryIndex);\n        });\n      }\n    } else {\n      // Ignore `fixedEntries` and update capacity of output which generated by `setupInputCell`\n      const minimalOutputCapacity: BI = BI.from(\n        minimalCellCapacityCompatible(lastOutput)\n      );\n      const canUseCapacity = lastOutputCapacity.sub(minimalOutputCapacity);\n      const clonedLastOutput: Cell = JSON.parse(JSON.stringify(lastOutput));\n      let outputCapacity: BI = minimalOutputCapacity;\n      availableCapacity = canUseCapacity;\n      if (_needCapacity.lt(canUseCapacity)) {\n        outputCapacity = lastOutputCapacity.sub(_needCapacity);\n        availableCapacity = _needCapacity;\n      }\n      clonedLastOutput.cellOutput.capacity = \"0x\" + outputCapacity.toString(16);\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.update(lastOutputIndex, () => clonedLastOutput);\n      });\n    }\n  } else {\n    // Ignore if last output is fixed.\n    if (lastOutputFixedEntryIndex < 0) {\n      // Remove last output\n      availableCapacity = BI.from(\n        txSkeleton.get(\"outputs\").get(lastOutputIndex)?.cellOutput.capacity\n      );\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.remove(lastOutputIndex);\n      });\n    }\n  }\n\n  return {\n    txSkeleton,\n    availableCapacity,\n  };\n}\n\n/**\n * A function to transfer input to output, and add input & output to txSkeleton.\n * And it will deal with cell deps and witnesses too. (Add the input required cell deps and witnesses.)\n * It should be noted that the output must be added to the end of txSkeleton.get(\"outputs\").\n *\n * @param txSkeleton\n * @param inputCell\n * @param fromInfo\n * @param options\n */\nexport async function setupInputCell(\n  txSkeleton: TransactionSkeletonType,\n  inputCell: Cell,\n  fromInfo?: FromInfo,\n  {\n    config = undefined,\n    since = undefined,\n    defaultWitness = undefined,\n  }: Options & {\n    since?: PackedSince;\n    defaultWitness?: HexString;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n\n  generateLockScriptInfos({ config });\n  const inputLock = inputCell.cellOutput.lock;\n\n  const targetLockScriptInfo: LockScriptInfo | undefined =\n    lockScriptInfos.infos.find((lockScriptInfo) => {\n      return (\n        lockScriptInfo.codeHash === inputLock.codeHash &&\n        lockScriptInfo.hashType === inputLock.hashType\n      );\n    });\n\n  if (!targetLockScriptInfo) {\n    throw new Error(`No LockScriptInfo found for setupInputCell!`);\n  }\n\n  return targetLockScriptInfo.lockScriptInfo.setupInputCell(\n    txSkeleton,\n    inputCell,\n    fromInfo,\n    {\n      config,\n      since,\n      defaultWitness,\n    }\n  );\n}\n\nexport async function payFeeByFeeRate(\n  txSkeleton: TransactionSkeletonType,\n  fromInfos: FromInfo[],\n  feeRate: BIish,\n  tipHeader?: Header,\n  {\n    config = undefined,\n    useLocktimeCellsFirst = true,\n    enableDeductCapacity = true,\n  }: {\n    config?: Config;\n    useLocktimeCellsFirst?: boolean;\n    enableDeductCapacity?: boolean;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  let size = 0;\n  let newTxSkeleton: TransactionSkeletonType = txSkeleton;\n\n  /**\n   * Only one case `currentTransactionSize < size` :\n   * change output capacity equals current fee (feeA), so one output reduced,\n   * and if reduce the fee, change output will add again, fee will increase to feeA.\n   */\n  let currentTransactionSize: number = getTransactionSize(newTxSkeleton);\n  while (currentTransactionSize > size) {\n    size = currentTransactionSize;\n    const fee: BI = calculateFeeCompatible(size, feeRate);\n\n    newTxSkeleton = await payFee(txSkeleton, fromInfos, fee, tipHeader, {\n      config,\n      useLocktimeCellsFirst,\n      enableDeductCapacity,\n    });\n    currentTransactionSize = getTransactionSize(newTxSkeleton);\n  }\n\n  return newTxSkeleton;\n}\n\nfunction calculateFee(size: number, feeRate: bigint): bigint {\n  const result = calculateFeeCompatible(size, feeRate);\n  return BigInt(result.toString());\n}\n\nfunction calculateFeeCompatible(size: number, feeRate: BIish): BI {\n  const ratio = BI.from(1000);\n  const base = BI.from(size).mul(feeRate);\n  const fee = base.div(ratio);\n  if (fee.mul(ratio).lt(base)) {\n    return fee.add(1);\n  }\n  return BI.from(fee);\n}\n\nfunction getTransactionSize(txSkeleton: TransactionSkeletonType): number {\n  const tx = createTransactionFromSkeleton(txSkeleton);\n  return getTransactionSizeByTx(tx);\n}\n\nfunction getTransactionSizeByTx(tx: Transaction): number {\n  const serializedTx = blockchain.Transaction.pack(tx);\n  // 4 is serialized offset bytesize\n  const size = serializedTx.byteLength + 4;\n  return size;\n}\n\nexport default {\n  transfer,\n  payFee,\n  prepareSigningEntries,\n  injectCapacity,\n  setupInputCell,\n  registerCustomLockScriptInfos,\n  payFeeByFeeRate,\n  __tests__: {\n    _commonTransfer,\n    resetLockScriptInfos,\n    getLockScriptInfos,\n    generateLockScriptInfos,\n    getTransactionSizeByTx,\n    getTransactionSize,\n    calculateFee,\n    calculateFeeCompatible,\n  },\n};\n"],"mappings":"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"}