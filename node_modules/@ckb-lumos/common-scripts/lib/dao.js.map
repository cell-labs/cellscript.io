{"version":3,"file":"dao.js","names":["parseSince","sinceUtils","DEPOSIT_DAO_DATA","DAO_LOCK_PERIOD_EPOCHS_COMPATIBLE","BI","from","CellCollector","constructor","fromInfo","cellProvider","cellType","config","undefined","Error","getConfig","fromScript","parseFromInfo","daoTypeScript","generateDaoScript","data","cellCollector","collector","lock","type","collect","inputCell","listDaoCells","fromAddress","cell","deposit","txSkeleton","toAddress","amount","DAO_SCRIPT","SCRIPTS","DAO","_checkFromInfoSince","_addDaoCellDep","toScript","parseAddress","codeHash","CODE_HASH","hashType","HASH_TYPE","args","update","outputs","push","cellOutput","capacity","toString","outPoint","blockHash","outputIndex","get","size","fixedEntries","field","index","isSecp256k1Blake160Script","secp256k1Blake160","injectCapacity","isSecp256k1Blake160MultisigScript","secp256k1Blake160Multisig","since","length","number","Uint64LE","unpack","slice","toHexString","relative","withdraw","fromInput","_checkDaoScript","typeScript","fromLockScript","setupInputCell","generateAddress","targetOutputIndex","targetOutput","clonedTargetOutput","JSON","parse","stringify","blockNumber","bytes","hexify","Uint64","pack","headerDeps","parseEpochCompatible","epoch","_epoch","shr","and","epochSinceCompatible","_length","_index","_number","shl","add","unlock","depositInput","withdrawInput","RpcClient","RPC","rpc","uri","withdrawTypeScript","depositBlockHeader","getHeader","depositEpoch","withdrawBlockHeader","withdrawEpoch","withdrawFraction","mul","depositFraction","depositedEpochs","sub","gt","lockEpochs","div","minimalSinceEpoch","minimalSince","outputCapacity","calculateMaximumWithdrawCompatible","dao","witnesses","depositHeaderDepIndex","defaultWitnessArgs","inputType","defaultWitness","blockchain","WitnessArgs","lastOutputIndex","remove","calculateDaoEarliestSince","depositBlockHeaderEpoch","withdrawBlockHeaderEpoch","result","calculateDaoEarliestSinceCompatible","BigInt","template","addCellDep","txHash","TX_HASH","INDEX","depType","DEP_TYPE","extractDaoDataCompatible","test","len","hex","startsWith","map","key","i","reduce","c","calculateMaximumWithdraw","withdrawCell","depositDao","withdrawDao","toBigInt","depositAR","ar","withdrawAR","occupiedCapacity","minimalCellCapacityCompatible","countedCapacity","withdrawCountedCapacity"],"sources":["../src/dao.ts"],"sourcesContent":["import {\n  parseAddress,\n  TransactionSkeletonType,\n  Options,\n  generateAddress,\n  minimalCellCapacityCompatible,\n} from \"@ckb-lumos/helpers\";\nimport {\n  since as sinceUtils,\n  HexString,\n  Address,\n  CellProvider,\n  Cell,\n  WitnessArgs,\n  PackedDao,\n  PackedSince,\n  CellCollector as CellCollectorInterface,\n  blockchain,\n} from \"@ckb-lumos/base\";\nimport { bytes, number } from \"@ckb-lumos/codec\";\nimport { getConfig, Config } from \"@ckb-lumos/config-manager\";\nconst { parseSince } = sinceUtils;\nimport secp256k1Blake160 from \"./secp256k1_blake160\";\nimport secp256k1Blake160Multisig from \"./secp256k1_blake160_multisig\";\nimport { FromInfo, parseFromInfo } from \"./from_info\";\nimport {\n  addCellDep,\n  isSecp256k1Blake160Script,\n  isSecp256k1Blake160MultisigScript,\n  generateDaoScript,\n} from \"./helper\";\nimport { BI, BIish } from \"@ckb-lumos/bi\";\nimport { RPC } from \"@ckb-lumos/rpc\";\n\nconst DEPOSIT_DAO_DATA: HexString = \"0x0000000000000000\";\nconst DAO_LOCK_PERIOD_EPOCHS_COMPATIBLE = BI.from(180);\n\nexport class CellCollector implements CellCollectorInterface {\n  private cellCollector: CellCollectorInterface;\n  private cellType: \"all\" | \"deposit\" | \"withdraw\";\n\n  constructor(\n    fromInfo: FromInfo,\n    cellProvider: CellProvider,\n    cellType: \"all\" | \"deposit\" | \"withdraw\",\n    { config = undefined }: Options = {}\n  ) {\n    if (!cellProvider) {\n      throw new Error(\"Cell Provider is missing!\");\n    }\n\n    config = config || getConfig();\n\n    const fromScript = parseFromInfo(fromInfo, { config }).fromScript;\n    const daoTypeScript = generateDaoScript(config);\n    const data: HexString | string =\n      cellType === \"deposit\" ? DEPOSIT_DAO_DATA : \"any\";\n    this.cellType = cellType;\n\n    this.cellCollector = cellProvider.collector({\n      lock: fromScript,\n      type: daoTypeScript,\n      data,\n    });\n  }\n\n  async *collect(): AsyncGenerator<Cell> {\n    for await (const inputCell of this.cellCollector.collect()) {\n      if (this.cellType === \"withdraw\" && inputCell.data === DEPOSIT_DAO_DATA) {\n        continue;\n      }\n\n      yield inputCell;\n    }\n  }\n}\n\n/**\n * list DAO cells,\n *\n * @param cellProvider\n * @param fromAddress\n * @param cellType\n * @param options\n */\nexport async function* listDaoCells(\n  cellProvider: CellProvider,\n  fromAddress: Address,\n  cellType: \"all\" | \"deposit\" | \"withdraw\",\n  { config = undefined }: Options = {}\n): AsyncIterator<Cell> {\n  const collector = new CellCollector(fromAddress, cellProvider, cellType, {\n    config,\n  });\n\n  for await (const cell of collector.collect()) {\n    yield cell;\n  }\n}\n\n// TODO: reject multisig with non absolute-epoch-number locktime lock\n/**\n * deposit a cell to DAO\n *\n * @param txSkeleton\n * @param fromInfo\n * @param toAddress deposit cell lock address\n * @param amount capacity in shannon\n * @param options\n */\nexport async function deposit(\n  txSkeleton: TransactionSkeletonType,\n  fromInfo: FromInfo,\n  toAddress: Address,\n  amount: BIish,\n  { config = undefined }: Options = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  const DAO_SCRIPT = config.SCRIPTS.DAO;\n  if (!DAO_SCRIPT) {\n    throw new Error(\"Provided config does not have DAO script setup!\");\n  }\n\n  _checkFromInfoSince(fromInfo, config);\n\n  // check and add cellDep if not exists\n  txSkeleton = _addDaoCellDep(txSkeleton, config);\n\n  if (!toAddress) {\n    throw new Error(\"You must provide a to address!\");\n  }\n\n  const toScript = parseAddress(toAddress, { config });\n  const daoTypeScript = {\n    codeHash: DAO_SCRIPT.CODE_HASH,\n    hashType: DAO_SCRIPT.HASH_TYPE,\n    args: \"0x\",\n  };\n\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push({\n      cellOutput: {\n        capacity: \"0x\" + BI.from(amount).toString(16),\n        lock: toScript,\n        type: daoTypeScript,\n      },\n      data: DEPOSIT_DAO_DATA,\n      outPoint: undefined,\n      blockHash: undefined,\n    });\n  });\n\n  const outputIndex = txSkeleton.get(\"outputs\").size - 1;\n\n  // fix entry\n  txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n    return fixedEntries.push({\n      field: \"outputs\",\n      index: outputIndex,\n    });\n  });\n\n  if (typeof fromInfo === \"string\") {\n    const fromScript = parseAddress(fromInfo, { config });\n    // address\n    if (isSecp256k1Blake160Script(fromScript, config)) {\n      txSkeleton = await secp256k1Blake160.injectCapacity(\n        txSkeleton,\n        outputIndex,\n        fromInfo,\n        {\n          config,\n        }\n      );\n    } else if (isSecp256k1Blake160MultisigScript(fromScript, config)) {\n      txSkeleton = await secp256k1Blake160Multisig.injectCapacity(\n        txSkeleton,\n        outputIndex,\n        fromInfo,\n        { config }\n      );\n    }\n  } else if (fromInfo) {\n    txSkeleton = await secp256k1Blake160Multisig.injectCapacity(\n      txSkeleton,\n      outputIndex,\n      fromInfo,\n      {\n        config,\n      }\n    );\n  }\n\n  return txSkeleton;\n}\n\nfunction _checkFromInfoSince(fromInfo: FromInfo, config: Config): void {\n  let since;\n  if (typeof fromInfo === \"string\") {\n    // fromInfo is an address\n    const fromScript = parseAddress(fromInfo, { config });\n    const args = fromScript.args;\n    if (args.length === 58) {\n      since = number.Uint64LE.unpack(\"0x\" + args.slice(42)).toHexString();\n    }\n  } else if (\"R\" in fromInfo) {\n    since = fromInfo.since;\n  }\n\n  if (since != null) {\n    const { relative, type } = parseSince(since);\n    if (!(!relative && type === \"epochNumber\")) {\n      throw new Error(\n        \"Can't deposit a dao cell with multisig locktime which not using absolute-epoch-number format!\"\n      );\n    }\n  }\n}\n\n/**\n * withdraw an deposited DAO cell\n *\n * @param txSkeleton\n * @param fromInput deposited DAO cell\n * @param fromInfo\n * @param options\n */\nasync function withdraw(\n  txSkeleton: TransactionSkeletonType,\n  fromInput: Cell,\n  fromInfo?: FromInfo,\n  { config = undefined }: Options = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  _checkDaoScript(config);\n  txSkeleton = _addDaoCellDep(txSkeleton, config);\n\n  // check inputs.size == outputs.size\n  if (txSkeleton.get(\"inputs\").size !== txSkeleton.get(\"outputs\").size) {\n    throw new Error(\"Input size must equals to output size in txSkeleton!\");\n  }\n\n  if (!config.SCRIPTS.DAO) {\n    throw new Error(\"Provided config does not have DAO script setup!\");\n  }\n\n  // TODO: check fromInput\n\n  const cellProvider = txSkeleton.get(\"cellProvider\");\n  if (!cellProvider) {\n    throw new Error(\"Cell provider is missing!\");\n  }\n  const typeScript = fromInput.cellOutput.type;\n  const DAO_SCRIPT = config.SCRIPTS.DAO;\n  if (\n    !typeScript ||\n    typeScript.codeHash !== DAO_SCRIPT.CODE_HASH ||\n    typeScript.hashType !== DAO_SCRIPT.HASH_TYPE ||\n    fromInput.data !== DEPOSIT_DAO_DATA\n  ) {\n    throw new Error(\"fromInput is not a DAO deposit cell.\");\n  }\n\n  // setup input cell\n  const fromLockScript = fromInput.cellOutput.lock;\n  if (isSecp256k1Blake160Script(fromLockScript, config)) {\n    txSkeleton = await secp256k1Blake160.setupInputCell(\n      txSkeleton,\n      fromInput,\n      undefined,\n      {\n        config,\n      }\n    );\n  } else if (isSecp256k1Blake160MultisigScript(fromLockScript, config)) {\n    txSkeleton = await secp256k1Blake160Multisig.setupInputCell(\n      txSkeleton,\n      fromInput,\n      fromInfo || generateAddress(fromLockScript, { config }),\n      { config }\n    );\n  }\n\n  const targetOutputIndex: number = txSkeleton.get(\"outputs\").size - 1;\n  const targetOutput: Cell = txSkeleton.get(\"outputs\").get(targetOutputIndex)!;\n  const clonedTargetOutput: Cell = JSON.parse(JSON.stringify(targetOutput));\n  if (!fromInput.blockNumber) {\n    throw new Error(\"fromInput has no blockNumber!\");\n  } else {\n    clonedTargetOutput.data = bytes.hexify(\n      number.Uint64.pack(fromInput.blockNumber)\n    );\n  }\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.update(targetOutputIndex, () => clonedTargetOutput);\n  });\n\n  // add header deps\n  txSkeleton = txSkeleton.update(\"headerDeps\", (headerDeps) => {\n    return headerDeps.push(fromInput.blockHash!);\n  });\n\n  // fix inputs / outputs / witnesses\n  txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n    return fixedEntries.push(\n      {\n        field: \"inputs\",\n        index: txSkeleton.get(\"inputs\").size - 1,\n      },\n      {\n        field: \"outputs\",\n        index: txSkeleton.get(\"outputs\").size - 1,\n      }\n    );\n  });\n\n  return txSkeleton;\n}\n\nfunction parseEpochCompatible(epoch: BIish): {\n  length: BI;\n  index: BI;\n  number: BI;\n} {\n  const _epoch = BI.from(epoch);\n  return {\n    length: _epoch.shr(40).and(0xfff),\n    index: _epoch.shr(24).and(0xfff),\n    number: _epoch.and(0xffffff),\n  };\n}\n\nfunction epochSinceCompatible({\n  length,\n  index,\n  number,\n}: {\n  length: BIish;\n  index: BIish;\n  number: BIish;\n}): BI {\n  const _length = BI.from(length);\n  const _index = BI.from(index);\n  const _number = BI.from(number);\n  return BI.from(0x20)\n    .shl(56)\n    .add(_length.shl(40))\n    .add(_index.shl(24))\n    .add(_number);\n}\n\n/**\n * Unlock a withdrew DAO cell\n *\n * @param txSkeleton\n * @param depositInput deposited DAO cell\n * @param withdrawInput withdrew DAO cell\n * @param toAddress\n * @param fromInfo\n * @param options\n */\nexport async function unlock(\n  txSkeleton: TransactionSkeletonType,\n  depositInput: Cell,\n  withdrawInput: Cell,\n  toAddress: Address,\n  fromInfo: FromInfo,\n  {\n    config = undefined,\n    RpcClient = RPC,\n  }: Options & { RpcClient?: typeof RPC } = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  _checkDaoScript(config);\n  txSkeleton = _addDaoCellDep(txSkeleton, config);\n\n  if (!config.SCRIPTS.DAO) {\n    throw new Error(\"Provided config does not have DAO script setup!\");\n  }\n\n  const cellProvider = txSkeleton.get(\"cellProvider\");\n  if (!cellProvider) {\n    throw new Error(\"Cell provider is missing!\");\n  }\n  const rpc = new RpcClient(cellProvider.uri!);\n\n  const typeScript = depositInput.cellOutput.type;\n  const DAO_SCRIPT = config.SCRIPTS.DAO;\n  if (\n    !typeScript ||\n    typeScript.codeHash !== DAO_SCRIPT.CODE_HASH ||\n    typeScript.hashType !== DAO_SCRIPT.HASH_TYPE ||\n    depositInput.data !== DEPOSIT_DAO_DATA\n  ) {\n    throw new Error(\"depositInput is not a DAO deposit cell.\");\n  }\n\n  const withdrawTypeScript = withdrawInput.cellOutput.type;\n  if (\n    !withdrawTypeScript ||\n    withdrawTypeScript.codeHash !== DAO_SCRIPT.CODE_HASH ||\n    withdrawTypeScript.hashType !== DAO_SCRIPT.HASH_TYPE ||\n    withdrawInput.data === DEPOSIT_DAO_DATA\n  ) {\n    throw new Error(\"withdrawInput is not a DAO withdraw cell.\");\n  }\n\n  // calculate since & capacity (interest)\n  const depositBlockHeader = await rpc.getHeader(depositInput.blockHash!);\n  const depositEpoch = parseEpochCompatible(depositBlockHeader!.epoch);\n  // const depositCapacity = BigInt(depositInput.cellOutput.capacity)\n\n  const withdrawBlockHeader = await rpc.getHeader(withdrawInput.blockHash!);\n  const withdrawEpoch = parseEpochCompatible(withdrawBlockHeader!.epoch);\n\n  const withdrawFraction = withdrawEpoch.index.mul(depositEpoch.length);\n  const depositFraction = depositEpoch.index.mul(withdrawEpoch.length);\n  let depositedEpochs = withdrawEpoch.number.sub(depositEpoch.number);\n\n  if (withdrawFraction.gt(depositFraction)) {\n    depositedEpochs = depositedEpochs.add(1);\n  }\n\n  const lockEpochs = depositedEpochs\n    .add(DAO_LOCK_PERIOD_EPOCHS_COMPATIBLE)\n    .sub(1)\n    .div(DAO_LOCK_PERIOD_EPOCHS_COMPATIBLE)\n    .mul(DAO_LOCK_PERIOD_EPOCHS_COMPATIBLE);\n  const minimalSinceEpoch = {\n    number: BI.from(depositEpoch.number.add(lockEpochs)),\n    index: BI.from(depositEpoch.index),\n    length: BI.from(depositEpoch.length),\n  };\n  const minimalSince = epochSinceCompatible(minimalSinceEpoch);\n\n  const outputCapacity: HexString =\n    \"0x\" +\n    calculateMaximumWithdrawCompatible(\n      withdrawInput,\n      depositBlockHeader!.dao,\n      withdrawBlockHeader!.dao\n    ).toString(16);\n\n  const toScript = parseAddress(toAddress, { config });\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push({\n      cellOutput: {\n        capacity: outputCapacity,\n        lock: toScript,\n        type: undefined,\n      },\n      data: \"0x\",\n      outPoint: undefined,\n      blockHash: undefined,\n    });\n  });\n\n  const since: PackedSince = \"0x\" + minimalSince.toString(16);\n\n  while (txSkeleton.get(\"witnesses\").size < txSkeleton.get(\"inputs\").size - 1) {\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n      witnesses.push(\"0x\")\n    );\n  }\n\n  // add header deps\n  txSkeleton = txSkeleton.update(\"headerDeps\", (headerDeps) => {\n    return headerDeps.push(depositInput.blockHash!, withdrawInput.blockHash!);\n  });\n\n  const depositHeaderDepIndex = txSkeleton.get(\"headerDeps\").size - 2;\n\n  // setup input cell\n  const defaultWitnessArgs: WitnessArgs = {\n    inputType: bytes.hexify(number.Uint64LE.pack(depositHeaderDepIndex)),\n  };\n  const defaultWitness: HexString = bytes.hexify(\n    blockchain.WitnessArgs.pack(defaultWitnessArgs)\n  );\n  const fromLockScript = withdrawInput.cellOutput.lock;\n  if (isSecp256k1Blake160Script(fromLockScript, config)) {\n    txSkeleton = await secp256k1Blake160.setupInputCell(\n      txSkeleton,\n      withdrawInput,\n      undefined,\n      {\n        config,\n        since,\n        defaultWitness,\n      }\n    );\n  } else if (isSecp256k1Blake160MultisigScript(fromLockScript, config)) {\n    txSkeleton = await secp256k1Blake160Multisig.setupInputCell(\n      txSkeleton,\n      withdrawInput,\n      fromInfo || generateAddress(fromLockScript, { config }),\n      { config, since, defaultWitness }\n    );\n  }\n  // remove change output by setupInputCell\n  const lastOutputIndex: number = txSkeleton.get(\"outputs\").size - 1;\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.remove(lastOutputIndex);\n  });\n\n  // fix inputs / outputs / witnesses\n  txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n    return fixedEntries.push(\n      {\n        field: \"inputs\",\n        index: txSkeleton.get(\"inputs\").size - 1,\n      },\n      {\n        field: \"outputs\",\n        index: txSkeleton.get(\"outputs\").size - 1,\n      },\n      {\n        field: \"witnesses\",\n        index: txSkeleton.get(\"witnesses\").size - 1,\n      },\n      {\n        field: \"headerDeps\",\n        index: txSkeleton.get(\"headerDeps\").size - 2,\n      }\n    );\n  });\n\n  return txSkeleton;\n}\n\n/**\n * calculate a withdraw dao cell minimal unlock since\n *\n * @param depositBlockHeaderEpoch depositBlockHeader.epoch\n * @param withdrawBlockHeaderEpoch withdrawBlockHeader.epoch\n */\nexport function calculateDaoEarliestSince(\n  depositBlockHeaderEpoch: HexString,\n  withdrawBlockHeaderEpoch: HexString\n): bigint {\n  const result = calculateDaoEarliestSinceCompatible(\n    depositBlockHeaderEpoch,\n    withdrawBlockHeaderEpoch\n  );\n  return BigInt(result.toString());\n}\n\n/**\n * calculate a withdraw dao cell minimal unlock since\n *\n * @param depositBlockHeaderEpoch depositBlockHeader.epoch\n * @param withdrawBlockHeaderEpoch withdrawBlockHeader.epoch\n */\nexport function calculateDaoEarliestSinceCompatible(\n  depositBlockHeaderEpoch: HexString,\n  withdrawBlockHeaderEpoch: HexString\n): BI {\n  const depositEpoch = parseEpochCompatible(depositBlockHeaderEpoch);\n  const withdrawEpoch = parseEpochCompatible(withdrawBlockHeaderEpoch);\n  const withdrawFraction = withdrawEpoch.index.mul(depositEpoch.length);\n  const depositFraction = depositEpoch.index.mul(withdrawEpoch.length);\n  let depositedEpochs = withdrawEpoch.number.sub(depositEpoch.number);\n\n  if (withdrawFraction.gt(depositFraction)) {\n    depositedEpochs = depositedEpochs.add(1);\n  }\n\n  const lockEpochs = depositedEpochs\n    .add(DAO_LOCK_PERIOD_EPOCHS_COMPATIBLE)\n    .sub(1)\n    .div(DAO_LOCK_PERIOD_EPOCHS_COMPATIBLE)\n    .mul(DAO_LOCK_PERIOD_EPOCHS_COMPATIBLE);\n  const minimalSinceEpoch = {\n    number: BI.from(depositEpoch.number.add(lockEpochs)),\n    index: BI.from(depositEpoch.index),\n    length: BI.from(depositEpoch.length),\n  };\n  return epochSinceCompatible(minimalSinceEpoch);\n}\n\nfunction _checkDaoScript(config: Config): void {\n  const DAO_SCRIPT = config.SCRIPTS.DAO;\n  if (!DAO_SCRIPT) {\n    throw new Error(\"Provided config does not have DAO script setup!\");\n  }\n}\n\n/**\n *\n * @param {TransactionSkeleton} txSkeleton\n * @param {any} config\n * @returns {TransactionSkeleton} txSkeleton\n */\nfunction _addDaoCellDep(\n  txSkeleton: TransactionSkeletonType,\n  config: Config\n): TransactionSkeletonType {\n  const template = config.SCRIPTS.DAO!;\n  return addCellDep(txSkeleton, {\n    outPoint: {\n      txHash: template.TX_HASH,\n      index: template.INDEX,\n    },\n    depType: template.DEP_TYPE,\n  });\n}\n\nexport function extractDaoDataCompatible(dao: PackedDao): {\n  [key: string]: BI;\n} {\n  if (!/^(0x)?([0-9a-fA-F]){64}$/.test(dao)) {\n    throw new Error(\"Invalid dao format!\");\n  }\n\n  const len = 8 * 2;\n  const hex = dao.startsWith(\"0x\") ? dao.slice(2) : dao;\n\n  return [\"c\", \"ar\", \"s\", \"u\"]\n    .map((key, i) => {\n      return {\n        [key]: number.Uint64LE.unpack(\"0x\" + hex.slice(len * i, len * (i + 1))),\n      };\n    })\n    .reduce((result, c) => ({ ...result, ...c }), {});\n}\n\n/**\n * calculate maximum withdraw capacity when unlock\n *\n * @param withdrawCell withdrawCell or depositCell\n * @param depositDao depositBlockHeader.dao\n * @param withdrawDao withdrawBlockHeader.dao\n */\nexport function calculateMaximumWithdraw(\n  withdrawCell: Cell,\n  depositDao: PackedDao,\n  withdrawDao: PackedDao\n): bigint {\n  return calculateMaximumWithdrawCompatible(\n    withdrawCell,\n    depositDao,\n    withdrawDao\n  ).toBigInt();\n}\n\n/**\n * calculate maximum withdraw capacity when unlock\n *\n * @param withdrawCell withdrawCell or depositCell\n * @param depositDao depositBlockHeader.dao\n * @param withdrawDao withdrawBlockHeader.dao\n */\nexport function calculateMaximumWithdrawCompatible(\n  withdrawCell: Cell,\n  depositDao: PackedDao,\n  withdrawDao: PackedDao\n): BI {\n  const depositAR = BI.from(extractDaoDataCompatible(depositDao).ar);\n  const withdrawAR = BI.from(extractDaoDataCompatible(withdrawDao).ar);\n\n  const occupiedCapacity = BI.from(minimalCellCapacityCompatible(withdrawCell));\n  const outputCapacity = BI.from(withdrawCell.cellOutput.capacity);\n  const countedCapacity = outputCapacity.sub(occupiedCapacity);\n  const withdrawCountedCapacity = countedCapacity\n    .mul(withdrawAR)\n    .div(depositAR);\n\n  return withdrawCountedCapacity.add(occupiedCapacity);\n}\n\nexport default {\n  deposit,\n  withdraw,\n  unlock,\n  calculateMaximumWithdraw,\n  calculateMaximumWithdrawCompatible,\n  calculateDaoEarliestSince,\n  calculateDaoEarliestSinceCompatible,\n  CellCollector,\n  listDaoCells,\n};\n"],"mappings":"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"}