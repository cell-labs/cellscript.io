{"version":3,"file":"anyone_can_pay.js","names":["ScriptValue","values","CKBHasher","ckbHash","utils","CellCollector","constructor","fromInfo","cellProvider","config","undefined","queryOptions","Error","getConfig","fromScript","parseFromInfo","lock","type","cellCollector","collector","collect","isAcpScript","inputCell","setupInputCell","txSkeleton","_fromInfo","defaultWitness","since","inputLock","cellOutput","update","inputs","push","inputSinces","set","get","size","witnesses","outputCell","capacity","data","outputs","fixedEntries","field","index","template","SCRIPTS","ANYONE_CAN_PAY","scriptOutPoint","txHash","TX_HASH","INDEX","addCellDep","outPoint","depType","DEP_TYPE","firstIndex","findIndex","input","validate","equals","witness","newWitnessArgs","SECP_SIGNATURE_PLACEHOLDER","witnessArgs","blockchain","WitnessArgs","unpack","bytes","bytify","equal","inputType","outputType","hexify","pack","checkLimit","acpArgs","_capacity","BI","from","minimalAmount","minimalCapacity","length","pow","slice","multiplier","multiplicand","mul","lt","setupOutputCell","toScript","args","toString","toAddress","generateAddress","toAddressCellCollector","toAddressInput","next","value","outputCapacity","add","injectCapacity","outputIndex","lastFreezedOutput","filter","maxBy","i","gt","output","cellCapacity","availableCapacity","sub","minimalCellCapacityCompatible","deductCapacity","gte","eq","getInputKey","changeCell","blockHash","changeCapacity","minimalChangeCapacity","previousInputs","Set","has","lastOutputIndex","remove","fixedEntryIndex","fixedEntry","inputCapacity","prepareSigningEntries","scriptType","processedArgs","tx","createTransactionFromSkeleton","RawTransaction","signingEntries","CODE_HASH","codeHash","HASH_TYPE","hashType","sumOfOutputCapacity","map","reduce","result","c","sumOfOutputAmount","number","Uint128LE","fInputs","sumOfInputCapacity","sumOfInputAmount","lte","lockValue","hasher","hashWitness","j","otherInput","signingEntry","message","digestHex","withdraw","fromInput","fromInputCapacity","inputMinimalCellCapacity","parseAddress","targetOutput"],"sources":["../src/anyone_can_pay.ts"],"sourcesContent":["import {\n  Address,\n  Cell,\n  CellCollector as BaseCellCollectorType,\n  CellProvider,\n  HexString,\n  OutPoint,\n  PackedSince,\n  QueryOptions,\n  Script,\n  utils,\n  values,\n  WitnessArgs,\n  blockchain,\n} from \"@ckb-lumos/base\";\nimport { bytes, number } from \"@ckb-lumos/codec\";\nimport { Config, getConfig } from \"@ckb-lumos/config-manager\";\nimport {\n  createTransactionFromSkeleton,\n  generateAddress,\n  minimalCellCapacityCompatible,\n  Options,\n  parseAddress,\n  TransactionSkeletonType,\n} from \"@ckb-lumos/helpers\";\nimport { List, Set } from \"immutable\";\nimport { BI, BIish } from \"@ckb-lumos/bi\";\nimport { FromInfo, parseFromInfo } from \"./from_info\";\nimport {\n  addCellDep,\n  hashWitness,\n  isAcpScript,\n  SECP_SIGNATURE_PLACEHOLDER,\n} from \"./helper\";\nimport { CellCollectorConstructor, CellCollectorType } from \"./type\";\nconst { ScriptValue } = values;\nconst { CKBHasher, ckbHash } = utils;\n\nexport const CellCollector: CellCollectorConstructor = class CellCollector\n  implements CellCollectorType\n{\n  private cellCollector: BaseCellCollectorType;\n  private config: Config;\n  public readonly fromScript: Script;\n\n  constructor(\n    fromInfo: FromInfo,\n    cellProvider: CellProvider,\n    {\n      config = undefined,\n      queryOptions = {},\n    }: Options & {\n      queryOptions?: QueryOptions;\n    } = {}\n  ) {\n    if (!cellProvider) {\n      throw new Error(`Cell provider is missing!`);\n    }\n    config = config || getConfig();\n    this.fromScript = parseFromInfo(fromInfo, { config }).fromScript;\n\n    this.config = config;\n\n    queryOptions = {\n      ...queryOptions,\n      lock: this.fromScript,\n      type: queryOptions.type || \"empty\",\n    };\n\n    this.cellCollector = cellProvider.collector(queryOptions);\n  }\n\n  async *collect(): AsyncGenerator<Cell> {\n    if (!isAcpScript(this.fromScript, this.config)) {\n      return;\n    }\n    for await (const inputCell of this.cellCollector.collect()) {\n      yield inputCell;\n    }\n  }\n};\n\nexport async function setupInputCell(\n  txSkeleton: TransactionSkeletonType,\n  inputCell: Cell,\n  _fromInfo?: FromInfo,\n  {\n    config = undefined,\n    defaultWitness = \"0x\",\n    since = undefined,\n  }: Options & {\n    defaultWitness?: HexString;\n    since?: PackedSince;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n\n  const inputLock: Script = inputCell.cellOutput.lock;\n  if (!isAcpScript(inputLock, config)) {\n    throw new Error(\"Not anyone-can-pay input!\");\n  }\n\n  // add inputCell to txSkeleton\n  txSkeleton = txSkeleton.update(\"inputs\", (inputs) => {\n    return inputs.push(inputCell);\n  });\n\n  if (since) {\n    txSkeleton = txSkeleton.update(\"inputSinces\", (inputSinces) => {\n      return inputSinces.set(txSkeleton.get(\"inputs\").size - 1, since);\n    });\n  }\n\n  txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => {\n    return witnesses.push(defaultWitness);\n  });\n\n  const outputCell: Cell = {\n    cellOutput: {\n      capacity: inputCell.cellOutput.capacity,\n      lock: inputCell.cellOutput.lock,\n      type: inputCell.cellOutput.type,\n    },\n    data: inputCell.data,\n  };\n\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push(outputCell);\n  });\n\n  txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n    return fixedEntries.push({\n      field: \"outputs\",\n      index: txSkeleton.get(\"outputs\").size - 1,\n    });\n  });\n\n  const template = config.SCRIPTS.ANYONE_CAN_PAY;\n  if (!template) {\n    throw new Error(`ANYONE_CAN_PAY script not defined in config!`);\n  }\n\n  const scriptOutPoint: OutPoint = {\n    txHash: template.TX_HASH,\n    index: template.INDEX,\n  };\n\n  // add cell_dep\n  txSkeleton = addCellDep(txSkeleton, {\n    outPoint: scriptOutPoint,\n    depType: template.DEP_TYPE,\n  });\n\n  // add witness\n  const firstIndex = txSkeleton.get(\"inputs\").findIndex((input) => {\n    return new ScriptValue(input.cellOutput.lock, { validate: false }).equals(\n      new ScriptValue(inputLock, { validate: false })\n    );\n  });\n  if (firstIndex !== -1) {\n    while (firstIndex >= txSkeleton.get(\"witnesses\").size) {\n      txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => {\n        return witnesses.push(\"0x\");\n      });\n    }\n    let witness: HexString = txSkeleton.get(\"witnesses\").get(firstIndex)!;\n    const newWitnessArgs: WitnessArgs = {\n      /* 65-byte zeros in hex */\n      lock: SECP_SIGNATURE_PLACEHOLDER,\n    };\n    if (witness !== \"0x\") {\n      const witnessArgs = blockchain.WitnessArgs.unpack(bytes.bytify(witness));\n      const lock = witnessArgs.lock;\n      if (\n        !!lock &&\n        !!newWitnessArgs.lock &&\n        !bytes.equal(lock, newWitnessArgs.lock)\n      ) {\n        throw new Error(\n          \"Lock field in first witness is set aside for signature!\"\n        );\n      }\n      const inputType = witnessArgs.inputType;\n      if (inputType) {\n        newWitnessArgs.inputType = inputType;\n      }\n      const outputType = witnessArgs.outputType;\n      if (outputType) {\n        newWitnessArgs.outputType = outputType;\n      }\n    }\n    witness = bytes.hexify(blockchain.WitnessArgs.pack(newWitnessArgs));\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => {\n      return witnesses.set(firstIndex, witness);\n    });\n  }\n\n  return txSkeleton;\n}\n\n// export for tests\nexport function checkLimit(acpArgs: HexString, capacity: BIish): void {\n  const _capacity = BI.from(capacity);\n  let minimalAmount: BI | undefined;\n  let minimalCapacity: BI | undefined;\n  if (acpArgs.length >= 46) {\n    minimalAmount = BI.from(10).pow(\"0x\" + acpArgs.slice(44, 46));\n  }\n  if (acpArgs.length >= 44) {\n    // should convert to shannons\n    const multiplier = BI.from(10).pow(\"0x\" + acpArgs.slice(42, 44));\n    const multiplicand = BI.from(10).pow(8);\n    minimalCapacity = multiplier.mul(multiplicand);\n  }\n  // Both minimalAmount & minimalCapacity OR only minimalCapacity\n  if (minimalCapacity && minimalAmount) {\n    //check if undefined\n    if (_capacity.lt(minimalCapacity)) {\n      throw new Error(\n        `capacity(${capacity}) less than toAddress minimal capacity limit(${minimalCapacity}), and amount less then toAddress minimal amount limit(${minimalAmount})! If you want to transfer sudt, maybe sudt.transfer can help you.`\n      );\n    }\n  } else if (minimalCapacity) {\n    //check if undefined\n    if (_capacity.lt(minimalCapacity)) {\n      throw new Error(\n        `capacity(${capacity}) less than toAddress minimal capacity limit(${minimalCapacity})!`\n      );\n    }\n  }\n}\n\nexport async function setupOutputCell(\n  txSkeleton: TransactionSkeletonType,\n  outputCell: Cell,\n  { config = undefined }: Options = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n\n  const toScript: Script = outputCell.cellOutput.lock;\n\n  const capacity: BI = BI.from(outputCell.cellOutput.capacity);\n\n  checkLimit(toScript.args, capacity.toString());\n\n  const cellProvider = txSkeleton.get(\"cellProvider\");\n  if (!cellProvider) {\n    throw new Error(`Cell Provider is missing!`);\n  }\n\n  const toAddress: Address = generateAddress(toScript, { config });\n  const toAddressCellCollector = new CellCollector(toAddress, cellProvider, {\n    config,\n  });\n\n  const toAddressInput: Cell | void = (\n    await toAddressCellCollector.collect().next()\n  ).value;\n\n  let outputCapacity: BI = capacity;\n  if (toAddressInput) {\n    outputCapacity = capacity.add(toAddressInput.cellOutput.capacity);\n\n    txSkeleton = txSkeleton.update(\"inputs\", (inputs) => {\n      return inputs.push(toAddressInput);\n    });\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => {\n      return witnesses.push(\"0x\");\n    });\n  }\n\n  outputCell.cellOutput.capacity = \"0x\" + outputCapacity.toString(16);\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push(outputCell);\n  });\n\n  if (toAddressInput) {\n    const template = config.SCRIPTS.ANYONE_CAN_PAY;\n    if (!template) {\n      throw new Error(`ANYONE_CAN_PAY script not defined in config!`);\n    }\n    const scriptOutPoint: OutPoint = {\n      txHash: template.TX_HASH,\n      index: template.INDEX,\n    };\n\n    // add cell_dep\n    txSkeleton = addCellDep(txSkeleton, {\n      outPoint: scriptOutPoint,\n      depType: template.DEP_TYPE,\n    });\n  }\n\n  return txSkeleton;\n}\n\nexport async function injectCapacity(\n  cellCollector: CellCollectorType,\n  txSkeleton: TransactionSkeletonType,\n  outputIndex: number,\n  capacity: BIish,\n  { config = undefined }: Options = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n\n  if (outputIndex >= txSkeleton.get(\"outputs\").size) {\n    throw new Error(`Invalid output index!`);\n  }\n\n  let _capacity = BI.from(capacity);\n\n  const template = config.SCRIPTS.ANYONE_CAN_PAY;\n  if (!template) {\n    throw new Error(\n      `Provided config does not have ANYONE_CAN_PAY script setup!`\n    );\n  }\n\n  const fromScript: Script = cellCollector.fromScript;\n\n  /*\n   * First, check if there is any output cells that contains enough capacity\n   * for us to tinker with.\n   *\n   * TODO: the solution right now won't cover all cases, some outputs before the\n   * last output might still be tinkerable, right now we are working on the\n   * simple solution, later we can change this for more optimizations.\n   */\n  const lastFreezedOutput = txSkeleton\n    .get(\"fixedEntries\")\n    .filter(({ field }) => field === \"outputs\")\n    .maxBy(({ index }) => index);\n  let i = lastFreezedOutput ? lastFreezedOutput.index + 1 : 0;\n  for (; i < txSkeleton.get(\"outputs\").size && _capacity.gt(0); i++) {\n    const output = txSkeleton.get(\"outputs\").get(i)!;\n    if (\n      new ScriptValue(output.cellOutput.lock, { validate: false }).equals(\n        new ScriptValue(fromScript, { validate: false })\n      )\n    ) {\n      const cellCapacity: BI = BI.from(output.cellOutput.capacity);\n      const availableCapacity: BI = cellCapacity.sub(\n        minimalCellCapacityCompatible(output)\n      );\n      // should maintain minimal cell capcity in anyone-can-pay output\n      const deductCapacity: BI = _capacity.gte(availableCapacity)\n        ? availableCapacity\n        : _capacity;\n      _capacity = _capacity.sub(deductCapacity);\n      output.cellOutput.capacity =\n        \"0x\" + cellCapacity.sub(deductCapacity).toString(16);\n    }\n  }\n  // Remove all output cells with capacity equal to 0\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.filter(\n      (output) => !BI.from(output.cellOutput.capacity).eq(0)\n    );\n  });\n\n  const getInputKey = (input: Cell) =>\n    `${input.outPoint!.txHash}_${input.outPoint!.index}`;\n  if (_capacity.gt(0)) {\n    const changeCell: Cell = {\n      cellOutput: {\n        capacity: \"0x0\",\n        lock: fromScript,\n        type: undefined,\n      },\n      data: \"0x\",\n      outPoint: undefined,\n      blockHash: undefined,\n    };\n    let changeCapacity = BI.from(0);\n    const minimalChangeCapacity: BI = BI.from(\n      minimalCellCapacityCompatible(changeCell)\n    );\n\n    let previousInputs = Set<string>();\n    for (const input of txSkeleton.get(\"inputs\")) {\n      previousInputs = previousInputs.add(getInputKey(input));\n    }\n\n    // Are all from same lock script and type script, so only need one change cell\n    for await (const inputCell of cellCollector.collect()) {\n      if (previousInputs.has(getInputKey(inputCell))) {\n        continue;\n      }\n\n      txSkeleton = await setupInputCell(txSkeleton, inputCell, undefined, {\n        config,\n      });\n      const lastOutputIndex: number = txSkeleton.get(\"outputs\").size - 1;\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.remove(lastOutputIndex);\n      });\n      const fixedEntryIndex: number = txSkeleton\n        .get(\"fixedEntries\")\n        .findIndex((fixedEntry) => {\n          return (\n            fixedEntry.field === \"outputs\" &&\n            fixedEntry.index === lastOutputIndex\n          );\n        });\n      if (fixedEntryIndex >= 0) {\n        txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n          return fixedEntries.remove(fixedEntryIndex);\n        });\n      }\n\n      const inputCapacity = BI.from(inputCell.cellOutput.capacity);\n      let deductCapacity = inputCapacity;\n      if (deductCapacity.gt(_capacity)) {\n        deductCapacity = _capacity;\n      }\n      _capacity = _capacity.sub(deductCapacity);\n      changeCapacity = changeCapacity.add(inputCapacity.sub(deductCapacity));\n      if (_capacity.eq(0) && changeCapacity.gte(minimalChangeCapacity)) {\n        break;\n      }\n\n      changeCell.cellOutput.capacity = \"0x\" + changeCapacity.toString(16);\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.push(changeCell);\n      });\n    }\n\n    if (_capacity.gt(0) || changeCapacity < minimalChangeCapacity) {\n      throw new Error(`Not enough capacity in from address!`);\n    }\n\n    changeCell.cellOutput.capacity = \"0x\" + changeCapacity.toString(16);\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n      return outputs.push(changeCell);\n    });\n  }\n\n  return txSkeleton;\n}\n\nexport function prepareSigningEntries(\n  txSkeleton: TransactionSkeletonType,\n  { config = undefined }: Options = {}\n): TransactionSkeletonType {\n  config = config || getConfig();\n\n  const scriptType = \"ANYONE_CAN_PAY\";\n  const template = config.SCRIPTS[scriptType];\n  if (!template) {\n    throw new Error(\n      `Provided config does not have ${scriptType} script setup!`\n    );\n  }\n\n  let processedArgs = Set<string>();\n  const tx = createTransactionFromSkeleton(txSkeleton);\n  const txHash = ckbHash(blockchain.RawTransaction.pack(tx));\n  const inputs = txSkeleton.get(\"inputs\");\n  const witnesses = txSkeleton.get(\"witnesses\");\n  let signingEntries = txSkeleton.get(\"signingEntries\");\n  for (let i = 0; i < inputs.size; i++) {\n    const input = inputs.get(i)!;\n    if (\n      template.CODE_HASH === input.cellOutput.lock.codeHash &&\n      template.HASH_TYPE === input.cellOutput.lock.hashType &&\n      !processedArgs.has(input.cellOutput.lock.args)\n    ) {\n      processedArgs = processedArgs.add(input.cellOutput.lock.args);\n\n      // skip if input sum capcity <= output sum capacity\n      // and input sum amount <= output sum amount\n      const outputs: List<Cell> = txSkeleton.get(\"outputs\").filter((output) => {\n        return new ScriptValue(output.cellOutput.lock, {\n          validate: false,\n        }).equals(new ScriptValue(input.cellOutput.lock, { validate: false }));\n      });\n      const sumOfOutputCapacity: BI = outputs\n        .map((output) => BI.from(output.cellOutput.capacity))\n        .reduce((result, c) => result.add(c), BI.from(0));\n\n      const sumOfOutputAmount: BI = outputs\n        .filter((output) => output.data !== \"0x\")\n        .map((output) => number.Uint128LE.unpack(output.data))\n        .reduce((result, c) => result.add(c), BI.from(0));\n\n      const fInputs: List<Cell> = inputs.filter((i) => {\n        return new ScriptValue(i.cellOutput.lock, { validate: false }).equals(\n          new ScriptValue(input.cellOutput.lock, { validate: false })\n        );\n      });\n\n      const sumOfInputCapacity: BI = fInputs\n        .map((i) => BI.from(i.cellOutput.capacity))\n        .reduce((result, c) => result.add(c), BI.from(0));\n\n      const sumOfInputAmount: BI = fInputs\n        .filter((i) => i.data !== \"0x\")\n        .map((i) => BI.from(number.Uint128LE.unpack(i.data)))\n        .reduce((result, c) => result.add(c), BI.from(0));\n\n      if (\n        sumOfInputCapacity.lte(sumOfOutputCapacity) &&\n        sumOfInputAmount.lte(sumOfOutputAmount)\n      ) {\n        continue;\n      }\n\n      const lockValue = new values.ScriptValue(input.cellOutput.lock, {\n        validate: false,\n      });\n      const hasher = new CKBHasher();\n      hasher.update(txHash);\n      if (i >= witnesses.size) {\n        throw new Error(\n          `The first witness in the script group starting at input index ${i} does not exist, maybe some other part has invalidly tampered the transaction?`\n        );\n      }\n      hashWitness(hasher, witnesses.get(i)!);\n      for (let j = i + 1; j < inputs.size && j < witnesses.size; j++) {\n        const otherInput = inputs.get(j)!;\n        if (\n          lockValue.equals(\n            new values.ScriptValue(otherInput.cellOutput.lock, {\n              validate: false,\n            })\n          )\n        ) {\n          hashWitness(hasher, witnesses.get(j)!);\n        }\n      }\n      for (let j = inputs.size; j < witnesses.size; j++) {\n        hashWitness(hasher, witnesses.get(j)!);\n      }\n      const signingEntry = {\n        type: \"witness_args_lock\",\n        index: i,\n        message: hasher.digestHex(),\n      };\n      signingEntries = signingEntries.push(signingEntry);\n    }\n  }\n  txSkeleton = txSkeleton.set(\"signingEntries\", signingEntries);\n  return txSkeleton;\n}\n\nexport async function withdraw(\n  txSkeleton: TransactionSkeletonType,\n  fromInput: Cell,\n  toAddress: Address,\n  capacity: BIish,\n  { config = undefined }: Options = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n\n  // from input must be a anyone-can-pay script\n  if (!isAcpScript(fromInput.cellOutput.lock, config)) {\n    throw new Error(`fromInput is not a ANYONE_CAN_PAY cell!`);\n  }\n\n  // check capacity\n  const _capacity = BI.from(capacity);\n  const fromInputCapacity: BI = BI.from(fromInput.cellOutput.capacity);\n  const inputMinimalCellCapacity: BI = BI.from(\n    minimalCellCapacityCompatible(fromInput)\n  );\n  if (\n    !(\n      (_capacity.gte(0) &&\n        _capacity.lte(fromInputCapacity.sub(inputMinimalCellCapacity))) ||\n      _capacity.eq(fromInputCapacity)\n    )\n  ) {\n    throw new Error(\n      `capacity must be in [0, ${fromInputCapacity.sub(\n        inputMinimalCellCapacity\n      )}] or ${fromInputCapacity} !`\n    );\n  }\n\n  const toScript = parseAddress(toAddress, { config });\n\n  const targetOutput: Cell = {\n    cellOutput: {\n      capacity: \"0x\" + capacity.toString(16),\n      lock: toScript,\n      type: undefined,\n    },\n    data: \"0x\",\n    outPoint: undefined,\n    blockHash: undefined,\n  };\n\n  if (isAcpScript(toScript, config)) {\n    checkLimit(toScript.args, capacity);\n\n    const cellProvider = txSkeleton.get(\"cellProvider\");\n    if (!cellProvider) {\n      throw new Error(`Cell Provider is missing!`);\n    }\n\n    const toAddressCellCollector = new CellCollector(toAddress, cellProvider, {\n      config,\n    });\n\n    const toAddressInput: Cell | void = (\n      await toAddressCellCollector.collect().next()\n    ).value;\n    if (!toAddressInput) {\n      throw new Error(`toAddress ANYONE_CAN_PAY input not found!`);\n    }\n\n    const outputCapacity: BI = _capacity.add(\n      toAddressInput.cellOutput.capacity\n    );\n    targetOutput.cellOutput.capacity = \"0x\" + outputCapacity.toString(16);\n\n    txSkeleton = txSkeleton.update(\"inputs\", (inputs) => {\n      return inputs.push(toAddressInput);\n    });\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => {\n      return witnesses.push(\"0x\");\n    });\n  }\n\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push(targetOutput);\n  });\n\n  txSkeleton = await setupInputCell(\n    txSkeleton,\n    fromInput,\n    generateAddress(fromInput.cellOutput.lock, { config }),\n    {\n      config,\n    }\n  );\n  // remove output and fixedEntry added by `setupInputCell`\n  const lastOutputIndex: number = txSkeleton.get(\"outputs\").size - 1;\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.remove(lastOutputIndex);\n  });\n  const fixedEntryIndex: number = txSkeleton\n    .get(\"fixedEntries\")\n    .findIndex((fixedEntry) => {\n      return (\n        fixedEntry.field === \"outputs\" && fixedEntry.index === lastOutputIndex\n      );\n    });\n  if (fixedEntryIndex >= 0) {\n    txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n      return fixedEntries.remove(fixedEntryIndex);\n    });\n  }\n\n  if (!_capacity.eq(fromInputCapacity)) {\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n      return outputs.push({\n        cellOutput: {\n          capacity: \"0x\" + fromInputCapacity.sub(capacity).toString(16),\n          lock: fromInput.cellOutput.lock,\n          type: fromInput.cellOutput.type,\n        },\n        data: fromInput.data,\n      });\n    });\n  }\n\n  return txSkeleton;\n}\n\nexport default {\n  CellCollector,\n  setupInputCell,\n  setupOutputCell,\n  injectCapacity,\n  prepareSigningEntries,\n  withdraw,\n};\n"],"mappings":"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"}