{"version":3,"file":"secp256k1_blake160.js","names":["ScriptValue","values","CellCollector","constructor","fromInfo","cellProvider","config","undefined","queryOptions","Error","getConfig","fromScript","parseFromInfo","lock","type","cellCollector","collector","collect","isSecp256k1Blake160Script","inputCell","setupInputCell","txSkeleton","_fromInfo","defaultWitness","since","cellOutput","update","inputs","push","output","capacity","data","outputs","inputSinces","set","get","size","witnesses","template","SCRIPTS","SECP256K1_BLAKE160","scriptOutPoint","txHash","TX_HASH","index","INDEX","addCellDep","outPoint","depType","DEP_TYPE","firstIndex","findIndex","input","validate","equals","witness","newWitnessArgs","SECP_SIGNATURE_PLACEHOLDER","witnessArgs","blockchain","WitnessArgs","unpack","bytes","bytify","equal","inputType","outputType","hexify","pack","transfer","fromAddress","toAddress","amount","requireToAddress","assertAmountEnough","result","transferCompatible","_txSkeleton","_amount","Array","BigInt","toString","parseAddress","ensureScript","BI","from","toScript","blockHash","lastFreezedOutput","filter","field","maxBy","i","gt","cellCapacity","deductCapacity","gte","sub","minimalCellCapacityCompatible","eq","changeCell","changeCapacity","previousInputs","Set","add","has","inputCapacity","payFee","injectCapacity","outputIndex","prepareSigningEntries","_prepareSigningEntries"],"sources":["../src/secp256k1_blake160.ts"],"sourcesContent":["import { Set } from \"immutable\";\nimport {\n  parseAddress,\n  minimalCellCapacityCompatible,\n  TransactionSkeletonType,\n  Options,\n} from \"@ckb-lumos/helpers\";\nimport { bytes } from \"@ckb-lumos/codec\";\nimport {\n  values,\n  Address,\n  Cell,\n  WitnessArgs,\n  CellCollector as CellCollectorType,\n  Script,\n  CellProvider,\n  QueryOptions,\n  OutPoint,\n  HexString,\n  PackedSince,\n  blockchain,\n} from \"@ckb-lumos/base\";\nimport { getConfig, Config } from \"@ckb-lumos/config-manager\";\nimport {\n  addCellDep,\n  ensureScript,\n  prepareSigningEntries as _prepareSigningEntries,\n  SECP_SIGNATURE_PLACEHOLDER,\n  isSecp256k1Blake160Script,\n} from \"./helper\";\nimport { FromInfo } from \".\";\nimport { parseFromInfo } from \"./from_info\";\nimport { BI, BIish } from \"@ckb-lumos/bi\";\nimport { CellCollectorConstructor } from \"./type\";\nconst { ScriptValue } = values;\n\nexport const CellCollector: CellCollectorConstructor = class CellCollector\n  implements CellCollectorType\n{\n  private cellCollector: CellCollectorType;\n  private config: Config;\n  public readonly fromScript: Script;\n\n  constructor(\n    fromInfo: FromInfo,\n    cellProvider: CellProvider,\n    {\n      config = undefined,\n      queryOptions = {},\n    }: Options & {\n      queryOptions?: QueryOptions;\n    } = {}\n  ) {\n    if (!cellProvider) {\n      throw new Error(`Cell provider is missing!`);\n    }\n    config = config || getConfig();\n    this.fromScript = parseFromInfo(fromInfo, { config }).fromScript;\n\n    this.config = config;\n\n    queryOptions = {\n      ...queryOptions,\n      lock: this.fromScript,\n      type: queryOptions.type || \"empty\",\n    };\n\n    this.cellCollector = cellProvider.collector(queryOptions);\n  }\n\n  async *collect(): AsyncGenerator<Cell> {\n    if (!isSecp256k1Blake160Script(this.fromScript, this.config)) {\n      return;\n    }\n\n    for await (const inputCell of this.cellCollector.collect()) {\n      yield inputCell;\n    }\n  }\n};\n\n/**\n * Setup input cell infos, such as cell deps and witnesses.\n *\n * @param txSkeleton\n * @param inputCell\n * @param _fromInfo\n * @param options\n */\nexport async function setupInputCell(\n  txSkeleton: TransactionSkeletonType,\n  inputCell: Cell,\n  _fromInfo?: FromInfo,\n  {\n    config = undefined,\n    defaultWitness = \"0x\",\n    since = undefined,\n  }: Options & {\n    defaultWitness?: HexString;\n    since?: PackedSince;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n\n  const fromScript = inputCell.cellOutput.lock;\n  if (!isSecp256k1Blake160Script(fromScript, config)) {\n    throw new Error(`Not SECP256K1_BLAKE160 input!`);\n  }\n\n  // add inputCell to txSkeleton\n  txSkeleton = txSkeleton.update(\"inputs\", (inputs) => {\n    return inputs.push(inputCell);\n  });\n\n  const output: Cell = {\n    cellOutput: {\n      capacity: inputCell.cellOutput.capacity,\n      lock: inputCell.cellOutput.lock,\n      type: inputCell.cellOutput.type,\n    },\n    data: inputCell.data,\n  };\n\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push(output);\n  });\n\n  if (since) {\n    txSkeleton = txSkeleton.update(\"inputSinces\", (inputSinces) => {\n      return inputSinces.set(txSkeleton.get(\"inputs\").size - 1, since);\n    });\n  }\n\n  txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => {\n    return witnesses.push(defaultWitness);\n  });\n\n  const template = config.SCRIPTS.SECP256K1_BLAKE160;\n  if (!template) {\n    throw new Error(`SECP256K1_BLAKE160 script not defined in config!`);\n  }\n\n  const scriptOutPoint: OutPoint = {\n    txHash: template.TX_HASH,\n    index: template.INDEX,\n  };\n\n  // add cell dep\n  txSkeleton = addCellDep(txSkeleton, {\n    outPoint: scriptOutPoint,\n    depType: template.DEP_TYPE,\n  });\n\n  // add witness\n  /*\n   * Modify the skeleton, so the first witness of the fromAddress script group\n   * has a WitnessArgs construct with 65-byte zero filled values. While this\n   * is not required, it helps in transaction fee estimation.\n   */\n  const firstIndex = txSkeleton\n    .get(\"inputs\")\n    .findIndex((input) =>\n      new ScriptValue(input.cellOutput.lock, { validate: false }).equals(\n        new ScriptValue(fromScript, { validate: false })\n      )\n    );\n  if (firstIndex !== -1) {\n    while (firstIndex >= txSkeleton.get(\"witnesses\").size) {\n      txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n        witnesses.push(\"0x\")\n      );\n    }\n    let witness: string = txSkeleton.get(\"witnesses\").get(firstIndex)!;\n    const newWitnessArgs: WitnessArgs = {\n      /* 65-byte zeros in hex */\n      lock: SECP_SIGNATURE_PLACEHOLDER,\n    };\n    if (witness !== \"0x\") {\n      const witnessArgs = blockchain.WitnessArgs.unpack(bytes.bytify(witness));\n      const lock = witnessArgs.lock;\n      if (\n        !!lock &&\n        !!newWitnessArgs.lock &&\n        !bytes.equal(lock, newWitnessArgs.lock)\n      ) {\n        throw new Error(\n          \"Lock field in first witness is set aside for signature!\"\n        );\n      }\n      const inputType = witnessArgs.inputType;\n      if (inputType) {\n        newWitnessArgs.inputType = inputType;\n      }\n      const outputType = witnessArgs.outputType;\n      if (outputType) {\n        newWitnessArgs.outputType = outputType;\n      }\n    }\n    witness = bytes.hexify(blockchain.WitnessArgs.pack(newWitnessArgs));\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n      witnesses.set(firstIndex, witness)\n    );\n  }\n\n  return txSkeleton;\n}\n\nexport async function transfer(\n  txSkeleton: TransactionSkeletonType,\n  fromAddress: Address,\n  toAddress: Address | null | undefined,\n  amount: bigint,\n  options?: {\n    config?: Config;\n    requireToAddress?: boolean;\n    assertAmountEnough?: true;\n  }\n): Promise<TransactionSkeletonType>;\n\nexport async function transfer(\n  txSkeleton: TransactionSkeletonType,\n  fromAddress: Address,\n  toAddress: Address | null | undefined,\n  amount: bigint,\n  options: {\n    config?: Config;\n    requireToAddress?: boolean;\n    assertAmountEnough: false;\n  }\n): Promise<[TransactionSkeletonType, bigint]>;\n\n/**\n * transfer capacity from secp256k1_blake160 script cells\n *\n * @param txSkeleton\n * @param fromAddress\n * @param toAddress\n * @param amount\n * @param options\n */\nexport async function transfer(\n  txSkeleton: TransactionSkeletonType,\n  fromAddress: Address,\n  toAddress: Address | null | undefined,\n  amount: bigint,\n  {\n    config = undefined,\n    requireToAddress = true,\n    assertAmountEnough = true,\n  }: {\n    config?: Config;\n    requireToAddress?: boolean;\n    assertAmountEnough?: boolean;\n  } = {}\n): Promise<TransactionSkeletonType | [TransactionSkeletonType, bigint]> {\n  const result = await transferCompatible(\n    txSkeleton,\n    fromAddress,\n    toAddress,\n    amount,\n    {\n      config,\n      requireToAddress,\n      assertAmountEnough: assertAmountEnough as true | undefined,\n    }\n  );\n  let _txSkeleton: TransactionSkeletonType;\n  let _amount: bigint;\n  if (result instanceof Array) {\n    _txSkeleton = result[0];\n    _amount = BigInt(result[1].toString());\n    return [_txSkeleton, _amount];\n  } else {\n    _txSkeleton = result;\n    return _txSkeleton;\n  }\n}\nexport async function transferCompatible(\n  txSkeleton: TransactionSkeletonType,\n  fromAddress: Address,\n  toAddress: Address | null | undefined,\n  amount: BIish,\n  options?: {\n    config?: Config;\n    requireToAddress?: boolean;\n    assertAmountEnough?: true;\n  }\n): Promise<TransactionSkeletonType>;\n\nexport async function transferCompatible(\n  txSkeleton: TransactionSkeletonType,\n  fromAddress: Address,\n  toAddress: Address | null | undefined,\n  amount: BIish,\n  options: {\n    config?: Config;\n    requireToAddress?: boolean;\n    assertAmountEnough: false;\n  }\n): Promise<[TransactionSkeletonType, BI]>;\n/**\n * transfer capacity from secp256k1_blake160 script cells\n *\n * @param txSkeleton\n * @param fromAddress\n * @param toAddress\n * @param amount\n * @param options\n */\nexport async function transferCompatible(\n  txSkeleton: TransactionSkeletonType,\n  fromAddress: Address,\n  toAddress: Address | null | undefined,\n  amount: BIish,\n  {\n    config = undefined,\n    requireToAddress = true,\n    assertAmountEnough = true,\n  }: {\n    config?: Config;\n    requireToAddress?: boolean;\n    assertAmountEnough?: boolean;\n  } = {}\n): Promise<TransactionSkeletonType | [TransactionSkeletonType, BI]> {\n  config = config || getConfig();\n\n  const template = config.SCRIPTS.SECP256K1_BLAKE160;\n  if (!template) {\n    throw new Error(\n      \"Provided config does not have SECP256K1_BLAKE160 script setup!\"\n    );\n  }\n  const scriptOutPoint = {\n    txHash: template.TX_HASH,\n    index: template.INDEX,\n  };\n\n  txSkeleton = addCellDep(txSkeleton, {\n    outPoint: scriptOutPoint,\n    depType: template.DEP_TYPE,\n  });\n\n  const fromScript = parseAddress(fromAddress, { config });\n  ensureScript(fromScript, config, \"SECP256K1_BLAKE160\");\n\n  if (requireToAddress && !toAddress) {\n    throw new Error(\"You must provide a to address!\");\n  }\n\n  let _amount = BI.from(amount);\n  if (toAddress) {\n    const toScript = parseAddress(toAddress, { config });\n\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n      return outputs.push({\n        cellOutput: {\n          capacity: \"0x\" + _amount.toString(16),\n          lock: toScript,\n          type: undefined,\n        },\n        data: \"0x\",\n        outPoint: undefined,\n        blockHash: undefined,\n      });\n    });\n  }\n\n  /*\n   * First, check if there is any output cells that contains enough capacity\n   * for us to tinker with.\n   *\n   * TODO: the solution right now won't cover all cases, some outputs before the\n   * last output might still be tinkerable, right now we are working on the\n   * simple solution, later we can change this for more optimizations.\n   */\n  const lastFreezedOutput = txSkeleton\n    .get(\"fixedEntries\")\n    .filter(({ field }) => field === \"outputs\")\n    .maxBy(({ index }) => index);\n  let i = lastFreezedOutput ? lastFreezedOutput.index + 1 : 0;\n  for (; i < txSkeleton.get(\"outputs\").size && _amount.gt(0); i++) {\n    const output = txSkeleton.get(\"outputs\").get(i)!;\n    if (\n      new ScriptValue(output.cellOutput.lock, { validate: false }).equals(\n        new ScriptValue(fromScript, { validate: false })\n      )\n    ) {\n      const cellCapacity = BI.from(output.cellOutput.capacity);\n      let deductCapacity;\n      if (_amount.gte(cellCapacity)) {\n        deductCapacity = cellCapacity;\n      } else {\n        deductCapacity = cellCapacity.sub(\n          minimalCellCapacityCompatible(output)\n        );\n        if (deductCapacity.gt(_amount)) {\n          deductCapacity = _amount;\n        }\n      }\n      _amount = _amount.sub(deductCapacity);\n      output.cellOutput.capacity =\n        \"0x\" + cellCapacity.sub(deductCapacity).toString(16);\n    }\n  }\n  // Remove all output cells with capacity equal to 0\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.filter(\n      (output) => !BI.from(output.cellOutput.capacity).eq(0)\n    );\n  });\n  /*\n   * Collect and add new input cells so as to prepare remaining capacities.\n   */\n  if (_amount.gt(0)) {\n    const cellProvider = txSkeleton.get(\"cellProvider\");\n    if (!cellProvider) {\n      throw new Error(\"Cell provider is missing!\");\n    }\n    const cellCollector = cellProvider.collector({\n      lock: fromScript,\n    });\n    const changeCell: Cell = {\n      cellOutput: {\n        capacity: \"0x0\",\n        lock: fromScript,\n        type: undefined,\n      },\n      data: \"0x\",\n      outPoint: undefined,\n      blockHash: undefined,\n    };\n    let changeCapacity = BI.from(0);\n    let previousInputs = Set<string>();\n    for (const input of txSkeleton.get(\"inputs\")) {\n      previousInputs = previousInputs.add(\n        `${input.outPoint!.txHash}_${input.outPoint!.index}`\n      );\n    }\n    for await (const inputCell of cellCollector.collect()) {\n      // skip inputs already exists in txSkeleton.inputs\n      if (\n        previousInputs.has(\n          `${inputCell.outPoint!.txHash}_${inputCell.outPoint!.index}`\n        )\n      ) {\n        continue;\n      }\n      txSkeleton = txSkeleton.update(\"inputs\", (inputs) =>\n        inputs.push(inputCell)\n      );\n      txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n        witnesses.push(\"0x\")\n      );\n      const inputCapacity = BI.from(inputCell.cellOutput.capacity);\n      let deductCapacity = inputCapacity;\n      if (deductCapacity.gt(_amount)) {\n        deductCapacity = _amount;\n      }\n      _amount = _amount.sub(deductCapacity);\n      changeCapacity = changeCapacity.add(inputCapacity).sub(deductCapacity);\n      if (\n        _amount.eq(0) &&\n        (changeCapacity.eq(0) ||\n          changeCapacity.gt(minimalCellCapacityCompatible(changeCell)))\n      ) {\n        break;\n      }\n    }\n    if (changeCapacity.gt(0)) {\n      changeCell.cellOutput.capacity = \"0x\" + changeCapacity.toString(16);\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) =>\n        outputs.push(changeCell)\n      );\n    }\n  }\n  if (_amount.gt(0) && assertAmountEnough) {\n    throw new Error(\"Not enough capacity in from address!\");\n  }\n  /*\n   * Modify the skeleton, so the first witness of the fromAddress script group\n   * has a WitnessArgs construct with 65-byte zero filled values. While this\n   * is not required, it helps in transaction fee estimation.\n   */\n  const firstIndex = txSkeleton\n    .get(\"inputs\")\n    .findIndex((input) =>\n      new ScriptValue(input.cellOutput.lock, { validate: false }).equals(\n        new ScriptValue(fromScript, { validate: false })\n      )\n    );\n  if (firstIndex !== -1) {\n    while (firstIndex >= txSkeleton.get(\"witnesses\").size) {\n      txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n        witnesses.push(\"0x\")\n      );\n    }\n    let witness: string = txSkeleton.get(\"witnesses\").get(firstIndex)!;\n    const newWitnessArgs: WitnessArgs = {\n      /* 65-byte zeros in hex */\n      lock: SECP_SIGNATURE_PLACEHOLDER,\n    };\n    if (witness !== \"0x\") {\n      const witnessArgs = blockchain.WitnessArgs.unpack(bytes.bytify(witness));\n      const lock = witnessArgs.lock;\n      if (\n        !!lock &&\n        !!newWitnessArgs.lock &&\n        !bytes.equal(lock, newWitnessArgs.lock)\n      ) {\n        throw new Error(\n          \"Lock field in first witness is set aside for signature!\"\n        );\n      }\n      const inputType = witnessArgs.inputType;\n      if (inputType) {\n        newWitnessArgs.inputType = inputType;\n      }\n      const outputType = witnessArgs.outputType;\n      if (outputType) {\n        newWitnessArgs.outputType = outputType;\n      }\n    }\n    witness = bytes.hexify(blockchain.WitnessArgs.pack(newWitnessArgs));\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n      witnesses.set(firstIndex, witness)\n    );\n  }\n  if (!assertAmountEnough) {\n    return [txSkeleton, BI.from(_amount)];\n  }\n  return txSkeleton;\n}\n\n/**\n * pay fee by secp256k1_blake160 script cells\n *\n * @param txSkeleton\n * @param fromAddress\n * @param amount fee in shannon\n * @param options\n */\nexport async function payFee(\n  txSkeleton: TransactionSkeletonType,\n  fromAddress: Address,\n  amount: BIish,\n  { config = undefined }: Options = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  return await transferCompatible(txSkeleton, fromAddress, null, amount, {\n    config,\n    requireToAddress: false,\n  });\n}\n\n/**\n * Inject capacity from `fromAddress` to target output.\n *\n * @param txSkeleton\n * @param outputIndex\n * @param fromAddress\n * @param options\n */\nexport async function injectCapacity(\n  txSkeleton: TransactionSkeletonType,\n  outputIndex: number,\n  fromAddress: Address,\n  { config = undefined }: Options = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  if (outputIndex >= txSkeleton.get(\"outputs\").size) {\n    throw new Error(\"Invalid output index!\");\n  }\n  const capacity = BI.from(\n    txSkeleton.get(\"outputs\").get(outputIndex)!.cellOutput.capacity\n  );\n  return await transferCompatible(\n    txSkeleton,\n    fromAddress,\n    null,\n    BI.from(capacity),\n    {\n      config,\n      requireToAddress: false,\n    }\n  );\n}\n\n/**\n * prepare for txSkeleton signingEntries, will update txSkeleton.get(\"signingEntries\")\n *\n * @param txSkeleton\n * @param options\n */\nexport function prepareSigningEntries(\n  txSkeleton: TransactionSkeletonType,\n  { config = undefined }: Options = {}\n): TransactionSkeletonType {\n  config = config || getConfig();\n\n  return _prepareSigningEntries(txSkeleton, config, \"SECP256K1_BLAKE160\");\n}\n\nexport default {\n  transfer,\n  transferCompatible,\n  payFee,\n  prepareSigningEntries,\n  injectCapacity,\n  setupInputCell,\n  CellCollector,\n};\n"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAMA;;AACA;;AAcA;;AACA;;AAQA;;AACA;;AAEA,MAAM;EAAEA;AAAF,IAAkBC,YAAxB;AAEO,MAAMC,aAAuC,GAAG,MAAMA,aAAN,CAEvD;EAKEC,WAAW,CACTC,QADS,EAETC,YAFS,EAGT;IACEC,MAAM,GAAGC,SADX;IAEEC,YAAY,GAAG;EAFjB,IAKI,EARK,EAST;IACA,IAAI,CAACH,YAAL,EAAmB;MACjB,MAAM,IAAII,KAAJ,CAAW,2BAAX,CAAN;IACD;;IACDH,MAAM,GAAGA,MAAM,IAAI,IAAAI,wBAAA,GAAnB;IACA,KAAKC,UAAL,GAAkB,IAAAC,wBAAA,EAAcR,QAAd,EAAwB;MAAEE;IAAF,CAAxB,EAAoCK,UAAtD;IAEA,KAAKL,MAAL,GAAcA,MAAd;IAEAE,YAAY,GAAG,EACb,GAAGA,YADU;MAEbK,IAAI,EAAE,KAAKF,UAFE;MAGbG,IAAI,EAAEN,YAAY,CAACM,IAAb,IAAqB;IAHd,CAAf;IAMA,KAAKC,aAAL,GAAqBV,YAAY,CAACW,SAAb,CAAuBR,YAAvB,CAArB;EACD;;EAEa,OAAPS,OAAO,GAAyB;IACrC,IAAI,CAAC,IAAAC,iCAAA,EAA0B,KAAKP,UAA/B,EAA2C,KAAKL,MAAhD,CAAL,EAA8D;MAC5D;IACD;;IAED,WAAW,MAAMa,SAAjB,IAA8B,KAAKJ,aAAL,CAAmBE,OAAnB,EAA9B,EAA4D;MAC1D,MAAME,SAAN;IACD;EACF;;AAxCH,CAFO;AA6CP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACO,eAAeC,cAAf,CACLC,UADK,EAELF,SAFK,EAGLG,SAHK,EAIL;EACEhB,MAAM,GAAGC,SADX;EAEEgB,cAAc,GAAG,IAFnB;EAGEC,KAAK,GAAGjB;AAHV,IAOI,EAXC,EAY6B;EAClCD,MAAM,GAAGA,MAAM,IAAI,IAAAI,wBAAA,GAAnB;EAEA,MAAMC,UAAU,GAAGQ,SAAS,CAACM,UAAV,CAAqBZ,IAAxC;;EACA,IAAI,CAAC,IAAAK,iCAAA,EAA0BP,UAA1B,EAAsCL,MAAtC,CAAL,EAAoD;IAClD,MAAM,IAAIG,KAAJ,CAAW,+BAAX,CAAN;EACD,CANiC,CAQlC;;;EACAY,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,QAAlB,EAA6BC,MAAD,IAAY;IACnD,OAAOA,MAAM,CAACC,IAAP,CAAYT,SAAZ,CAAP;EACD,CAFY,CAAb;EAIA,MAAMU,MAAY,GAAG;IACnBJ,UAAU,EAAE;MACVK,QAAQ,EAAEX,SAAS,CAACM,UAAV,CAAqBK,QADrB;MAEVjB,IAAI,EAAEM,SAAS,CAACM,UAAV,CAAqBZ,IAFjB;MAGVC,IAAI,EAAEK,SAAS,CAACM,UAAV,CAAqBX;IAHjB,CADO;IAMnBiB,IAAI,EAAEZ,SAAS,CAACY;EANG,CAArB;EASAV,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,SAAlB,EAA8BM,OAAD,IAAa;IACrD,OAAOA,OAAO,CAACJ,IAAR,CAAaC,MAAb,CAAP;EACD,CAFY,CAAb;;EAIA,IAAIL,KAAJ,EAAW;IACTH,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,aAAlB,EAAkCO,WAAD,IAAiB;MAC7D,OAAOA,WAAW,CAACC,GAAZ,CAAgBb,UAAU,CAACc,GAAX,CAAe,QAAf,EAAyBC,IAAzB,GAAgC,CAAhD,EAAmDZ,KAAnD,CAAP;IACD,CAFY,CAAb;EAGD;;EAEDH,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,WAAlB,EAAgCW,SAAD,IAAe;IACzD,OAAOA,SAAS,CAACT,IAAV,CAAeL,cAAf,CAAP;EACD,CAFY,CAAb;EAIA,MAAMe,QAAQ,GAAGhC,MAAM,CAACiC,OAAP,CAAeC,kBAAhC;;EACA,IAAI,CAACF,QAAL,EAAe;IACb,MAAM,IAAI7B,KAAJ,CAAW,kDAAX,CAAN;EACD;;EAED,MAAMgC,cAAwB,GAAG;IAC/BC,MAAM,EAAEJ,QAAQ,CAACK,OADc;IAE/BC,KAAK,EAAEN,QAAQ,CAACO;EAFe,CAAjC,CAzCkC,CA8ClC;;EACAxB,UAAU,GAAG,IAAAyB,kBAAA,EAAWzB,UAAX,EAAuB;IAClC0B,QAAQ,EAAEN,cADwB;IAElCO,OAAO,EAAEV,QAAQ,CAACW;EAFgB,CAAvB,CAAb,CA/CkC,CAoDlC;;EACA;AACF;AACA;AACA;AACA;;EACE,MAAMC,UAAU,GAAG7B,UAAU,CAC1Bc,GADgB,CACZ,QADY,EAEhBgB,SAFgB,CAELC,KAAD,IACT,IAAIpD,WAAJ,CAAgBoD,KAAK,CAAC3B,UAAN,CAAiBZ,IAAjC,EAAuC;IAAEwC,QAAQ,EAAE;EAAZ,CAAvC,EAA4DC,MAA5D,CACE,IAAItD,WAAJ,CAAgBW,UAAhB,EAA4B;IAAE0C,QAAQ,EAAE;EAAZ,CAA5B,CADF,CAHe,CAAnB;;EAOA,IAAIH,UAAU,KAAK,CAAC,CAApB,EAAuB;IACrB,OAAOA,UAAU,IAAI7B,UAAU,CAACc,GAAX,CAAe,WAAf,EAA4BC,IAAjD,EAAuD;MACrDf,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,WAAlB,EAAgCW,SAAD,IAC1CA,SAAS,CAACT,IAAV,CAAe,IAAf,CADW,CAAb;IAGD;;IACD,IAAI2B,OAAe,GAAGlC,UAAU,CAACc,GAAX,CAAe,WAAf,EAA4BA,GAA5B,CAAgCe,UAAhC,CAAtB;IACA,MAAMM,cAA2B,GAAG;MAClC;MACA3C,IAAI,EAAE4C;IAF4B,CAApC;;IAIA,IAAIF,OAAO,KAAK,IAAhB,EAAsB;MACpB,MAAMG,WAAW,GAAGC,gBAAA,CAAWC,WAAX,CAAuBC,MAAvB,CAA8BC,YAAA,CAAMC,MAAN,CAAaR,OAAb,CAA9B,CAApB;;MACA,MAAM1C,IAAI,GAAG6C,WAAW,CAAC7C,IAAzB;;MACA,IACE,CAAC,CAACA,IAAF,IACA,CAAC,CAAC2C,cAAc,CAAC3C,IADjB,IAEA,CAACiD,YAAA,CAAME,KAAN,CAAYnD,IAAZ,EAAkB2C,cAAc,CAAC3C,IAAjC,CAHH,EAIE;QACA,MAAM,IAAIJ,KAAJ,CACJ,yDADI,CAAN;MAGD;;MACD,MAAMwD,SAAS,GAAGP,WAAW,CAACO,SAA9B;;MACA,IAAIA,SAAJ,EAAe;QACbT,cAAc,CAACS,SAAf,GAA2BA,SAA3B;MACD;;MACD,MAAMC,UAAU,GAAGR,WAAW,CAACQ,UAA/B;;MACA,IAAIA,UAAJ,EAAgB;QACdV,cAAc,CAACU,UAAf,GAA4BA,UAA5B;MACD;IACF;;IACDX,OAAO,GAAGO,YAAA,CAAMK,MAAN,CAAaR,gBAAA,CAAWC,WAAX,CAAuBQ,IAAvB,CAA4BZ,cAA5B,CAAb,CAAV;IACAnC,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,WAAlB,EAAgCW,SAAD,IAC1CA,SAAS,CAACH,GAAV,CAAcgB,UAAd,EAA0BK,OAA1B,CADW,CAAb;EAGD;;EAED,OAAOlC,UAAP;AACD;;AA0BD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAegD,QAAf,CACLhD,UADK,EAELiD,WAFK,EAGLC,SAHK,EAILC,MAJK,EAKL;EACElE,MAAM,GAAGC,SADX;EAEEkE,gBAAgB,GAAG,IAFrB;EAGEC,kBAAkB,GAAG;AAHvB,IAQI,EAbC,EAciE;EACtE,MAAMC,MAAM,GAAG,MAAMC,kBAAkB,CACrCvD,UADqC,EAErCiD,WAFqC,EAGrCC,SAHqC,EAIrCC,MAJqC,EAKrC;IACElE,MADF;IAEEmE,gBAFF;IAGEC,kBAAkB,EAAEA;EAHtB,CALqC,CAAvC;;EAWA,IAAIG,WAAJ;;EACA,IAAIC,OAAJ;;EACA,IAAIH,MAAM,YAAYI,KAAtB,EAA6B;IAC3BF,WAAW,GAAGF,MAAM,CAAC,CAAD,CAApB;IACAG,OAAO,GAAGE,MAAM,CAACL,MAAM,CAAC,CAAD,CAAN,CAAUM,QAAV,EAAD,CAAhB;IACA,OAAO,CAACJ,WAAD,EAAcC,OAAd,CAAP;EACD,CAJD,MAIO;IACLD,WAAW,GAAGF,MAAd;IACA,OAAOE,WAAP;EACD;AACF;;AAwBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeD,kBAAf,CACLvD,UADK,EAELiD,WAFK,EAGLC,SAHK,EAILC,MAJK,EAKL;EACElE,MAAM,GAAGC,SADX;EAEEkE,gBAAgB,GAAG,IAFrB;EAGEC,kBAAkB,GAAG;AAHvB,IAQI,EAbC,EAc6D;EAClEpE,MAAM,GAAGA,MAAM,IAAI,IAAAI,wBAAA,GAAnB;EAEA,MAAM4B,QAAQ,GAAGhC,MAAM,CAACiC,OAAP,CAAeC,kBAAhC;;EACA,IAAI,CAACF,QAAL,EAAe;IACb,MAAM,IAAI7B,KAAJ,CACJ,gEADI,CAAN;EAGD;;EACD,MAAMgC,cAAc,GAAG;IACrBC,MAAM,EAAEJ,QAAQ,CAACK,OADI;IAErBC,KAAK,EAAEN,QAAQ,CAACO;EAFK,CAAvB;EAKAxB,UAAU,GAAG,IAAAyB,kBAAA,EAAWzB,UAAX,EAAuB;IAClC0B,QAAQ,EAAEN,cADwB;IAElCO,OAAO,EAAEV,QAAQ,CAACW;EAFgB,CAAvB,CAAb;EAKA,MAAMtC,UAAU,GAAG,IAAAuE,qBAAA,EAAaZ,WAAb,EAA0B;IAAEhE;EAAF,CAA1B,CAAnB;EACA,IAAA6E,oBAAA,EAAaxE,UAAb,EAAyBL,MAAzB,EAAiC,oBAAjC;;EAEA,IAAImE,gBAAgB,IAAI,CAACF,SAAzB,EAAoC;IAClC,MAAM,IAAI9D,KAAJ,CAAU,gCAAV,CAAN;EACD;;EAED,IAAIqE,OAAO,GAAGM,MAAA,CAAGC,IAAH,CAAQb,MAAR,CAAd;;EACA,IAAID,SAAJ,EAAe;IACb,MAAMe,QAAQ,GAAG,IAAAJ,qBAAA,EAAaX,SAAb,EAAwB;MAAEjE;IAAF,CAAxB,CAAjB;IAEAe,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,SAAlB,EAA8BM,OAAD,IAAa;MACrD,OAAOA,OAAO,CAACJ,IAAR,CAAa;QAClBH,UAAU,EAAE;UACVK,QAAQ,EAAE,OAAOgD,OAAO,CAACG,QAAR,CAAiB,EAAjB,CADP;UAEVpE,IAAI,EAAEyE,QAFI;UAGVxE,IAAI,EAAEP;QAHI,CADM;QAMlBwB,IAAI,EAAE,IANY;QAOlBgB,QAAQ,EAAExC,SAPQ;QAQlBgF,SAAS,EAAEhF;MARO,CAAb,CAAP;IAUD,CAXY,CAAb;EAYD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE,MAAMiF,iBAAiB,GAAGnE,UAAU,CACjCc,GADuB,CACnB,cADmB,EAEvBsD,MAFuB,CAEhB,CAAC;IAAEC;EAAF,CAAD,KAAeA,KAAK,KAAK,SAFT,EAGvBC,KAHuB,CAGjB,CAAC;IAAE/C;EAAF,CAAD,KAAeA,KAHE,CAA1B;EAIA,IAAIgD,CAAC,GAAGJ,iBAAiB,GAAGA,iBAAiB,CAAC5C,KAAlB,GAA0B,CAA7B,GAAiC,CAA1D;;EACA,OAAOgD,CAAC,GAAGvE,UAAU,CAACc,GAAX,CAAe,SAAf,EAA0BC,IAA9B,IAAsC0C,OAAO,CAACe,EAAR,CAAW,CAAX,CAA7C,EAA4DD,CAAC,EAA7D,EAAiE;IAC/D,MAAM/D,MAAM,GAAGR,UAAU,CAACc,GAAX,CAAe,SAAf,EAA0BA,GAA1B,CAA8ByD,CAA9B,CAAf;;IACA,IACE,IAAI5F,WAAJ,CAAgB6B,MAAM,CAACJ,UAAP,CAAkBZ,IAAlC,EAAwC;MAAEwC,QAAQ,EAAE;IAAZ,CAAxC,EAA6DC,MAA7D,CACE,IAAItD,WAAJ,CAAgBW,UAAhB,EAA4B;MAAE0C,QAAQ,EAAE;IAAZ,CAA5B,CADF,CADF,EAIE;MACA,MAAMyC,YAAY,GAAGV,MAAA,CAAGC,IAAH,CAAQxD,MAAM,CAACJ,UAAP,CAAkBK,QAA1B,CAArB;;MACA,IAAIiE,cAAJ;;MACA,IAAIjB,OAAO,CAACkB,GAAR,CAAYF,YAAZ,CAAJ,EAA+B;QAC7BC,cAAc,GAAGD,YAAjB;MACD,CAFD,MAEO;QACLC,cAAc,GAAGD,YAAY,CAACG,GAAb,CACf,IAAAC,sCAAA,EAA8BrE,MAA9B,CADe,CAAjB;;QAGA,IAAIkE,cAAc,CAACF,EAAf,CAAkBf,OAAlB,CAAJ,EAAgC;UAC9BiB,cAAc,GAAGjB,OAAjB;QACD;MACF;;MACDA,OAAO,GAAGA,OAAO,CAACmB,GAAR,CAAYF,cAAZ,CAAV;MACAlE,MAAM,CAACJ,UAAP,CAAkBK,QAAlB,GACE,OAAOgE,YAAY,CAACG,GAAb,CAAiBF,cAAjB,EAAiCd,QAAjC,CAA0C,EAA1C,CADT;IAED;EACF,CAhFiE,CAiFlE;;;EACA5D,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,SAAlB,EAA8BM,OAAD,IAAa;IACrD,OAAOA,OAAO,CAACyD,MAAR,CACJ5D,MAAD,IAAY,CAACuD,MAAA,CAAGC,IAAH,CAAQxD,MAAM,CAACJ,UAAP,CAAkBK,QAA1B,EAAoCqE,EAApC,CAAuC,CAAvC,CADR,CAAP;EAGD,CAJY,CAAb;EAKA;AACF;AACA;;EACE,IAAIrB,OAAO,CAACe,EAAR,CAAW,CAAX,CAAJ,EAAmB;IACjB,MAAMxF,YAAY,GAAGgB,UAAU,CAACc,GAAX,CAAe,cAAf,CAArB;;IACA,IAAI,CAAC9B,YAAL,EAAmB;MACjB,MAAM,IAAII,KAAJ,CAAU,2BAAV,CAAN;IACD;;IACD,MAAMM,aAAa,GAAGV,YAAY,CAACW,SAAb,CAAuB;MAC3CH,IAAI,EAAEF;IADqC,CAAvB,CAAtB;IAGA,MAAMyF,UAAgB,GAAG;MACvB3E,UAAU,EAAE;QACVK,QAAQ,EAAE,KADA;QAEVjB,IAAI,EAAEF,UAFI;QAGVG,IAAI,EAAEP;MAHI,CADW;MAMvBwB,IAAI,EAAE,IANiB;MAOvBgB,QAAQ,EAAExC,SAPa;MAQvBgF,SAAS,EAAEhF;IARY,CAAzB;;IAUA,IAAI8F,cAAc,GAAGjB,MAAA,CAAGC,IAAH,CAAQ,CAAR,CAArB;;IACA,IAAIiB,cAAc,GAAG,IAAAC,cAAA,GAArB;;IACA,KAAK,MAAMnD,KAAX,IAAoB/B,UAAU,CAACc,GAAX,CAAe,QAAf,CAApB,EAA8C;MAC5CmE,cAAc,GAAGA,cAAc,CAACE,GAAf,CACd,GAAEpD,KAAK,CAACL,QAAN,CAAgBL,MAAO,IAAGU,KAAK,CAACL,QAAN,CAAgBH,KAAM,EADpC,CAAjB;IAGD;;IACD,WAAW,MAAMzB,SAAjB,IAA8BJ,aAAa,CAACE,OAAd,EAA9B,EAAuD;MACrD;MACA,IACEqF,cAAc,CAACG,GAAf,CACG,GAAEtF,SAAS,CAAC4B,QAAV,CAAoBL,MAAO,IAAGvB,SAAS,CAAC4B,QAAV,CAAoBH,KAAM,EAD7D,CADF,EAIE;QACA;MACD;;MACDvB,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,QAAlB,EAA6BC,MAAD,IACvCA,MAAM,CAACC,IAAP,CAAYT,SAAZ,CADW,CAAb;MAGAE,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,WAAlB,EAAgCW,SAAD,IAC1CA,SAAS,CAACT,IAAV,CAAe,IAAf,CADW,CAAb;;MAGA,MAAM8E,aAAa,GAAGtB,MAAA,CAAGC,IAAH,CAAQlE,SAAS,CAACM,UAAV,CAAqBK,QAA7B,CAAtB;;MACA,IAAIiE,cAAc,GAAGW,aAArB;;MACA,IAAIX,cAAc,CAACF,EAAf,CAAkBf,OAAlB,CAAJ,EAAgC;QAC9BiB,cAAc,GAAGjB,OAAjB;MACD;;MACDA,OAAO,GAAGA,OAAO,CAACmB,GAAR,CAAYF,cAAZ,CAAV;MACAM,cAAc,GAAGA,cAAc,CAACG,GAAf,CAAmBE,aAAnB,EAAkCT,GAAlC,CAAsCF,cAAtC,CAAjB;;MACA,IACEjB,OAAO,CAACqB,EAAR,CAAW,CAAX,MACCE,cAAc,CAACF,EAAf,CAAkB,CAAlB,KACCE,cAAc,CAACR,EAAf,CAAkB,IAAAK,sCAAA,EAA8BE,UAA9B,CAAlB,CAFF,CADF,EAIE;QACA;MACD;IACF;;IACD,IAAIC,cAAc,CAACR,EAAf,CAAkB,CAAlB,CAAJ,EAA0B;MACxBO,UAAU,CAAC3E,UAAX,CAAsBK,QAAtB,GAAiC,OAAOuE,cAAc,CAACpB,QAAf,CAAwB,EAAxB,CAAxC;MACA5D,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,SAAlB,EAA8BM,OAAD,IACxCA,OAAO,CAACJ,IAAR,CAAawE,UAAb,CADW,CAAb;IAGD;EACF;;EACD,IAAItB,OAAO,CAACe,EAAR,CAAW,CAAX,KAAiBnB,kBAArB,EAAyC;IACvC,MAAM,IAAIjE,KAAJ,CAAU,sCAAV,CAAN;EACD;EACD;AACF;AACA;AACA;AACA;;;EACE,MAAMyC,UAAU,GAAG7B,UAAU,CAC1Bc,GADgB,CACZ,QADY,EAEhBgB,SAFgB,CAELC,KAAD,IACT,IAAIpD,WAAJ,CAAgBoD,KAAK,CAAC3B,UAAN,CAAiBZ,IAAjC,EAAuC;IAAEwC,QAAQ,EAAE;EAAZ,CAAvC,EAA4DC,MAA5D,CACE,IAAItD,WAAJ,CAAgBW,UAAhB,EAA4B;IAAE0C,QAAQ,EAAE;EAAZ,CAA5B,CADF,CAHe,CAAnB;;EAOA,IAAIH,UAAU,KAAK,CAAC,CAApB,EAAuB;IACrB,OAAOA,UAAU,IAAI7B,UAAU,CAACc,GAAX,CAAe,WAAf,EAA4BC,IAAjD,EAAuD;MACrDf,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,WAAlB,EAAgCW,SAAD,IAC1CA,SAAS,CAACT,IAAV,CAAe,IAAf,CADW,CAAb;IAGD;;IACD,IAAI2B,OAAe,GAAGlC,UAAU,CAACc,GAAX,CAAe,WAAf,EAA4BA,GAA5B,CAAgCe,UAAhC,CAAtB;IACA,MAAMM,cAA2B,GAAG;MAClC;MACA3C,IAAI,EAAE4C;IAF4B,CAApC;;IAIA,IAAIF,OAAO,KAAK,IAAhB,EAAsB;MACpB,MAAMG,WAAW,GAAGC,gBAAA,CAAWC,WAAX,CAAuBC,MAAvB,CAA8BC,YAAA,CAAMC,MAAN,CAAaR,OAAb,CAA9B,CAApB;;MACA,MAAM1C,IAAI,GAAG6C,WAAW,CAAC7C,IAAzB;;MACA,IACE,CAAC,CAACA,IAAF,IACA,CAAC,CAAC2C,cAAc,CAAC3C,IADjB,IAEA,CAACiD,YAAA,CAAME,KAAN,CAAYnD,IAAZ,EAAkB2C,cAAc,CAAC3C,IAAjC,CAHH,EAIE;QACA,MAAM,IAAIJ,KAAJ,CACJ,yDADI,CAAN;MAGD;;MACD,MAAMwD,SAAS,GAAGP,WAAW,CAACO,SAA9B;;MACA,IAAIA,SAAJ,EAAe;QACbT,cAAc,CAACS,SAAf,GAA2BA,SAA3B;MACD;;MACD,MAAMC,UAAU,GAAGR,WAAW,CAACQ,UAA/B;;MACA,IAAIA,UAAJ,EAAgB;QACdV,cAAc,CAACU,UAAf,GAA4BA,UAA5B;MACD;IACF;;IACDX,OAAO,GAAGO,YAAA,CAAMK,MAAN,CAAaR,gBAAA,CAAWC,WAAX,CAAuBQ,IAAvB,CAA4BZ,cAA5B,CAAb,CAAV;IACAnC,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,WAAlB,EAAgCW,SAAD,IAC1CA,SAAS,CAACH,GAAV,CAAcgB,UAAd,EAA0BK,OAA1B,CADW,CAAb;EAGD;;EACD,IAAI,CAACmB,kBAAL,EAAyB;IACvB,OAAO,CAACrD,UAAD,EAAa+D,MAAA,CAAGC,IAAH,CAAQP,OAAR,CAAb,CAAP;EACD;;EACD,OAAOzD,UAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,eAAesF,MAAf,CACLtF,UADK,EAELiD,WAFK,EAGLE,MAHK,EAIL;EAAElE,MAAM,GAAGC;AAAX,IAAkC,EAJ7B,EAK6B;EAClCD,MAAM,GAAGA,MAAM,IAAI,IAAAI,wBAAA,GAAnB;EACA,OAAO,MAAMkE,kBAAkB,CAACvD,UAAD,EAAaiD,WAAb,EAA0B,IAA1B,EAAgCE,MAAhC,EAAwC;IACrElE,MADqE;IAErEmE,gBAAgB,EAAE;EAFmD,CAAxC,CAA/B;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,eAAemC,cAAf,CACLvF,UADK,EAELwF,WAFK,EAGLvC,WAHK,EAIL;EAAEhE,MAAM,GAAGC;AAAX,IAAkC,EAJ7B,EAK6B;EAClCD,MAAM,GAAGA,MAAM,IAAI,IAAAI,wBAAA,GAAnB;;EACA,IAAImG,WAAW,IAAIxF,UAAU,CAACc,GAAX,CAAe,SAAf,EAA0BC,IAA7C,EAAmD;IACjD,MAAM,IAAI3B,KAAJ,CAAU,uBAAV,CAAN;EACD;;EACD,MAAMqB,QAAQ,GAAGsD,MAAA,CAAGC,IAAH,CACfhE,UAAU,CAACc,GAAX,CAAe,SAAf,EAA0BA,GAA1B,CAA8B0E,WAA9B,EAA4CpF,UAA5C,CAAuDK,QADxC,CAAjB;;EAGA,OAAO,MAAM8C,kBAAkB,CAC7BvD,UAD6B,EAE7BiD,WAF6B,EAG7B,IAH6B,EAI7Bc,MAAA,CAAGC,IAAH,CAAQvD,QAAR,CAJ6B,EAK7B;IACExB,MADF;IAEEmE,gBAAgB,EAAE;EAFpB,CAL6B,CAA/B;AAUD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASqC,qBAAT,CACLzF,UADK,EAEL;EAAEf,MAAM,GAAGC;AAAX,IAAkC,EAF7B,EAGoB;EACzBD,MAAM,GAAGA,MAAM,IAAI,IAAAI,wBAAA,GAAnB;EAEA,OAAO,IAAAqG,6BAAA,EAAuB1F,UAAvB,EAAmCf,MAAnC,EAA2C,oBAA3C,CAAP;AACD;;eAEc;EACb+D,QADa;EAEbO,kBAFa;EAGb+B,MAHa;EAIbG,qBAJa;EAKbF,cALa;EAMbxF,cANa;EAOblB;AAPa,C"}