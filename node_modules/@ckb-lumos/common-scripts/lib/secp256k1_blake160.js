"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CellCollector = void 0;
exports.injectCapacity = injectCapacity;
exports.payFee = payFee;
exports.prepareSigningEntries = prepareSigningEntries;
exports.setupInputCell = setupInputCell;
exports.transfer = transfer;
exports.transferCompatible = transferCompatible;

var _immutable = require("immutable");

var _helpers = require("@ckb-lumos/helpers");

var _codec = require("@ckb-lumos/codec");

var _base = require("@ckb-lumos/base");

var _configManager = require("@ckb-lumos/config-manager");

var _helper = require("./helper");

var _from_info = require("./from_info");

var _bi = require("@ckb-lumos/bi");

const {
  ScriptValue
} = _base.values;
const CellCollector = class CellCollector {
  constructor(fromInfo, cellProvider, {
    config = undefined,
    queryOptions = {}
  } = {}) {
    if (!cellProvider) {
      throw new Error(`Cell provider is missing!`);
    }

    config = config || (0, _configManager.getConfig)();
    this.fromScript = (0, _from_info.parseFromInfo)(fromInfo, {
      config
    }).fromScript;
    this.config = config;
    queryOptions = { ...queryOptions,
      lock: this.fromScript,
      type: queryOptions.type || "empty"
    };
    this.cellCollector = cellProvider.collector(queryOptions);
  }

  async *collect() {
    if (!(0, _helper.isSecp256k1Blake160Script)(this.fromScript, this.config)) {
      return;
    }

    for await (const inputCell of this.cellCollector.collect()) {
      yield inputCell;
    }
  }

};
/**
 * Setup input cell infos, such as cell deps and witnesses.
 *
 * @param txSkeleton
 * @param inputCell
 * @param _fromInfo
 * @param options
 */

exports.CellCollector = CellCollector;

async function setupInputCell(txSkeleton, inputCell, _fromInfo, {
  config = undefined,
  defaultWitness = "0x",
  since = undefined
} = {}) {
  config = config || (0, _configManager.getConfig)();
  const fromScript = inputCell.cellOutput.lock;

  if (!(0, _helper.isSecp256k1Blake160Script)(fromScript, config)) {
    throw new Error(`Not SECP256K1_BLAKE160 input!`);
  } // add inputCell to txSkeleton


  txSkeleton = txSkeleton.update("inputs", inputs => {
    return inputs.push(inputCell);
  });
  const output = {
    cellOutput: {
      capacity: inputCell.cellOutput.capacity,
      lock: inputCell.cellOutput.lock,
      type: inputCell.cellOutput.type
    },
    data: inputCell.data
  };
  txSkeleton = txSkeleton.update("outputs", outputs => {
    return outputs.push(output);
  });

  if (since) {
    txSkeleton = txSkeleton.update("inputSinces", inputSinces => {
      return inputSinces.set(txSkeleton.get("inputs").size - 1, since);
    });
  }

  txSkeleton = txSkeleton.update("witnesses", witnesses => {
    return witnesses.push(defaultWitness);
  });
  const template = config.SCRIPTS.SECP256K1_BLAKE160;

  if (!template) {
    throw new Error(`SECP256K1_BLAKE160 script not defined in config!`);
  }

  const scriptOutPoint = {
    txHash: template.TX_HASH,
    index: template.INDEX
  }; // add cell dep

  txSkeleton = (0, _helper.addCellDep)(txSkeleton, {
    outPoint: scriptOutPoint,
    depType: template.DEP_TYPE
  }); // add witness

  /*
   * Modify the skeleton, so the first witness of the fromAddress script group
   * has a WitnessArgs construct with 65-byte zero filled values. While this
   * is not required, it helps in transaction fee estimation.
   */

  const firstIndex = txSkeleton.get("inputs").findIndex(input => new ScriptValue(input.cellOutput.lock, {
    validate: false
  }).equals(new ScriptValue(fromScript, {
    validate: false
  })));

  if (firstIndex !== -1) {
    while (firstIndex >= txSkeleton.get("witnesses").size) {
      txSkeleton = txSkeleton.update("witnesses", witnesses => witnesses.push("0x"));
    }

    let witness = txSkeleton.get("witnesses").get(firstIndex);
    const newWitnessArgs = {
      /* 65-byte zeros in hex */
      lock: _helper.SECP_SIGNATURE_PLACEHOLDER
    };

    if (witness !== "0x") {
      const witnessArgs = _base.blockchain.WitnessArgs.unpack(_codec.bytes.bytify(witness));

      const lock = witnessArgs.lock;

      if (!!lock && !!newWitnessArgs.lock && !_codec.bytes.equal(lock, newWitnessArgs.lock)) {
        throw new Error("Lock field in first witness is set aside for signature!");
      }

      const inputType = witnessArgs.inputType;

      if (inputType) {
        newWitnessArgs.inputType = inputType;
      }

      const outputType = witnessArgs.outputType;

      if (outputType) {
        newWitnessArgs.outputType = outputType;
      }
    }

    witness = _codec.bytes.hexify(_base.blockchain.WitnessArgs.pack(newWitnessArgs));
    txSkeleton = txSkeleton.update("witnesses", witnesses => witnesses.set(firstIndex, witness));
  }

  return txSkeleton;
}

/**
 * transfer capacity from secp256k1_blake160 script cells
 *
 * @param txSkeleton
 * @param fromAddress
 * @param toAddress
 * @param amount
 * @param options
 */
async function transfer(txSkeleton, fromAddress, toAddress, amount, {
  config = undefined,
  requireToAddress = true,
  assertAmountEnough = true
} = {}) {
  const result = await transferCompatible(txSkeleton, fromAddress, toAddress, amount, {
    config,
    requireToAddress,
    assertAmountEnough: assertAmountEnough
  });

  let _txSkeleton;

  let _amount;

  if (result instanceof Array) {
    _txSkeleton = result[0];
    _amount = BigInt(result[1].toString());
    return [_txSkeleton, _amount];
  } else {
    _txSkeleton = result;
    return _txSkeleton;
  }
}

/**
 * transfer capacity from secp256k1_blake160 script cells
 *
 * @param txSkeleton
 * @param fromAddress
 * @param toAddress
 * @param amount
 * @param options
 */
async function transferCompatible(txSkeleton, fromAddress, toAddress, amount, {
  config = undefined,
  requireToAddress = true,
  assertAmountEnough = true
} = {}) {
  config = config || (0, _configManager.getConfig)();
  const template = config.SCRIPTS.SECP256K1_BLAKE160;

  if (!template) {
    throw new Error("Provided config does not have SECP256K1_BLAKE160 script setup!");
  }

  const scriptOutPoint = {
    txHash: template.TX_HASH,
    index: template.INDEX
  };
  txSkeleton = (0, _helper.addCellDep)(txSkeleton, {
    outPoint: scriptOutPoint,
    depType: template.DEP_TYPE
  });
  const fromScript = (0, _helpers.parseAddress)(fromAddress, {
    config
  });
  (0, _helper.ensureScript)(fromScript, config, "SECP256K1_BLAKE160");

  if (requireToAddress && !toAddress) {
    throw new Error("You must provide a to address!");
  }

  let _amount = _bi.BI.from(amount);

  if (toAddress) {
    const toScript = (0, _helpers.parseAddress)(toAddress, {
      config
    });
    txSkeleton = txSkeleton.update("outputs", outputs => {
      return outputs.push({
        cellOutput: {
          capacity: "0x" + _amount.toString(16),
          lock: toScript,
          type: undefined
        },
        data: "0x",
        outPoint: undefined,
        blockHash: undefined
      });
    });
  }
  /*
   * First, check if there is any output cells that contains enough capacity
   * for us to tinker with.
   *
   * TODO: the solution right now won't cover all cases, some outputs before the
   * last output might still be tinkerable, right now we are working on the
   * simple solution, later we can change this for more optimizations.
   */


  const lastFreezedOutput = txSkeleton.get("fixedEntries").filter(({
    field
  }) => field === "outputs").maxBy(({
    index
  }) => index);
  let i = lastFreezedOutput ? lastFreezedOutput.index + 1 : 0;

  for (; i < txSkeleton.get("outputs").size && _amount.gt(0); i++) {
    const output = txSkeleton.get("outputs").get(i);

    if (new ScriptValue(output.cellOutput.lock, {
      validate: false
    }).equals(new ScriptValue(fromScript, {
      validate: false
    }))) {
      const cellCapacity = _bi.BI.from(output.cellOutput.capacity);

      let deductCapacity;

      if (_amount.gte(cellCapacity)) {
        deductCapacity = cellCapacity;
      } else {
        deductCapacity = cellCapacity.sub((0, _helpers.minimalCellCapacityCompatible)(output));

        if (deductCapacity.gt(_amount)) {
          deductCapacity = _amount;
        }
      }

      _amount = _amount.sub(deductCapacity);
      output.cellOutput.capacity = "0x" + cellCapacity.sub(deductCapacity).toString(16);
    }
  } // Remove all output cells with capacity equal to 0


  txSkeleton = txSkeleton.update("outputs", outputs => {
    return outputs.filter(output => !_bi.BI.from(output.cellOutput.capacity).eq(0));
  });
  /*
   * Collect and add new input cells so as to prepare remaining capacities.
   */

  if (_amount.gt(0)) {
    const cellProvider = txSkeleton.get("cellProvider");

    if (!cellProvider) {
      throw new Error("Cell provider is missing!");
    }

    const cellCollector = cellProvider.collector({
      lock: fromScript
    });
    const changeCell = {
      cellOutput: {
        capacity: "0x0",
        lock: fromScript,
        type: undefined
      },
      data: "0x",
      outPoint: undefined,
      blockHash: undefined
    };

    let changeCapacity = _bi.BI.from(0);

    let previousInputs = (0, _immutable.Set)();

    for (const input of txSkeleton.get("inputs")) {
      previousInputs = previousInputs.add(`${input.outPoint.txHash}_${input.outPoint.index}`);
    }

    for await (const inputCell of cellCollector.collect()) {
      // skip inputs already exists in txSkeleton.inputs
      if (previousInputs.has(`${inputCell.outPoint.txHash}_${inputCell.outPoint.index}`)) {
        continue;
      }

      txSkeleton = txSkeleton.update("inputs", inputs => inputs.push(inputCell));
      txSkeleton = txSkeleton.update("witnesses", witnesses => witnesses.push("0x"));

      const inputCapacity = _bi.BI.from(inputCell.cellOutput.capacity);

      let deductCapacity = inputCapacity;

      if (deductCapacity.gt(_amount)) {
        deductCapacity = _amount;
      }

      _amount = _amount.sub(deductCapacity);
      changeCapacity = changeCapacity.add(inputCapacity).sub(deductCapacity);

      if (_amount.eq(0) && (changeCapacity.eq(0) || changeCapacity.gt((0, _helpers.minimalCellCapacityCompatible)(changeCell)))) {
        break;
      }
    }

    if (changeCapacity.gt(0)) {
      changeCell.cellOutput.capacity = "0x" + changeCapacity.toString(16);
      txSkeleton = txSkeleton.update("outputs", outputs => outputs.push(changeCell));
    }
  }

  if (_amount.gt(0) && assertAmountEnough) {
    throw new Error("Not enough capacity in from address!");
  }
  /*
   * Modify the skeleton, so the first witness of the fromAddress script group
   * has a WitnessArgs construct with 65-byte zero filled values. While this
   * is not required, it helps in transaction fee estimation.
   */


  const firstIndex = txSkeleton.get("inputs").findIndex(input => new ScriptValue(input.cellOutput.lock, {
    validate: false
  }).equals(new ScriptValue(fromScript, {
    validate: false
  })));

  if (firstIndex !== -1) {
    while (firstIndex >= txSkeleton.get("witnesses").size) {
      txSkeleton = txSkeleton.update("witnesses", witnesses => witnesses.push("0x"));
    }

    let witness = txSkeleton.get("witnesses").get(firstIndex);
    const newWitnessArgs = {
      /* 65-byte zeros in hex */
      lock: _helper.SECP_SIGNATURE_PLACEHOLDER
    };

    if (witness !== "0x") {
      const witnessArgs = _base.blockchain.WitnessArgs.unpack(_codec.bytes.bytify(witness));

      const lock = witnessArgs.lock;

      if (!!lock && !!newWitnessArgs.lock && !_codec.bytes.equal(lock, newWitnessArgs.lock)) {
        throw new Error("Lock field in first witness is set aside for signature!");
      }

      const inputType = witnessArgs.inputType;

      if (inputType) {
        newWitnessArgs.inputType = inputType;
      }

      const outputType = witnessArgs.outputType;

      if (outputType) {
        newWitnessArgs.outputType = outputType;
      }
    }

    witness = _codec.bytes.hexify(_base.blockchain.WitnessArgs.pack(newWitnessArgs));
    txSkeleton = txSkeleton.update("witnesses", witnesses => witnesses.set(firstIndex, witness));
  }

  if (!assertAmountEnough) {
    return [txSkeleton, _bi.BI.from(_amount)];
  }

  return txSkeleton;
}
/**
 * pay fee by secp256k1_blake160 script cells
 *
 * @param txSkeleton
 * @param fromAddress
 * @param amount fee in shannon
 * @param options
 */


async function payFee(txSkeleton, fromAddress, amount, {
  config = undefined
} = {}) {
  config = config || (0, _configManager.getConfig)();
  return await transferCompatible(txSkeleton, fromAddress, null, amount, {
    config,
    requireToAddress: false
  });
}
/**
 * Inject capacity from `fromAddress` to target output.
 *
 * @param txSkeleton
 * @param outputIndex
 * @param fromAddress
 * @param options
 */


async function injectCapacity(txSkeleton, outputIndex, fromAddress, {
  config = undefined
} = {}) {
  config = config || (0, _configManager.getConfig)();

  if (outputIndex >= txSkeleton.get("outputs").size) {
    throw new Error("Invalid output index!");
  }

  const capacity = _bi.BI.from(txSkeleton.get("outputs").get(outputIndex).cellOutput.capacity);

  return await transferCompatible(txSkeleton, fromAddress, null, _bi.BI.from(capacity), {
    config,
    requireToAddress: false
  });
}
/**
 * prepare for txSkeleton signingEntries, will update txSkeleton.get("signingEntries")
 *
 * @param txSkeleton
 * @param options
 */


function prepareSigningEntries(txSkeleton, {
  config = undefined
} = {}) {
  config = config || (0, _configManager.getConfig)();
  return (0, _helper.prepareSigningEntries)(txSkeleton, config, "SECP256K1_BLAKE160");
}

var _default = {
  transfer,
  transferCompatible,
  payFee,
  prepareSigningEntries,
  injectCapacity,
  setupInputCell,
  CellCollector
};
exports.default = _default;
//# sourceMappingURL=secp256k1_blake160.js.map